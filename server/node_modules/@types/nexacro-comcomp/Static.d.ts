// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    Static: nexacro.Static;
}

    
declare namespace nexacro {
    type StaticOmitKeys = 'id'|'tabstop'|'getFocus'|'setFocus'|'ondblclick'|'ondrag'|'ondragenter'|'ondragleave'|'ondragmove'|'ondrop'|'oninput'|'onkeydown'|'onkeyup'|'onkillfocus'|'onmousedown'|'onmouseup'|'onmousewheel'|'onsetfocus';
	
	interface Static extends Omit<nexacro.Component, StaticOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.Static;
	    /**
		 * This property is used to specify the action printed as an accessibility feature when a selection box moves to a Static.
		 */
		readonly accessibilityaction?: string;
		/**
		 * This property is used to determine whether to print accessibility features of the children when a selection box moves to a Static.
		 */
		readonly accessibilitydesclevel?: nexacro.Enum.DescLevel;
		/**
		 * This property is used to specify the description printed as an accessibility feature when a selection box moves to a Static.
		 */
		readonly accessibilitydescription?: string;
		/**
		 * This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a Static.
		 */
		readonly accessibilityenable?: boolean;
		/**
		 * This property is used to specify the label printed as an accessibility feature when a selection box moves to a Static.
		 */
		readonly accessibilitylabel?: string;
		/**
		 * This property is used to set the role of a Static. The role is printed as accessibility functionality when a selection box moves to the component.
		 */
		readonly accessibilityrole?: nexacro.Enum.Role;
		/**
		 * This property is used to set the background of a Static.
		 */
		readonly background?: string;
		/**
		 * This property is used to set the shape of the corners of a Static.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Static's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the shadow effect of a Static.
		 */
		readonly boxShadow?: string;
		/**
		 * This property is used to set the color of the text displayed in a Static.
		 */
		readonly color?: string;
		/**
		 * This property is used to set the style of a Static by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a Static.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to determine whether to enable a Static.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a Static.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property is used to dynamically create an expression designed to display text in a Static.
		 */
		readonly expr?: string;
		/**
		 * This property is used to determine how to adjust the size of the contents area of a Static automatically for its internal contents.
		 */
		readonly fittocontents?: nexacro.Enum.FitToContents;
		/**
		 * This property sets a font used for a Static.
		 */
		readonly font?: string;
		/**
		 * This property is used to specify the height of a Static.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set a hotkey for conducting the default action of a Static.
		 */
		readonly hotkey?: nexacro.Enum.HotKeyModifier;
		/**
		 * This property is used to set the ID of an InitValue to be applied to an Static.
		 */
		readonly initvalueid?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Static's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between characters (kerning) displayed in a Static.
		 */
		readonly letterSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This property is used to set the maximum height of a Static for the component to be displayed on the screen.
		 */
		readonly maxheight?: number;
		/**
		 * This property is used to set the maximum width of a Static for the component to be displayed on the screen.
		 */
		readonly maxwidth?: number;
		/**
		 * This property is used to set the minimum height of a Static for the component to be displayed on the screen.
		 */
		readonly minheight?: number;
		/**
		 * This property is used to set the minimum width of a Static for the component to be displayed on the screen.
		 */
		readonly minwidth?: number;
		/**
		 * This property is used to specify the name of a Static.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a Static.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a Static.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the padding, an inner margin, of a Static.
		 */
		readonly padding?: string;
		/**
		 * This property is used to set the horizontal alignment of the text or contents displayed in a Static.
		 */
		readonly textAlign?: nexacro.Enum.HorizontalAlign;
		/**
		 * This property is used to set the effects applied to the text displayed in a Static.
		 */
		readonly textDecoration?: nexacro.Enum.TextDecorationLine;
		/**
		 * This property is used to set the vertical alignment of the text or contents displayed in a Static.
		 */
		readonly verticalAlign?: nexacro.Enum.VerticalAlign;
		/**
		 * This property is used to decide whether to break lines automatically when the length of text is longer than the output area.
		 */
		readonly wordWrap?: nexacro.Enum.WordWrapType;
		/**
		 * This property is used to set the opacity of a Static.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the parent object of a Static.
		 */
		readonly parent?: object;
		/**
		 * This property is used to specify the index number of a step page where a Static is displayed if the parent object uses the step feature.
		 */
		readonly positionstep?: number;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Static's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to define the direction of printing internal contents or components in a Static.
		 */
		readonly rtl?: boolean;
		/**
		 * This property is used to define the tab order number of a Static component. Tab order means the order of moving focus among components when the focus is moved by entering the tab key. This property is used only when the accessibility features are activated.
		 */
		readonly taborder?: number;
		/**
		 * This property is used to specify the text to display on a Static component.
		 */
		readonly text?: string;
		/**
		 * This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a Static.
		 */
		readonly tooltiptext?: string;
		/**
		 * This property is used to specify the position and type of a tooltip that appears in a Static.
		 */
		readonly tooltiptype?: nexacro.Enum.TooltipType;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Static's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property determines whether to apply the decoration effect to the text in a Static.
		 */
		readonly usedecorate?: boolean;
		/**
		 * This property is used to determine whether to make a Static visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to set the width of a Static.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between words displayed in a Static.
		 */
		readonly wordSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This event occurs when the left button of a mouse is clicked within a Static.
		 */
		readonly onclick?: nexacro.EventObject<nexacro.Static, nexacro.ClickEventInfo>;
		/**
		 * This event occurs when you right-click a Static or touch a Static for a certain duration.
		 */
		readonly oncontextmenu?: nexacro.EventObject<nexacro.Static, nexacro.ContextMenuEventInfo>;
		/**
		 * This event occurs when you press the left button of a mouse within the area of a Static.
		 */
		readonly onlbuttondown?: nexacro.EventObject<nexacro.Static, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release the left button of a mouse within the area of a Static.
		 */
		readonly onlbuttonup?: nexacro.EventObject<nexacro.Static, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a Static.
		 */
		readonly onmouseenter?: nexacro.EventObject<nexacro.Static, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a Static.
		 */
		readonly onmouseleave?: nexacro.EventObject<nexacro.Static, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves within a Static.
		 */
		readonly onmousemove?: nexacro.EventObject<nexacro.Static, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when the position of a Static changes.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.Static, nexacro.MoveEventInfo>;
		/**
		 * This event occurs when you press the right button of a mouse within the area of a Static.
		 */
		readonly onrbuttondown?: nexacro.EventObject<nexacro.Static, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release the right button of a mouse within the area of a Static.
		 */
		readonly onrbuttonup?: nexacro.EventObject<nexacro.Static, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when the size of a Static changes.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.Static, nexacro.SizeEventInfo>;
		/**
		 * This event occurs when you touch and release the screen within the area of a Static.
		 */
		readonly ontouchend?: nexacro.EventObject<nexacro.Static, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is moved along the touch surface within a Static.
		 */
		readonly ontouchmove?: nexacro.EventObject<nexacro.Static, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is placed on the touch surface within a Static.
		 */
		readonly ontouchstart?: nexacro.EventObject<nexacro.Static, nexacro.TouchEventInfo>;
		/**
		 * @param {string} v This property is used to specify the action printed as an accessibility feature when a selection box moves to a Static.
		 * @returns {void} 
		 */
		set_accessibilityaction(v: string): void;
		/**
		 * @param {nexacro.Enum.DescLevel} v This property is used to determine whether to print accessibility features of the children when a selection box moves to a Static.
		 * @returns {void} 
		 */
		set_accessibilitydesclevel(v: nexacro.Enum.DescLevel): void;
		/**
		 * @param {string} v This property is used to specify the description printed as an accessibility feature when a selection box moves to a Static.
		 * @returns {void} 
		 */
		set_accessibilitydescription(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a Static.
		 * @returns {void} 
		 */
		set_accessibilityenable(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the label printed as an accessibility feature when a selection box moves to a Static.
		 * @returns {void} 
		 */
		set_accessibilitylabel(v: string): void;
		/**
		 * @param {nexacro.Enum.Role} v This property is used to set the role of a Static. The role is printed as accessibility functionality when a selection box moves to the component.
		 * @returns {void} 
		 */
		set_accessibilityrole(v: nexacro.Enum.Role): void;
		/**
		 * @param {string} v This property is used to set the background of a Static.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a Static.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Static's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {string} v This property is used to set the shadow effect of a Static.
		 * @returns {void} 
		 */
		set_boxShadow(v: string): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a Static.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property is used to set the style of a Static by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a Static.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a Static.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a Static.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {string} v This property is used to dynamically create an expression designed to display text in a Static.
		 * @returns {void} 
		 */
		set_expr(v: string): void;
		/**
		 * @param {nexacro.Enum.FitToContents} v This property is used to determine how to adjust the size of the contents area of a Static automatically for its internal contents.
		 * @returns {void} 
		 */
		set_fittocontents(v: nexacro.Enum.FitToContents): void;
		/**
		 * @param {string} v This property sets a font used for a Static.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the height of a Static.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {nexacro.Enum.HotKeyModifier} v This property is used to set a hotkey for conducting the default action of a Static.
		 * @returns {void} 
		 */
		set_hotkey(v: nexacro.Enum.HotKeyModifier): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Static's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between characters (kerning) displayed in a Static.
		 * @returns {void} 
		 */
		set_letterSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * @param {number} v This property is used to set the maximum height of a Static for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the maximum width of a Static for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxwidth(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum height of a Static for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum width of a Static for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minwidth(v: number): void;
		/**
		 * @param {string} v This property is used to specify the name of a Static.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a Static.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a Static.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {string} v This property is used to set the padding, an inner margin, of a Static.
		 * @returns {void} 
		 */
		set_padding(v: string): void;
		/**
		 * @param {nexacro.Enum.HorizontalAlign} v This property is used to set the horizontal alignment of the text or contents displayed in a Static.
		 * @returns {void} 
		 */
		set_textAlign(v: nexacro.Enum.HorizontalAlign): void;
		/**
		 * @param {nexacro.Enum.TextDecorationLine} v This property is used to set the effects applied to the text displayed in a Static.
		 * @returns {void} 
		 */
		set_textDecoration(v: nexacro.Enum.TextDecorationLine): void;
		/**
		 * @param {nexacro.Enum.VerticalAlign} v This property is used to set the vertical alignment of the text or contents displayed in a Static.
		 * @returns {void} 
		 */
		set_verticalAlign(v: nexacro.Enum.VerticalAlign): void;
		/**
		 * @param {nexacro.Enum.WordWrapType} v This property is used to decide whether to break lines automatically when the length of text is longer than the output area.
		 * @returns {void} 
		 */
		set_wordWrap(v: nexacro.Enum.WordWrapType): void;
		/**
		 * @param {number} v This property is used to set the opacity of a Static.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {number} v This property is used to specify the index number of a step page where a Static is displayed if the parent object uses the step feature.
		 * @returns {void} 
		 */
		set_positionstep(v: number): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Static's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {number} v This property is used to define the tab order number of a Static component. Tab order means the order of moving focus among components when the focus is moved by entering the tab key. This property is used only when the accessibility features are activated.
		 * @returns {void} 
		 */
		set_taborder(v: number): void;
		/**
		 * @param {string} v This property is used to specify the text to display on a Static component.
		 * @returns {void} 
		 */
		set_text(v: string): void;
		/**
		 * @param {string} v This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a Static.
		 * @returns {void} 
		 */
		set_tooltiptext(v: string): void;
		/**
		 * @param {nexacro.Enum.TooltipType} v This property is used to specify the position and type of a tooltip that appears in a Static.
		 * @returns {void} 
		 */
		set_tooltiptype(v: nexacro.Enum.TooltipType): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Static's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {boolean} v This property determines whether to apply the decoration effect to the text in a Static.
		 * @returns {void} 
		 */
		set_usedecorate(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a Static visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to set the width of a Static.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between words displayed in a Static.
		 * @returns {void} 
		 */
		set_wordSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * This method is used to declare a certain event and then add it to a Static.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the Static.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a Static.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a Static as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to cause a Static to be displayed at the top on the screen. This method applies to among the components under the same parent.
		 */
		bringToFront(): null;
		/**
		 * This method is used to cause a Static to be displayed one level higher on the screen. This method applies to among the components under the same parent.
		 */
		bringToPrev(): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to delete a Static that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method finds a handler in a certain event of a Static and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns the text displayed in a Static.
		 * @returns {string} 
		 */
		getDisplayText(): string;
		/**
		 * This method returns a specific handler from a certain event of a Static by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method is used to obtain the bottom position of a Static in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * This method is used to obtain the height of a Static in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the left position of a Static in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * This method is used to obtain the right position of a Static in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * This method is used to obtain the top position of a Static in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * This method is used to obtain the width of a Static in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method returns the value of a Static's bottom property in pixel.
		 * @returns {number} 
		 */
		getPixelBottom(): number;
		/**
		 * This method returns the height of a Static in pixel.
		 * @returns {number} 
		 */
		getPixelHeight(): number;
		/**
		 * This method returns the value of a Static's left property in pixel.
		 * @returns {number} 
		 */
		getPixelLeft(): number;
		/**
		 * This method returns the value of a Static's right property in pixel.
		 * @returns {number} 
		 */
		getPixelRight(): number;
		/**
		 * This method returns the value of a Static's top property in pixel.
		 * @returns {number} 
		 */
		getPixelTop(): number;
		/**
		 * This method returns the width of a Static in pixel.
		 * @returns {number} 
		 */
		getPixelWidth(): number;
		/**
		 * This method is used to initialize a Static after creating it in a script dynamically.
		 * @param {string} strName It sets the ID of a Static in the form of a string.
		 * @param {(string|number)} vLeft It specifies the value of the left property of a Static in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop It specifies the value of the top property of a Static in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth It specifies the value of the width property of a Static in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight It specifies the value of the height property of a Static in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight It specifies the value of the right property of a Static in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom It specifies the value of the bottom property of a Static in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vMinWidth It specifies a Static's minimum width that can be displayed in the Form.
		 * @param {(string|number)} vMaxWidth It specifies a Static's maximum width that can be displayed in the Form.

If this value is smaller than vMinWidth, it will be replaced by the value of vMinWidth.
		 * @param {(string|number)} vMinHeight It specifies a Static's minimum height that can be displayed in the Form.
		 * @param {(string|number)} vMaxHeight It specifies a Static's maximum height that can be displayed in the Form.

If this value is smaller than vMinHeight, it will be replaced by the value of vMinHeight.
		 */
		init(strName: string, vLeft: string|number, vTop: string|number, vWidth: string|number, vHeight: string|number, vRight?: string|number, vBottom?: string|number, vMinWidth?: string|number, vMaxWidth?: string|number, vMinHeight?: string|number, vMaxHeight?: string|number): null;
		/**
		 * This method is used to add a handler to a certain event of a Static at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to change the position and size of a Static.
		 * @param {(string|number)} vLeft This parameter defines the value of the left property of a Static in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop This parameter defines the value of the top property of a Static in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth This parameter defines the value of the width property of a Static in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight This parameter defines the value of the height property of a Static in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight This parameter defines the value of the right property of a Static in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom This parameter defines the value of the bottom property of a Static in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 */
		move(vLeft: string|number, vTop: string|number, vWidth?: string|number, vHeight?: string|number, vRight?: string|number, vBottom?: string|number): null;
		/**
		 * This method is used to cause a Static to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToNext(objComp: object): null;
		/**
		 * This method is used to cause a Static to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToNext(strComp: string): null;
		/**
		 * This method is used to cause a Static to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToPrev(objComp: object): null;
		/**
		 * This method is used to cause a Static to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToPrev(strComp: string): null;
		/**
		 * This method is used to remove a certain event that is declared in a Static.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the Static.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a Static.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a Static and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the size of a Static.
		 * @param {(string|number)} vWidth This is the width of the Static, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the width while the base component is ignored.
If you specify a number in percentage, the width of the Static will be determined in proportion to the width of the base component.
		 * @param {(string|number)} vHeight This is the height of the Static, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the height while the base component is ignored.
If you specify a number in percentage, the height of the Static will be determined in proportion to the height of the base component.
		 */
		resize(vWidth: string|number, vHeight: string|number): null;
		/**
		 * This method is used to cause a Static to be displayed at the bottom on the screen. This method applies to among the components under the same parent.
		 */
		sendToBack(): null;
		/**
		 * This method is used to cause a Static to be displayed one level lower on the screen. This method applies to among the components under the same parent.
		 */
		sendToNext(): null;
		/**
		 * This method is used to change the first handler in a certain event of a Static.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a Static.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to specify the bottom position of a Static in pixel, based on the parent component's top position.
		 * @param {number} nBottom It is a pixel value representing the bottom position of a Static, calculated based on the parent component's top position.
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * This method is used to specify the height of a Static in pixel.
		 * @param {number} nHeight It is a pixel value representing the height of a Static.
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * This method is used to specify the left position of a Static in pixel, based on the parent component's left position.
		 * @param {number} nLeft It is a pixel value representing the left position of a Static, calculated based on the parent component's left position.
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * This method is used to specify the right position of a Static in pixel, based on the parent component's left position.
		 * @param {number} nRight It is a pixel value representing the right position of a Static, calculated based on the parent component's left position.
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * This method is used to specify the top position of a Static in pixel, based on the parent component's top position.
		 * @param {number} nTop It is a pixel value representing the top position of a Static, calculated based on the parent component's top position.
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * This method is used to specify the width of a Static in pixel.
		 * @param {number} nWidth It is a pixel value representing the width of a Static.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * This method is used to display a Static on the screen. The Static mentioned here refers to the one that is dynamically created through a script.
		 */
		show(): null;
	}
}

