// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    VirtualFile: nexacro.VirtualFile;
}

    
declare namespace nexacro {
    type VirtualFileOmitKeys = 'id';
	
	interface VirtualFile extends Omit<nexacro.EventSinkObject, VirtualFileOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.VirtualFile;
	    /**
		 * This property is used to determine how a VirtualFile object performs a requested task.
		 */
		readonly async?: any;
		/**
		 * This read-only property holds the name of a file loaded onto a VirtualFile.
		 */
		readonly filename?: any;
		/**
		 * This read-only property holds the information on the full path of a file opened in a VirtualFile.
		 */
		readonly fullpath?: any;
		/**
		 * This property is used to specify the name of a VirtualFile.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the parent object of a VirtualFile.
		 */
		readonly parent?: object;
		/**
		 * This read-only property holds the information on the path of a file opened in a VirtualFile.
		 */
		readonly path?: any;
		/**
		 * This event occurs when a task requested to a VirtualFile fails.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.VirtualFile, nexacro.VirtualFileErrorEventInfo>;
		/**
		 * This event occurs when a task requested to a VirtualFile succeeds.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.VirtualFile, nexacro.VirtualFileEventInfo>;
		/**
		 * @param {any} v This property is used to determine how a VirtualFile object performs a requested task.
		 * @returns {void} 
		 */
		set_async(v: any): void;
		/**
		 * @param {string} v This property is used to specify the name of a VirtualFile.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * This method is used to declare a certain event and then add it to a VirtualFile.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the VirtualFile.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a VirtualFile.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to close a file opened by a VirtualFile.
		 */
		close(): null;
		/**
		 * This method is used to copy a certain file in a VirtualFile.
		 * @param {string} strSrc It specifies the name of an original file with the file's path.

For specifying a path, you can use either an absolute path or an alias.
		 * @param {string} strDest It specifies the name of a copy file with the file's path.

For specifying a path, you can use either an absolute path or an alias.
		 * @returns {boolean} 
		 */
		copy(strSrc: string, strDest: string): boolean;
		/**
		 * This method is used to create a folder in a VirtualFile.
		 * @param {string} strPath This is a string that specifies the name of a folder to create, along with the intermediate path.

If you specify a absolute path like "C:\\TobeSoft\\TestFolder", a folder will be created in the relevant location.
However, if you specify only a directory name like "My_Folder", a folder will be created in My Documents.
		 * @param {boolean} bAllCreate If you specify "true", a folder will be created after the entire intermediate path is created.
If you specify "false", a folder will be created only when the specified intermediate path exists.

The default value is "false".
		 * @returns {boolean} 
		 */
		createDirectory(strPath: string, bAllCreate?: boolean): boolean;
		/**
		 * This method is used to remove a folder in a VirtualFile.
		 * @param {string} strPath This is a string that specifies the name of a folder to remove, along with the intermediate path.

If you specify a absolute path like "C:\\TobeSoft\\TestFolder", a folder will be removed from the relevant location.
However, if you specify only a directory name like "My_Folder", a folder will be removed from My Documents.
		 * @param {boolean} bAllChild If you specify "true", the specified folder will be removed together with subordinate folders and files.
If you specify "false", the subordinate folders and files of the specified folder will not be removed.

The default value is "false".
		 * @returns {boolean} 
		 */
		deleteDirectory(strPath: string, bAllChild?: boolean): boolean;
		/**
		 * This method finds a handler in a certain event of a VirtualFile and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns a specific handler from a certain event of a VirtualFile object by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find
The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method returns a list comprising the files or sub-folders in a certain location.
		 * @param {string} strPath This string represents a folder whose list of files or folders you want to obtain.

You can use either an absolute path or an alias.
		 * @param {string} strSearchExpr This string represents a regular expression used to find files and folders that will be included in a returned file list.
The defined regular expression is set to match file names or folder names.

If you use an escape character ("\") in a regular expression, you need to use it twice like "\\".
 eg) The regular expression "Text\\d" is designed to search for a file name or folder name that comprises "Text" and a following number.

Since the "." in a regular expression matches all characters except line feed characters, you must specify "\\." to match the character "." itself.
 eg) The regular expression "\\.txt$" is designed to search for a file whose extension is txt.
		 * @param {any} constOption This is a constant representing the types of search targets that can be found in a returned file list.

If you specify "VirtualFile.findAll" or 1 (0x01), this method will search the files and folders in the location specified by the strPath parameter.
If you specify "VirtualFile.findFileOnly" or 2 (0x02), this method will search only the files in the location specified by the strPath parameter.
If you specify "VirtualFile.findDirectoryOnly" or 4 (0x04), this method will search only the subordinate folders in the location specified by the strPath parameter.

If you specify "VirtualFile.findRecursive" or 8 (0x08), this method will search the sub-folders recursively.
If you specify "VirtualFile.findCaseless" or 16 (0x10), this method will conduct case-insensitive search. 

You can specify the values "VirtualFile.findRecursive" and "VirtualFile.findCaseless" together with another option by using "|" as a divider.

The default value of this parameter is "VirtualFile.findAll".
		 * @returns {boolean} 
		 */
		getFileList(strPath: string, strSearchExpr: string, constOption?: any): boolean;
		/**
		 * This method is used to obtain the size of a file opened in a VirtualFile.
		 * @returns {boolean} 
		 */
		getFileSize(): boolean;
		/**
		 * This method is used to add a handler to a certain event of a VirtualFile at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method returns the existence of a certain file or folder.
		 * @param {string} strPath This string represents a file or folder whose existence you want to check.

You can use either an absolute path or an alias.
		 * @returns {boolean} 
		 */
		isExist(strPath: string): boolean;
		/**
		 * This method is used to open a file loaded onto a VirtualFile in a specified mode.
		 * @param {string} strFileName This is the name of a file you want to open, specified with an absolute path or alias.

This parameter is applicable only to a virtual file delivered through a FileUpload, FileUpTransfer or FileDialog object as well as a virtual file that is dragged and dropped.
		 * @param {object} constOptions This is a constant that represents an option for opening a file.
You can specify multiple options by using OR operators (|) as dividers.

If you specify "VirtualFile.openRead" or 1, you can open a file in the read-only mode.
If a designated file does not exist, an error occurs.

If you specify "VirtualFile.openWrite" or 2, you can open a file in the write-only mode.
If a designated file does not exist, the file will be created.

If you specify "VirtualFile.openAppend" or 16, you can open a file in the read and write mode.
If a designated file exists, the file pointer will be situated at the end of the opened file.
If a designated file does not exist, the file will be created.

If you specify "VirtualFile.openText" or 4096, you can create and open a file.
If a designated file already exists, the onerror event will occur.

If you specify "VirtualFile.openCreate" or 256, you can open a file in the text mode.

If you specify "VirtualFile.openBinary" or 512, you can open a file in the binary mode.
		 * @returns {boolean} 
		 */
		open(strFileName: string, constOptions: object): boolean;
		/**
		 * This method is used to read the contents of a file opened in a VirtualFile.
		 * @param {number} nLength The length of contents to read from the file, specified in byte.

If omitted, the entire fill will be read.
		 * @param {string} strCharset It specifies a character set applied to contents to read

This parameter is supported only by the Windows NRE. In mobile devices, the UTF-8 character set will be applied.
		 * @returns {boolean} 
		 */
		read(nLength?: number, strCharset?: string): boolean;
		/**
		 * This method is used to read the contents of a file opened in a VirtualFile up to a certain point.
		 * @param {string} strDelimeter It specifies a delimiter that indicates where to stop reading in a file.

The default value is "\n".
		 * @param {string} strCharset It specifies a character set applied to contents to read

This parameter is supported only by the Windows NRE. In mobile devices, the UTF-8 character set will be applied.
		 * @returns {boolean} 
		 */
		readLine(strDelimeter?: string, strCharset?: string): boolean;
		/**
		 * This method is used to remove the file in a VirtualFile.
		 * @param {string} strFilePath This is a string that represents the name of a file to remove, specified with the file's path.
 
For specifying the path, you can use either an absolute path or an alias.
		 * @returns {boolean} 
		 */
		remove(strFilePath: string): boolean;
		/**
		 * This method is used to remove the file in a VirtualFile.
		 * @param {object} objVirtualFile This is a VirtualFile object that is returned from the FileDialog object and will be removed.

You cannot designate a VirtualFile object if the object itself is a subject that executes this method.
The onerror event will occur if the designated VirtualFile object itself is a subject that executes this method.
		 * @returns {boolean} 
		 */
		remove(objVirtualFile: object): boolean;
		/**
		 * This method is used to remove a certain event that is declared in a VirtualFile.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the VirtualFile.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a VirtualFile.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This is method used to relocate or rename a certain file in a VirtualFile.
		 * @param {string} strOldname It specifies the name and path of a file whose location or name will be changed.

For specifying a path, you can use either an absolute path or an alias.
		 * @param {string} strNewname It specifies a new path and name of the file.

For specifying a path, you can use either an absolute path or an alias.
		 * @returns {boolean} 
		 */
		rename(strOldname: string, strNewname: string): boolean;
		/**
		 * This method is used to rename a folder in a VirtualFile.
		 * @param {string} strOldName This is a string that specifies the name of a folder to rename, along with the intermediate path.

If you specify a absolute path like "C:\\TobeSoft\\TestFolder", a folder in the relevant location will be renamed.
However, if you specify only a directory name like "My_Folder", a folder in My Documents will be renamed.
		 * @param {string} strNewName This is the new name of the specified folder, not including the intermediate path.
		 * @returns {boolean} 
		 */
		renameDirectory(strOldName: string, strNewName: string): boolean;
		/**
		 * This method is used to relocate a file pointer in a file opened in a VirtualFile.
		 * @param {number} nOffset This the number of bytes indicating how far the file pointer will be moved from the current position.

If you specify a negative number, the pointer will move toward the beginning position from the current position.
		 * @param {any} constOption This is a constant representing the options that can be applied when the file pointer is moved.

If you specify "VirtualFile.seekBegin" or 0, the file pointer will move from the beginning position of the file.
If you specify "VirtualFile.seekCurrent" or 1, the file pointer will move from its current position.
If you specify "VirtualFile.seekEnd" or 2, the file pointer will move from the end position of the file.

The default value is "VirtualFile.seekCurrent".
		 * @returns {boolean} 
		 */
		seek(nOffset: number, constOption?: any): boolean;
		/**
		 * This method is used to change the first handler in a certain event of a VirtualFile.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to save data in a file opened in a VirtualFile.
		 * @param {any} varData It specifies a string or buffer object that represents data to save
		 * @param {string} strCharset It specifies a character set applied to data to save.

This parameter is supported only by the Windows NRE. In mobile devices, the UTF-8 character set will be applied.
		 * @returns {boolean} 
		 */
		write(varData: any, strCharset?: string): boolean;
	}
}

