// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    DataObject: nexacro.DataObject;
}

    
declare namespace nexacro {
    type DataObjectOmitKeys = 'id'|'getObject';
	
	interface DataObject extends Omit<nexacro.EventSinkObject, DataObjectOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.DataObject;
	    readonly data?: string;
		/**
		 * This property is used to determine whether to trigger events in a DataObject.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property is used to specify the name of a DataObject.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the parent object of a DataObject.
		 */
		readonly parent?: object;
		readonly preload?: boolean;
		readonly url?: string;
		readonly ondatachanged?: nexacro.EventObject<nexacro.DataObject, nexacro.DataObjectDataChangedEventInfo>;
		readonly onerror?: nexacro.EventObject<nexacro.DataObject, nexacro.DataObjectErrorEventInfo>;
		readonly onload?: nexacro.EventObject<nexacro.DataObject, nexacro.DataObjectLoadEventInfo>;
		readonly onsuccess?: nexacro.EventObject<nexacro.DataObject, nexacro.DataObjectEventInfo>;
		readonly onvaluechanged?: nexacro.EventObject<nexacro.DataObject, nexacro.DataObjectValueChangedEventInfo>;
		set_data(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a DataObject.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the name of a DataObject.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		set_preload(v: boolean): void;
		set_url(v: string): void;
		/**
		 * This method is used to declare a certain event and then add it to a DataObject.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the DataObject.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a DataObject.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a DataObject as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		clearChangedInfo(): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to delete a DataObject that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method finds a handler in a certain event of a DataObject and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		getAllResponseHeaders(): object;
		getChangedInfo(): any[];
		/**
		 * This method returns a specific handler from a certain event of a DataObject by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		getObjectByPath(strJsonpath: string): object;
		getResponse(): string;
		getResponseHeader(strHeaderName: string): string;
		/**
		 * This method is used to add a handler to a certain event of a DataObject at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		load(bAsync?: boolean): null;
		removeChangedInfo(uid: string): null;
		/**
		 * This method is used to remove a certain event that is declared in a DataObject.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the DataObject.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a DataObject.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a DataObject and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		request(strServiceid: string, strMethod: string, strUrl: string, objParam?: object): null;
		serializeToString(funcReplacer?: object, arrReplacer?: any[], strSpace?: string, nSpace?: number): string;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a DataObject.
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} strFunc A string that represents the name of a function that will replace the existing handler
		 * @returns {number} 
		 */
		setEventHadlerLookup(objTarget: object, strEventID: string, strFunc: object): number;
		/**
		 * This method is used to change the first handler in a certain event of a DataObject.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
	}
}

