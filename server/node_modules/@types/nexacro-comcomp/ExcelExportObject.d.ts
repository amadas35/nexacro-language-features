// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    ExcelExportObject: nexacro.ExcelExportObject;
}

    
declare namespace nexacro {
    
	interface ExcelExportObject extends nexacro.EventSinkObject {
	    /**
		 * @constructor
		 */
		new(): nexacro.ExcelExportObject;
	    /**
		 * This property determines whether to compress POST data in the transactions with the server for exporting data.
		 */
		readonly commcompress?: any;
		/**
		 * This property determines the data type used to deliver data to the server for exporting a Grid.
		 */
		readonly commdataformat?: any;
		/**
		 * This property is used to determine whether to open an exported file automatically after the export process.
		 */
		readonly exportactivemode?: nexacro.Enum.ExportActiveMode;
		/**
		 * This property defines how to present the information on the exporting process and how to fire the onprogress event.
		 */
		readonly exporteventtype?: nexacro.Enum.ExportEventType;
		/**
		 * This property is used to set the name of a file created as the result of export.
		 */
		readonly exportfilename?: string;
		/**
		 * This property is used to set the password for a file created as the result of export.
		 */
		readonly exportfilepassword?: string;
		/**
		 * This property is used to set an absolute path where an exported file is created.
		 */
		readonly exportfilepath?: string;
		/**
		 * This property is used to set the text written in an alert dialog that appears before the exporting process begins.
		 */
		readonly exportmessagealert?: string;
		/**
		 * This property is used to set the text that is written in the progress bar when the exporting process is completed. This property is applied when the exportuitype property is set to "exportprogress".
		 */
		readonly exportmessagecomplete?: string;
		/**
		 * This property is used to set the text that is written in the progress bar in the middle of the exporting process. This property is applied when the exportuitype property is set to "exportprogress".
		 */
		readonly exportmessageprocess?: string;
		/**
		 * This property is used to set the text that is written in the progress bar before the exporting process begins. This property is applied when the exportuitype property is set to "exportprogress".
		 */
		readonly exportmessageready?: string;
		/**
		 * This property is used to specify the format of a file exported by an ExcelExportObject. The format is specified in the form of a constant.
		 */
		readonly exporttype?: number;
		/**
		 * This property determines how to show the progress of an export process.
		 */
		readonly exportuitype?: nexacro.Enum.ExportUIType;
		/**
		 * This property is used to specify the URL from which an ExcelExportObject will export files.
		 */
		readonly exporturl?: string;
		/**
		 * This property determines whether to apply text line wrap to Grid cells when the Grid is exported.
		 */
		readonly exportwordwrap?: boolean;
		/**
		 * This property is used to set the file types applicable to the file dialog displayed for creating a file as a result of an exporting process.
		 */
		readonly filefilter?: string;
		/**
		 * This property is used to determine the default file type presented by a file dialog by specifying an index number.
		 */
		readonly filefilterindex?: number;
		/**
		 * This property is used to specify the name of a ExcelExportObject.
		 */
		readonly name?: string;
		readonly quotechar?: nexacro.Enum.ExportImportQuoteType;
		readonly separator?: any;
		/**
		 * This property is used to set the number of rows whose data will be exported as a packet when the entire data is divided.
		 */
		readonly transferrowcount?: number;
		/**
		 * This event occurs when there is an error during export process.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.ExcelExportObject, nexacro.ExcelExportErrorEventInfo>;
		/**
		 * This event occurs at each stage of the exporting process.
		 */
		readonly onprogress?: nexacro.EventObject<nexacro.ExcelExportObject, nexacro.ExcelExportProgressEventInfo>;
		/**
		 * This event occurs when the exporting of all items is completed.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.ExcelExportObject, nexacro.ExcelExportEventInfo>;
		/**
		 * @param {any} v This property determines whether to compress POST data in the transactions with the server for exporting data.
		 * @returns {void} 
		 */
		set_commcompress(v: any): void;
		/**
		 * @param {any} v This property determines the data type used to deliver data to the server for exporting a Grid.
		 * @returns {void} 
		 */
		set_commdataformat(v: any): void;
		/**
		 * @param {nexacro.Enum.ExportActiveMode} v This property is used to determine whether to open an exported file automatically after the export process.
		 * @returns {void} 
		 */
		set_exportactivemode(v: nexacro.Enum.ExportActiveMode): void;
		/**
		 * @param {nexacro.Enum.ExportEventType} v This property defines how to present the information on the exporting process and how to fire the onprogress event.
		 * @returns {void} 
		 */
		set_exporteventtype(v: nexacro.Enum.ExportEventType): void;
		/**
		 * @param {string} v This property is used to set the name of a file created as the result of export.
		 * @returns {void} 
		 */
		set_exportfilename(v: string): void;
		/**
		 * @param {string} v This property is used to set the password for a file created as the result of export.
		 * @returns {void} 
		 */
		set_exportfilepassword(v: string): void;
		/**
		 * @param {string} v This property is used to set an absolute path where an exported file is created.
		 * @returns {void} 
		 */
		set_exportfilepath(v: string): void;
		/**
		 * @param {string} v This property is used to set the text written in an alert dialog that appears before the exporting process begins.
		 * @returns {void} 
		 */
		set_exportmessagealert(v: string): void;
		/**
		 * @param {string} v This property is used to set the text that is written in the progress bar when the exporting process is completed. This property is applied when the exportuitype property is set to "exportprogress".
		 * @returns {void} 
		 */
		set_exportmessagecomplete(v: string): void;
		/**
		 * @param {string} v This property is used to set the text that is written in the progress bar in the middle of the exporting process. This property is applied when the exportuitype property is set to "exportprogress".
		 * @returns {void} 
		 */
		set_exportmessageprocess(v: string): void;
		/**
		 * @param {string} v This property is used to set the text that is written in the progress bar before the exporting process begins. This property is applied when the exportuitype property is set to "exportprogress".
		 * @returns {void} 
		 */
		set_exportmessageready(v: string): void;
		/**
		 * @param {number} v This property is used to specify the format of a file exported by an ExcelExportObject. The format is specified in the form of a constant.
		 * @returns {void} 
		 */
		set_exporttype(v: number): void;
		/**
		 * @param {nexacro.Enum.ExportUIType} v This property determines how to show the progress of an export process.
		 * @returns {void} 
		 */
		set_exportuitype(v: nexacro.Enum.ExportUIType): void;
		/**
		 * @param {string} v This property is used to specify the URL from which an ExcelExportObject will export files.
		 * @returns {void} 
		 */
		set_exporturl(v: string): void;
		/**
		 * @param {boolean} v This property determines whether to apply text line wrap to Grid cells when the Grid is exported.
		 * @returns {void} 
		 */
		set_exportwordwrap(v: boolean): void;
		/**
		 * @param {string} v This property is used to set the file types applicable to the file dialog displayed for creating a file as a result of an exporting process.
		 * @returns {void} 
		 */
		set_filefilter(v: string): void;
		/**
		 * @param {number} v This property is used to determine the default file type presented by a file dialog by specifying an index number.
		 * @returns {void} 
		 */
		set_filefilterindex(v: number): void;
		/**
		 * @param {string} v This property is used to specify the name of a ExcelExportObject.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		set_quotechar(v: nexacro.Enum.ExportImportQuoteType): void;
		set_separator(v: any): void;
		/**
		 * @param {number} v This property is used to set the number of rows whose data will be exported as a packet when the entire data is divided.
		 * @returns {void} 
		 */
		set_transferrowcount(v: number): void;
		/**
		 * This method is used to declare a certain event and then add it to a ExcelExportObject.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the ExcelExportObject.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a ExcelExportObject.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a ExcelExportObject as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to add an export item to an ExcelExportObject.
		 * @param {any} constExportItemType This is a constant representing a component to export.

Since only a Grid is available currently, the constant must be "nexacro.ExportItemTypes.GRID".
		 * @param {object} objExportItem It specifies an export item object that holds the data on the contents to export.
		 * @returns {number} 
		 */
		addExportItem(constExportItemType: any, objExportItem: object): number;
		/**
		 * This method is used to add an export item to an ExcelExportObject.
		 * @param {any} constExportItemType This is a constant representing a component to export.

Since only a Grid is available currently, the constant must be "nexacro.ExportItemTypes.GRID".
		 * @param {object} varExportSource It specifies a component as an object to export.

Only a Grid is available currently, and you should use a format like "this.Grid00" .
		 * @param {string} strRange It specifies the area of contents to export. The format is "sheet name!range of cells" or "range of cells".
		 * @param {string} strExportHead It determines whether to include the head and summary bands.

 - "allband"     : both the head and summary band will be exported.
 - "nohead"     : the head band will not be exported while the summary band will.
 - "nosumm"   : the summary band will not be exported while the head band will.
 - "nohead,nosumm" : neither the head nor the summary band will be exported.

As for the default value, "allband" or "nohead,nosumm" will be applied with the strExportSelect parameter set to "allrecord" or "selectrecord" respectively.

* If the selecttype property of the Grid is set to "area", 'multiarea" or "treecell", this parameter will be set to "nohead,nosumm" as its value.
		 * @param {string} strExportSelect It determines which rows will be included.

 - "allrecord"   : all rows will be exported regardless of the selected area.
 - "selectrecord"  : only selected rows, cells or areas will be exported.

The default value is "allrecord".
		 * @param {string} strExportMerge This parameter determines how to express a logically merged cell regardless of the Grid format.
If you set the strExportSelect parameter to "selectrecord", this parameter will be set to "nosuppress" always.

"suppress" : only one cell will be exported according to the result of the merge. 
                    the rest of the involved cells will not be merged and will be printed empty.
  
"nosuppress" : all the cells will have the same value when exported by ignoring the result of the merge

"merge" : only one cell will be exported according to the result of the merge.
               the rest of the involved cells will be merged.

The default value of this parameter is "suppress".

* A logical merge refers to the merge of the data displayed in a Grid, performed by the suppress property or mergeCell() method.
		 * @param {string} strExportValue It determines how to export contents.

"allstyle" : this option does not export the properties applied as a result of selecting the area.
"selectstyle": this option exports the properties applied as a result of selecting the area. 

The exportable properties are value, format, calendardateformat, font, color, background (color), -nexa-text-aign, -nexa-vertical-align and -nexa-border.
If a gradient is applied through the background property, the middle point color of the gradient (50% of the position value) will be applied.

The default value is "allstyle".
		 * @param {string} strExportImage It determine how to export images.

 - "none" :  No image will be exported.
 - "url"     : The URLs of images will be exported.
 - "image"  : Images will be exported as they are only when the URLs of the images are on the Internet, thus beginning with "http://" or  "https://".

The default value is "none".
		 * @param {string} strExceptStyle It specifies the CSS-related properties that will be excluded when the Grid is exported.

 - "none" : No CSS-related property will be excluded.
 - "align" : Align-related properties ( -nexa-text-align and -nexa-vertical-align) will be excluded
 - "background" : the color-related values of the background property will be excluded.
 - "color" : the color property will be excluded.
 - "font" : the font property will be excluded.
 - "border" : the -nexa-border property will be exclueded.

You can specifies multiple values by using commas (,) as dividers.
		 * @param {string} strExportSize It determines whether to apply the widths and heights of the Grid's cells to the exported file.

 - "width" : Only the widths will be applied.
 - "height" : Only the heights will be applied.
 - "both" : Both the widths and heights are applied.

The default value is "width".
		 * @param {any[]} arrCellIndex This an array containing the index numbers of the cells whose bound column values will be exported.

For the cells whose index numbers are specified, bound column values will be exported instead of the text values displayed in those cells.

For the cells whose index numbers are not specified, exported values will vary according to methods.
* exportData(): exported values will be determined according to the value of the nOrgValue parameter.
* exportDataEx(): the text values displayed in those cells will be exported.
		 * @returns {number} 
		 */
		addExportItem(constExportItemType: any, varExportSource: object, strRange: string, strExportHead?: string, strExportSelect?: string, strExportMerge?: string, strExportValue?: string, strExportImage?: string, strExceptStyle?: string, strExportSize?: string, arrCellIndex?: any[]): number;
		/**
		 * This method is used to delete all the items added to an ExcelExportObject.
		 * @returns {number} 
		 */
		clear(): number;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to delete the items of a certain type from an ExcelExportObject.
		 * @param {any} constExportItemType This is a constant representing the type of items that will be deleted.

Since only a Grid is available currently, the constant must be "nexacro.ExportItemTypes.GRID".
		 * @returns {number} 
		 */
		clearExportItems(constExportItemType: any): number;
		/**
		 * This method returns the number of items registered in an ExcelExportObject.
		 * @returns {number} 
		 */
		count(): number;
		/**
		 * This method returns the number of the items of a certain type in an ExcelExportObject.
		 * @param {any} constExportItemType This is a constant representing the type of items whose number you want to obtain.

Since only a Grid is available currently, the constant must be "nexacro.ExportItemTypes.GRID".
		 * @returns {number} 
		 */
		countExportItems(constExportItemType: any): number;
		/**
		 * This method is used to delete a certain item of a certain type from an ExcelExportObject.
		 * @param {any} constExportItemType This is a constant representing the type of an item that will be deleted.

Since only a Grid is available currently, the constant must be "nexacro.ExportItemTypes.GRID".
		 * @param {number} nItemIndex This number represents the index number of an item to delete.
		 * @returns {boolean} 
		 */
		delExportItem(constExportItemType: any, nItemIndex: number): boolean;
		/**
		 * This method is used to delete a ExcelExportObject that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method is used to export all the items set by an ExcelExportObject.
		 * @param {string} strParam This is a string that will be delivered to the server as a parameter.

This parameter is an extensive function used to deliver the same value as the DB key.
		 * @param {string} strParamDS This parameter is used to set a Dataset delivered to the server, with the format "Param_DataSet=export_DataSet".

This parameter is an extensive function used to send a Dataset to equip the server with additional features, which vary according to development environments.
		 * @param {number} nOrgValue This parameter is used to determine the targets to export as cell values.

If you specify 0 or false, the text items displayed in cells will be exported as values.
If you specify 1 or true, the column value of the bound Dataset will be exported as values.
If you specify 2, this parameter will work as if it is set to 0 when the displaytype property is set to "date". When displaytype is set to a value other than "date", this parameter will work as if it is set to 1.

The default value of this parameter is 0.

* For the cells set by the valuetypecellindex property, the column values bound to those cells will be exported regardless of the value of this parameter.
 For those are not,cell values will be exported according to the value of this parameter.

* You are recommended to use the valuetypecellindex property and exportDataEx() method to maintain the consistency in export results.
		 * @param {boolean} bFileDown This parameter determines whether to download the file created as the export.

For "true", the exported file will be downloaded automatically.
For "false", the exported file will not be downloaded automatically.

The default value of this parameter is "true".
		 * @returns {number} 
		 */
		exportData(strParam?: string, strParamDS?: string, nOrgValue?: number, bFileDown?: boolean): number;
		/**
		 * This method is used to export all the items set by an ExcelExportObject based on the values displayed in the cells.
		 * @param {string} strParam This is a string that will be delivered to the server as a parameter.

This parameter is an extensive function used to deliver the same value as the DB key.
		 * @param {string} strParamDS This parameter is used to set a Dataset delivered to the server, with the format "Param_DataSet=export_DataSet".

This parameter is an extensive function used to send a Dataset to equip the server with additional features, which vary according to development environments.
		 * @param {boolean} bFileDown This parameter determines whether to automatically download the file created as the export.

For "true", the exported file will be downloaded automatically.
For "true", a pop-up for asking about download may appear depending on environments.

For "false", the exported file will not be downloaded automatically.

The default value of this parameter is "true".
		 * @returns {number} 
		 */
		exportDataEx(strParam?: string, strParamDS?: string, bFileDown?: boolean): number;
		/**
		 * This method is used to export the items of a certain type in an ExcelExportObject.
		 * @param {any} constExportItemType This is a constant representing the type of an item that will be exported.

Since only a Grid is available currently, the constant must be "nexacro.ExportItemTypes.GRID".
		 * @returns {number} 
		 */
		exportItems(constExportItemType: any): number;
		/**
		 * This method finds a handler in a certain event of a ExcelExportObject and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns a specific handler from a certain event of a ExcelExportObject by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method returns a certain item of a certain type from an ExcelExportObject.
		 * @param {any} constExportItemType This is a constant representing the type of an item that will be returned.

Since only a Grid is available currently, the constant must be "nexacro.ExportItemTypes.GRID".
		 * @param {number} nItemIndex This number represents the index number of an item to return.
		 * @returns {object} 
		 */
		getExportItem(constExportItemType: any, nItemIndex: number): object;
		/**
		 * This method is used to add a handler to a certain event of a ExcelExportObject at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to remove a certain event that is declared in a ExcelExportObject.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the ExcelExportObject.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a ExcelExportObject.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a ExcelExportObject and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the first handler in a certain event of a ExcelExportObject.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a ExcelExportObject.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to add an export item to a certain position of an ExcelExportObject.
		 * @param {any} constExportItemType It specifies a constant representing a component to export.

Since only a Grid is available currently, the constant must be "nexacro.ExportItemTypes.GRID".
		 * @param {number} nItemIndex This number represents the index number of the position where the item will be added.
		 * @param {object} objExportItem It specifies an ExportItem object that holds the data on the contents to export.
		 * @returns {boolean} 
		 */
		setExportItem(constExportItemType: any, nItemIndex: number, objExportItem: object): boolean;
	}
}

