// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    FileUpload: nexacro.FileUpload;
}

    
declare namespace nexacro {
    type FileUploadOmitKeys = 'expr'|'id'|'textAlign'|'textDecoration'|'verticalAlign'|'wordWrap'|'rtl'|'getDisplayText'|'getFocus'|'onclick'|'ondblclick'|'ondrag'|'ondragenter'|'ondragleave'|'ondragmove'|'ondrop'|'oninput'|'onmousedown'|'onmouseup';
	
	interface FileUpload extends Omit<nexacro.Component, FileUploadOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.FileUpload;
	    /**
		 * This property is used to specify the action printed as an accessibility feature when a selection box moves to a FileUpload.
		 */
		readonly accessibilityaction?: string;
		/**
		 * This property is used to determine whether to print accessibility features of the children when a selection box moves to a FileUpload.
		 */
		readonly accessibilitydesclevel?: nexacro.Enum.DescLevel;
		/**
		 * This property is used to specify the description printed as an accessibility feature when a selection box moves to a FileUpload.
		 */
		readonly accessibilitydescription?: string;
		/**
		 * This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a FileUpload.
		 */
		readonly accessibilityenable?: boolean;
		/**
		 * This property is used to specify the label printed as an accessibility feature when a selection box moves to a FileUpload.
		 */
		readonly accessibilitylabel?: string;
		/**
		 * This property is used to set the role of a FileUpload. The role is printed as accessibility functionality when a selection box moves to the component.
		 */
		readonly accessibilityrole?: nexacro.Enum.Role;
		/**
		 * This property is used to set the background of a FileUpload.
		 */
		readonly background?: string;
		/**
		 * This property is used to set the shape of the corners of a FileUpload.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a FileUpload's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the shadow effect of a FileUpload.
		 */
		readonly boxShadow?: string;
		/**
		 * This property is used to set the width of a file item button control.
		 */
		readonly buttonsize?: number;
		/**
		 * This property is used to set the text that will be displayed on a file item button.
		 */
		readonly buttontext?: string;
		/**
		 * This property is used to set the color of the text displayed in a FileUpload.
		 */
		readonly color?: string;
		/**
		 * This property is used to set the style of a FileUpload by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a FileUpload.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to determine whether to enable a FileUpload.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a FileUpload.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property is used to set the file types applicable to the file dialog, which is opened by clicking a button for uploading files (FileUploadItemButton).
		 */
		readonly filefilter?: string;
		/**
		 * This property is used to determine the default file type presented by a file dialog by specifying an index number.
		 */
		readonly filefilterindex?: number;
		/**
		 * This read-only property holds an array that contains the information on the files to be uploaded from a FileUpload.
		 */
		readonly filelist?: any;
		/**
		 * This property sets a font used for a FileUpload.
		 */
		readonly font?: string;
		/**
		 * This property is used to specify the height of a FileUpload.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set a hotkey for conducting the default action of a FileUpload.
		 */
		readonly hotkey?: nexacro.Enum.HotKeyModifier;
		/**
		 * This property holds the index number of a selected item of a FileUpload. This property can also set the index of an item to select it.
		 */
		readonly index?: number;
		/**
		 * This property is used to set the ID of an InitValue to be applied to an FileUpload.
		 */
		readonly initvalueid?: string;
		/**
		 * This method is used to determine the number of items that will be displayed in a FileUpload.
		 */
		readonly itemcount?: number;
		/**
		 * This property is used to set the height of an item of a FileUpload component.
		 */
		readonly itemheight?: number;
		/**
		 * This property is used to specify the value of the point that indicates the position of a FileUpload's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between characters (kerning) displayed in a FileUpload.
		 */
		readonly letterSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This property is used to set the maximum height of a FileUpload for the component to be displayed on the screen.
		 */
		readonly maxheight?: number;
		/**
		 * This property is used to set the maximum width of a FileUpload for the component to be displayed on the screen.
		 */
		readonly maxwidth?: number;
		/**
		 * This property is used to set the minimum height of a FileUpload for the component to be displayed on the screen.
		 */
		readonly minheight?: number;
		/**
		 * This property is used to set the minimum width of a FileUpload for the component to be displayed on the screen.
		 */
		readonly minwidth?: number;
		/**
		 * This property is used to enable multiple selection in the dialog of a FileUpload.
		 */
		readonly multiselect?: boolean;
		/**
		 * This property is used to specify the name of a FileUpload.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a FileUpload.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a FileUpload.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the padding, an inner margin, of a FileUpload.
		 */
		readonly padding?: string;
		/**
		 * This property is used to set the opacity of a FileUpload.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the parent object of a FileUpload.
		 */
		readonly parent?: object;
		/**
		 * This property is used to specify the index number of a step page where a FileUpload is displayed if the parent object uses the step feature.
		 */
		readonly positionstep?: number;
		/**
		 * This property is used to specify the value of the point that indicates the position of a FileUpload's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the minimum size of the TrackBar control featured by the scrollbar of a FileUpload.
		 */
		readonly scrollbarbarminsize?: number;
		/**
		 * This property is used to set the base size of a scrollbar where its TrackBar control will disappear if the FileUpload becomes smaller than the specified size.
		 */
		readonly scrollbarbaroutsize?: number;
		/**
		 * This property is used to specify the height of the decreasing button (DecButton control) of a scrollbar displayed in a FileUpload component.
		 */
		readonly scrollbardecbuttonsize?: number;
		/**
		 * This property is used to specify the height of the increasing button (IncButton control) of a scrollbar displayed in a FileUpload component.
		 */
		readonly scrollbarincbuttonsize?: number;
		/**
		 * This property is used to specify the width of the scrollbar displayed in a FileUpload component.
		 */
		readonly scrollbarsize?: number;
		/**
		 * This property is used to size the TrackBar control of a scrollbar displayed in a FileUpload.
		 */
		readonly scrollbartrackbarsize?: number;
		/**
		 * This property determines how scrollbars work in a FileUpload.
		 */
		readonly scrollbartype?: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`;
		/**
		 * This property is used to set the size of the scroll indicator bars displayed in a FileUpload.
		 */
		readonly scrollindicatorsize?: number;
		/**
		 * This property is used to set the types of scrolling applied to a FileUpload.
		 */
		readonly scrolltype?: nexacro.Enum.ScrollType;
		/**
		 * This property is used to define the tab order number of a FileUpload. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 */
		readonly taborder?: number;
		/**
		 * This property determines whether a FileUpload receives focus when you move the focus between components by pressing the tab key.
		 */
		readonly tabstop?: boolean;
		/**
		 * This read-only property holds the data of a selected item in a FileUpload component.
		 */
		readonly text?: string;
		/**
		 * This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a FileUpload.
		 */
		readonly tooltiptext?: string;
		/**
		 * This property is used to specify the position and type of a tooltip that appears in a FileUpload.
		 */
		readonly tooltiptype?: nexacro.Enum.TooltipType;
		/**
		 * This property is used to specify the value of the point that indicates the position of a FileUpload's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to specify the location in the server to which the selected files in a FileUpload component will be sent.
		 */
		readonly uploadurl?: string;
		/**
		 * This read-only property holds the information on a selected file among the items of a FileUpload.
		 */
		readonly value?: any;
		/**
		 * This property is used to determine whether to make a FileUpload visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This read-only property holds the vertical scrollbar sub-control of a FileUpload.
		 */
		readonly vscrollbar?: object;
		/**
		 * This property is used to set the width of a FileUpload.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between words displayed in a FileUpload.
		 */
		readonly wordSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This event occurs after an item of a FileUpload is added.
		 */
		readonly onappenditem?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadItemEventInfo>;
		/**
		 * This event occurs when you right-click a FileUpload or touch a FileUpload for a certain duration.
		 */
		readonly oncontextmenu?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadContextMenuEventInfo>;
		/**
		 * This event occurs after an item of a FileUpload is deleted.
		 */
		readonly ondeleteitem?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadItemEventInfo>;
		readonly ondevicebuttonup?: nexacro.EventObject<nexacro.FileUpload, nexacro.DeviceButtonEventInfo>;
		/**
		 * This event occurs when an error is triggered in the process of uploading a file.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadErrorEventInfo>;
		/**
		 * This event occurs when a file item button is clicked.
		 */
		readonly onfindclick?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadItemEventInfo>;
		/**
		 * This event occurs after an item of a FileUpload changes.
		 */
		readonly onitemchanged?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadItemChangeEventInfo>;
		/**
		 * This event occurs when you click the file edit area (fileitemedit) of a FileUpload.
		 */
		readonly onitemclick?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadItemEventInfo>;
		/**
		 * This event occurs when you press a key with a FileUpload focused.
		 */
		readonly onkeydown?: nexacro.EventObject<nexacro.FileUpload, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when you release a key with a FileUpload focused.
		 */
		readonly onkeyup?: nexacro.EventObject<nexacro.FileUpload, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when focus moves out of a FileUpload.
		 */
		readonly onkillfocus?: nexacro.EventObject<nexacro.FileUpload, nexacro.KillFocusEventInfo>;
		/**
		 * This event occurs when you press the left button of a mouse within the area of a FileUpload.
		 */
		readonly onlbuttondown?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadMouseEventInfo>;
		/**
		 * This event occurs when you release the left button of a mouse within the area of a FileUpload.
		 */
		readonly onlbuttonup?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadMouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a FileUpload.
		 */
		readonly onmouseenter?: nexacro.EventObject<nexacro.FileUpload, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a FileUpload.
		 */
		readonly onmouseleave?: nexacro.EventObject<nexacro.FileUpload, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves within a FileUpload.
		 */
		readonly onmousemove?: nexacro.EventObject<nexacro.FileUpload, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you rotates your mouse wheel within a FileUpload.
		 */
		readonly onmousewheel?: nexacro.EventObject<nexacro.FileUpload, nexacro.MouseWheelEventInfo>;
		/**
		 * This event occurs when the position of a FileUpload changes.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.FileUpload, nexacro.MoveEventInfo>;
		/**
		 * This event occurs when you press the right button of a mouse within the area of a FileUpload.
		 */
		readonly onrbuttondown?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadMouseEventInfo>;
		/**
		 * This event occurs when you release the right button of a mouse within the area of a FileUpload.
		 */
		readonly onrbuttonup?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadMouseEventInfo>;
		/**
		 * This event occurs when focus comes into a FileUpload.
		 */
		readonly onsetfocus?: nexacro.EventObject<nexacro.FileUpload, nexacro.SetFocusEventInfo>;
		/**
		 * This event occurs when the size of a FileUpload changes.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.FileUpload, nexacro.SizeEventInfo>;
		/**
		 * This event occurs when the uploading of a file is completed.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.FileUpload, nexacro.FileUploadEventInfo>;
		/**
		 * This event occurs when you touch and release the screen within the area of a FileUpload.
		 */
		readonly ontouchend?: nexacro.EventObject<nexacro.FileUpload, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is moved along the touch surface within a FileUpload.
		 */
		readonly ontouchmove?: nexacro.EventObject<nexacro.FileUpload, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is placed on the touch surface within a FileUpload.
		 */
		readonly ontouchstart?: nexacro.EventObject<nexacro.FileUpload, nexacro.TouchEventInfo>;
		/**
		 * @param {string} v This property is used to specify the action printed as an accessibility feature when a selection box moves to a FileUpload.
		 * @returns {void} 
		 */
		set_accessibilityaction(v: string): void;
		/**
		 * @param {nexacro.Enum.DescLevel} v This property is used to determine whether to print accessibility features of the children when a selection box moves to a FileUpload.
		 * @returns {void} 
		 */
		set_accessibilitydesclevel(v: nexacro.Enum.DescLevel): void;
		/**
		 * @param {string} v This property is used to specify the description printed as an accessibility feature when a selection box moves to a FileUpload.
		 * @returns {void} 
		 */
		set_accessibilitydescription(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a FileUpload.
		 * @returns {void} 
		 */
		set_accessibilityenable(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the label printed as an accessibility feature when a selection box moves to a FileUpload.
		 * @returns {void} 
		 */
		set_accessibilitylabel(v: string): void;
		/**
		 * @param {nexacro.Enum.Role} v This property is used to set the role of a FileUpload. The role is printed as accessibility functionality when a selection box moves to the component.
		 * @returns {void} 
		 */
		set_accessibilityrole(v: nexacro.Enum.Role): void;
		/**
		 * @param {string} v This property is used to set the background of a FileUpload.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a FileUpload.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a FileUpload's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {string} v This property is used to set the shadow effect of a FileUpload.
		 * @returns {void} 
		 */
		set_boxShadow(v: string): void;
		/**
		 * @param {number} v This property is used to set the width of a file item button control.
		 * @returns {void} 
		 */
		set_buttonsize(v: number): void;
		/**
		 * @param {string} v This property is used to set the text that will be displayed on a file item button.
		 * @returns {void} 
		 */
		set_buttontext(v: string): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a FileUpload.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property is used to set the style of a FileUpload by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a FileUpload.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a FileUpload.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a FileUpload.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {string} v This property is used to set the file types applicable to the file dialog, which is opened by clicking a button for uploading files (FileUploadItemButton).
		 * @returns {void} 
		 */
		set_filefilter(v: string): void;
		/**
		 * @param {number} v This property is used to determine the default file type presented by a file dialog by specifying an index number.
		 * @returns {void} 
		 */
		set_filefilterindex(v: number): void;
		/**
		 * @param {string} v This property sets a font used for a FileUpload.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the height of a FileUpload.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {nexacro.Enum.HotKeyModifier} v This property is used to set a hotkey for conducting the default action of a FileUpload.
		 * @returns {void} 
		 */
		set_hotkey(v: nexacro.Enum.HotKeyModifier): void;
		/**
		 * @param {number} v This property holds the index number of a selected item of a FileUpload. This property can also set the index of an item to select it.
		 * @returns {void} 
		 */
		set_index(v: number): void;
		/**
		 * @param {number} v This method is used to determine the number of items that will be displayed in a FileUpload.
		 * @returns {void} 
		 */
		set_itemcount(v: number): void;
		/**
		 * @param {number} v This property is used to set the height of an item of a FileUpload component.
		 * @returns {void} 
		 */
		set_itemheight(v: number): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a FileUpload's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between characters (kerning) displayed in a FileUpload.
		 * @returns {void} 
		 */
		set_letterSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * @param {number} v This property is used to set the maximum height of a FileUpload for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the maximum width of a FileUpload for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxwidth(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum height of a FileUpload for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum width of a FileUpload for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minwidth(v: number): void;
		/**
		 * @param {boolean} v This property is used to enable multiple selection in the dialog of a FileUpload.
		 * @returns {void} 
		 */
		set_multiselect(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the name of a FileUpload.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a FileUpload.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a FileUpload.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {string} v This property is used to set the padding, an inner margin, of a FileUpload.
		 * @returns {void} 
		 */
		set_padding(v: string): void;
		/**
		 * @param {number} v This property is used to set the opacity of a FileUpload.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {number} v This property is used to specify the index number of a step page where a FileUpload is displayed if the parent object uses the step feature.
		 * @returns {void} 
		 */
		set_positionstep(v: number): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a FileUpload's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {number} v This property is used to set the minimum size of the TrackBar control featured by the scrollbar of a FileUpload.
		 * @returns {void} 
		 */
		set_scrollbarbarminsize(v: number): void;
		/**
		 * @param {number} v This property is used to set the base size of a scrollbar where its TrackBar control will disappear if the FileUpload becomes smaller than the specified size.
		 * @returns {void} 
		 */
		set_scrollbarbaroutsize(v: number): void;
		/**
		 * @param {number} v This property is used to specify the height of the decreasing button (DecButton control) of a scrollbar displayed in a FileUpload component.
		 * @returns {void} 
		 */
		set_scrollbardecbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to specify the height of the increasing button (IncButton control) of a scrollbar displayed in a FileUpload component.
		 * @returns {void} 
		 */
		set_scrollbarincbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to specify the width of the scrollbar displayed in a FileUpload component.
		 * @returns {void} 
		 */
		set_scrollbarsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the TrackBar control of a scrollbar displayed in a FileUpload.
		 * @returns {void} 
		 */
		set_scrollbartrackbarsize(v: number): void;
		/**
		 * @param {(nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`)} v This property determines how scrollbars work in a FileUpload.
		 * @returns {void} 
		 */
		set_scrollbartype(v: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`): void;
		/**
		 * @param {number} v This property is used to set the size of the scroll indicator bars displayed in a FileUpload.
		 * @returns {void} 
		 */
		set_scrollindicatorsize(v: number): void;
		/**
		 * @param {nexacro.Enum.ScrollType} v This property is used to set the types of scrolling applied to a FileUpload.
		 * @returns {void} 
		 */
		set_scrolltype(v: nexacro.Enum.ScrollType): void;
		/**
		 * @param {number} v This property is used to define the tab order number of a FileUpload. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 * @returns {void} 
		 */
		set_taborder(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a FileUpload receives focus when you move the focus between components by pressing the tab key.
		 * @returns {void} 
		 */
		set_tabstop(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a FileUpload.
		 * @returns {void} 
		 */
		set_tooltiptext(v: string): void;
		/**
		 * @param {nexacro.Enum.TooltipType} v This property is used to specify the position and type of a tooltip that appears in a FileUpload.
		 * @returns {void} 
		 */
		set_tooltiptype(v: nexacro.Enum.TooltipType): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a FileUpload's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {string} v This property is used to specify the location in the server to which the selected files in a FileUpload component will be sent.
		 * @returns {void} 
		 */
		set_uploadurl(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a FileUpload visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to set the width of a FileUpload.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between words displayed in a FileUpload.
		 * @returns {void} 
		 */
		set_wordSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * This method is used to declare a certain event and then add it to a FileUpload.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the FileUpload.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a FileUpload.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a FileUpload as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to add an item at the end of the index number of a FileUpload.
		 */
		appendItem(): null;
		/**
		 * This method is used to cause a FileUpload to be displayed at the top on the screen. This method applies to among the components under the same parent.
		 */
		bringToFront(): null;
		/**
		 * This method is used to cause a FileUpload to be displayed one level higher on the screen. This method applies to among the components under the same parent.
		 */
		bringToPrev(): null;
		/**
		 * This method is used to change the information on a certain item of a FileUpload.
		 * @param {number} nIndex It is a number representing the index number of an item whose file information will be changed.

The index ranges from 0 to the number of items minus one. 
If you specify an invalid number, this method will not be executed.
		 * @param {any[]} arrFileInfo It is an array containing the file information that will be applied to a certain item.

You can set multiple files by adding elements to an array.
Each element must be an absolute path that includes the name and path of a certain file.

A file can be set only when it is located on a path that can be accessed thanks to the settings of the filesecurelevel property of the Environment object.
Please note that a specified file will be excluded if the file is located on a path that cannot be accessed.
		 */
		changeItem(nIndex: number, arrFileInfo: any[]): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to delete the item of a certain index number from a FileUpload.
		 * @param {number} nIndex This is the index number of an item to delete.
		 */
		deleteItem(nIndex: number): null;
		/**
		 * This method is used to delete a FileUpload that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method finds a handler in a certain event of a FileUpload and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns a specific handler from a certain event of a FileUpload by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method is used to return the current position of the track of a horizontal scrollbar.
		 * @returns {number} 
		 */
		getHScrollPos(): number;
		/**
		 * This method returns the number of items held by a FileUpload.
		 * @param {boolean} bHasValue This parameter determines whether to return the items with values only.

If this parameter is set to "true", this method will return the number of the items that have values.
If this parameter is set to "false", this method will return the number of entire items.
		 * @returns {number} 
		 */
		getItemCount(bHasValue?: boolean): number;
		/**
		 * This method returns the index number of a certain subcontrol of a FileUpload.
		 * @param {object} objControl This is an object that represents a fileitemedit or fileitembutton, both of which are subcontrols of a FileUpload.
		 * @returns {number} 
		 */
		getItemIndex(objControl: object): number;
		/**
		 * This method is used to obtain the bottom position of a FileUpload in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * This method is used to obtain the height of a FileUpload in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the left position of a FileUpload in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * This method is used to obtain the right position of a FileUpload in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * This method is used to obtain the top position of a FileUpload in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * This method is used to obtain the width of a FileUpload in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method returns the value of a FileUpload's bottom property in pixel.
		 * @returns {number} 
		 */
		getPixelBottom(): number;
		/**
		 * This method returns the height of a FileUpload in pixel.
		 * @returns {number} 
		 */
		getPixelHeight(): number;
		/**
		 * This method returns the value of a FileUpload's left property in pixel.
		 * @returns {number} 
		 */
		getPixelLeft(): number;
		/**
		 * This method returns the value of a FileUpload's right property in pixel.
		 * @returns {number} 
		 */
		getPixelRight(): number;
		/**
		 * This method returns the value of a FileUpload's top property in pixel.
		 * @returns {number} 
		 */
		getPixelTop(): number;
		/**
		 * This method returns the width of a FileUpload in pixel.
		 * @returns {number} 
		 */
		getPixelWidth(): number;
		/**
		 * This method returns the current position of the thumb of a vertical scrollbar that appears in a FileUpload.
		 * @returns {number} 
		 */
		getVScrollPos(): number;
		/**
		 * This method returns whether the item of a certain position in a FileUpload has a value.
		 * @param {number} nIndex This is the index number of an item that will be checked to verify the existence of its value.
		 * @returns {boolean} 
		 */
		hasValue(nIndex: number): boolean;
		/**
		 * This method is used to initialize a FileUpload after creating it in a script dynamically.
		 * @param {string} strName It sets the ID of a FileUpload in the form of a string.
		 * @param {(string|number)} vLeft It specifies the value of the left property of a FileUpload in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop It specifies the value of the top property of a FileUpload in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth It specifies the value of the width property of a FileUpload in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight It specifies the value of the height property of a FileUpload in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight It specifies the value of the right property of a FileUpload in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom It specifies the value of the bottom property of a FileUpload in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vMinWidth It specifies a FileUpload's minimum width that can be displayed in the Form.
		 * @param {(string|number)} vMaxWidth It specifies a FileUpload's maximum width that can be displayed in the Form.

If this value is smaller than vMinWidth, it will be replaced by the value of vMinWidth.
		 * @param {(string|number)} vMinHeight It specifies a FileUpload's minimum height that can be displayed in the Form.
		 * @param {(string|number)} vMaxHeight It specifies a FileUpload's maximum height that can be displayed in the Form.

If this value is smaller than vMinHeight, it will be replaced by the value of vMinHeight.
		 */
		init(strName: string, vLeft: string|number, vTop: string|number, vWidth: string|number, vHeight: string|number, vRight?: string|number, vBottom?: string|number, vMinWidth?: string|number, vMaxWidth?: string|number, vMinHeight?: string|number, vMaxHeight?: string|number): null;
		/**
		 * This method is used to add a handler to a certain event of a FileUpload at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to change the position and size of a FileUpload.
		 * @param {(string|number)} vLeft This parameter defines the value of the left property of a FileUpload in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop This parameter defines the value of the top property of a FileUpload in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth This parameter defines the value of the width property of a FileUpload in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight This parameter defines the value of the height property of a FileUpload in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight This parameter defines the value of the right property of a FileUpload in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom This parameter defines the value of the bottom property of a FileUpload in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 */
		move(vLeft: string|number, vTop: string|number, vWidth?: string|number, vHeight?: string|number, vRight?: string|number, vBottom?: string|number): null;
		/**
		 * This method is used to cause a FileUpload to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToNext(objComp: object): null;
		/**
		 * This method is used to cause a FileUpload to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToNext(strComp: string): null;
		/**
		 * This method is used to cause a FileUpload to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToPrev(objComp: object): null;
		/**
		 * This method is used to cause a FileUpload to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToPrev(strComp: string): null;
		/**
		 * This method is used to remove a certain event that is declared in a FileUpload.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the FileUpload.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a FileUpload.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a FileUpload and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the size of a FileUpload.
		 * @param {(string|number)} vWidth This is the width of the FileUpload, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the width while the base component is ignored.
If you specify a number in percentage, the width of the FileUpload will be determined in proportion to the width of the base component.
		 * @param {(string|number)} vHeight This is the height of the FileUpload, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the height while the base component is ignored.
If you specify a number in percentage, the height of the FileUpload will be determined in proportion to the height of the base component.
		 */
		resize(vWidth: string|number, vHeight: string|number): null;
		/**
		 * This method is used to move the slider of a scrollbar from the current position by a certain value delivered as an argument.
		 * @param {number} nHoffsetpos A number indicating the distance by which the slider of a horizontal scrollbar will move from the current position

If the number is negative, the slider will move backward.
If the number is positive, the slider will move forward.

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 * @param {number} nVoffsetpos A number indicating the distance by which the slider of a vertical scrollbar will move from the current position

If the number is negative, the slider will move upward.
If the number is positive, the slider will move downward.

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 */
		scrollBy(nHoffsetpos: number, nVoffsetpos: number): null;
		/**
		 * This method is used to move the slider of a scrollbar to a certain position.
		 * @param {number} nHpos A number indicating the position to which you intend to move the slider of a horizontal scrollbar 

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 * @param {number} nVpos A number indicating the position to which you intend to move the slider of a vertical scrollbar 

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 */
		scrollTo(nHpos: number, nVpos: number): null;
		/**
		 * This method is used to cause a FileUpload to be displayed at the bottom on the screen. This method applies to among the components under the same parent.
		 */
		sendToBack(): null;
		/**
		 * This method is used to cause a FileUpload to be displayed one level lower on the screen. This method applies to among the components under the same parent.
		 */
		sendToNext(): null;
		/**
		 * This method is used to change the first handler in a certain event of a FileUpload.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a FileUpload.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to give focus to a FileUpload.
		 * @param {boolean} bMoveScroll If scrolling is enabled in the parent component, it will determine whether to scroll based on the FileUpload.

For "true", the parent component will scroll so that the FileUpload will show.
For "false", the parent component will not scroll regardless of the FileUpload's position.

The default value is "true".
		 * @param {boolean} bInnerFocus If a FileUpload is a container component, this parameter determines whether to move focus to a child component.

For "true", focus will be given to the first child component that can receive focus.
For "false", focus will be given to the FileUpload.

The default value is "true" if a FileUpload is a container component.
		 * @returns {object} 
		 */
		setFocus(bMoveScroll?: boolean, bInnerFocus?: boolean): object;
		/**
		 * This method is used to specify the bottom position of a FileUpload in pixel, based on the parent component's top position.
		 * @param {number} nBottom It is a pixel value representing the bottom position of a FileUpload, calculated based on the parent component's top position.
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * This method is used to specify the height of a FileUpload in pixel.
		 * @param {number} nHeight It is a pixel value representing the height of a FileUpload.
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * This method is used to specify the left position of a FileUpload in pixel, based on the parent component's left position.
		 * @param {number} nLeft It is a pixel value representing the left position of a FileUpload, calculated based on the parent component's left position.
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * This method is used to specify the right position of a FileUpload in pixel, based on the parent component's left position.
		 * @param {number} nRight It is a pixel value representing the right position of a FileUpload, calculated based on the parent component's left position.
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * This method is used to specify the top position of a FileUpload in pixel, based on the parent component's top position.
		 * @param {number} nTop It is a pixel value representing the top position of a FileUpload, calculated based on the parent component's top position.
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * This method is used to specify the width of a FileUpload in pixel.
		 * @param {number} nWidth It is a pixel value representing the width of a FileUpload.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * This method is used to display a FileUpload on the screen. The FileUpload mentioned here refers to the one that is dynamically created through a script.
		 */
		show(): null;
		/**
		 * This method is used to upload the files of a FileUpload component based on HTTP/HTTPS.
		 * @param {string} strUrl It is a string that represents the URL  of a server page to which files will be sent.

If you omit this parameter, the value of the uploadurl property will be applied instead.
If you specify this parameter, the value of the uploadurl property will be ignored.
		 * @returns {boolean} 
		 */
		upload(strUrl?: string): boolean;
	}
}

