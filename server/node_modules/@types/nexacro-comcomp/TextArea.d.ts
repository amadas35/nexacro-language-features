// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    TextArea: nexacro.TextArea;
}

    
declare namespace nexacro {
    type TextAreaOmitKeys = 'expr'|'id'|'verticalAlign'|'getDisplayText'|'getFocus'|'onclick'|'ondblclick'|'onmousedown'|'onmouseup';
	
	interface TextArea extends Omit<nexacro.Component, TextAreaOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.TextArea;
	    /**
		 * This property determines how pressing the tab key functions, between indenting a line or moving focus.
		 */
		readonly acceptstab?: boolean;
		/**
		 * This property is used to specify the action printed as an accessibility feature when a selection box moves to a TextArea.
		 */
		readonly accessibilityaction?: string;
		/**
		 * This property is used to determine whether to print accessibility features of the children when a selection box moves to a TextArea.
		 */
		readonly accessibilitydesclevel?: nexacro.Enum.DescLevel;
		/**
		 * This property is used to specify the description printed as an accessibility feature when a selection box moves to a TextArea.
		 */
		readonly accessibilitydescription?: string;
		/**
		 * This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a TextArea.
		 */
		readonly accessibilityenable?: boolean;
		/**
		 * This property is used to specify the label printed as an accessibility feature when a selection box moves to a TextArea.
		 */
		readonly accessibilitylabel?: string;
		/**
		 * This property is used to set the role of a TextArea. The role is printed as accessibility functionality when a selection box moves to the component.
		 */
		readonly accessibilityrole?: nexacro.Enum.Role;
		/**
		 * This property determines whether to select all text when the editable field of a TextArea is activated.
		 */
		readonly autoselect?: boolean;
		/**
		 * This property determines whether to move focus automatically when the length of a string being entered in a TextArea reaches the value of the maxlength property.
		 */
		readonly autoskip?: boolean;
		/**
		 * This property is used to set the background of a TextArea.
		 */
		readonly background?: string;
		/**
		 * This property is used to set the shape of the corners of a TextArea.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a TextArea's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the shadow effect of a TextArea.
		 */
		readonly boxShadow?: string;
		/**
		 * This property is used to set the color of the text displayed in a TextArea.
		 */
		readonly color?: string;
		/**
		 * This property is used to set the style of a TextArea by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a TextArea.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to specify an alternative string that will be displayed when the value of a TextArea is "null".
		 */
		readonly displaynulltext?: string;
		/**
		 * This property is used to determine the directions of scrolling, caused by a user touching and dragging a TextArea.
		 */
		readonly dragscrolltype?: nexacro.Enum.DragScrollType;
		/**
		 * This property is used to determine whether to enable a TextArea.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a TextArea.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property sets a font used for a TextArea.
		 */
		readonly font?: string;
		/**
		 * This property is used to specify the height of a TextArea.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set a hotkey for conducting the default action of a TextArea.
		 */
		readonly hotkey?: nexacro.Enum.HotKeyModifier;
		/**
		 * This read-only property holds the horizontal scrollbar sub-control of a TextArea.
		 */
		readonly hscrollbar?: object;
		/**
		 * This property is used to select the basic input language of a TextArea.
		 */
		readonly imemode?: nexacro.Enum.ImeModeType;
		/**
		 * This property is used to set the ID of an InitValue to be applied to an TextArea.
		 */
		readonly initvalueid?: string;
		/**
		 * This property is used to prevent certain types of input to a TextArea.
		 */
		readonly inputfilter?: nexacro.Enum.InputFilterType;
		/**
		 * This property determine the case of the English letters entered to a TextArea.
		 */
		readonly inputmode?: nexacro.Enum.InputModeType;
		/**
		 * This property is used to determine the character types permitted as an input to a TextArea.
		 */
		readonly inputtype?: nexacro.Enum.InputType;
		/**
		 * This property is used to specify the value of the point that indicates the position of a TextArea's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between characters (kerning) displayed in a TextArea.
		 */
		readonly letterSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This property is used to set the maximum height of a TextArea for the component to be displayed on the screen.
		 */
		readonly maxheight?: number;
		/**
		 * The property is used to specify the maximum length of a string that can be entered to a TextArea.
		 */
		readonly maxlength?: number;
		/**
		 * This property is used to set the maximum width of a TextArea for the component to be displayed on the screen.
		 */
		readonly maxwidth?: number;
		/**
		 * This property is used to set the minimum height of a TextArea for the component to be displayed on the screen.
		 */
		readonly minheight?: number;
		/**
		 * This property is used to set the minimum width of a TextArea for the component to be displayed on the screen.
		 */
		readonly minwidth?: number;
		/**
		 * This property is used to specify the name of a TextArea.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a TextArea.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a TextArea.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the padding, an inner margin, of a TextArea.
		 */
		readonly padding?: string;
		/**
		 * This property is used to set the horizontal alignment of the text or contents displayed in a TextArea.
		 */
		readonly textAlign?: nexacro.Enum.HorizontalAlign;
		/**
		 * This property is used to set the effects applied to the text displayed in a TextArea.
		 */
		readonly textDecoration?: nexacro.Enum.TextDecorationLine;
		/**
		 * This property is used to decide whether to break lines automatically when the length of text is longer than the output area.
		 */
		readonly wordWrap?: nexacro.Enum.WordWrapType;
		/**
		 * This property is used to set the opacity of a TextArea.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the parent object of a TextArea.
		 */
		readonly parent?: object;
		/**
		 * This property is used to specify the index number of a step page where a TextArea is displayed if the parent object uses the step feature.
		 */
		readonly positionstep?: number;
		/**
		 * This property determines whether a TextArea is editable.
		 */
		readonly readonly?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a TextArea's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to define the direction of printing internal contents or components in a TextArea.
		 */
		readonly rtl?: boolean;
		/**
		 * This property is used to set the minimum size of the TrackBar control featured by the scrollbar of a TextArea.
		 */
		readonly scrollbarbarminsize?: number;
		/**
		 * This property is used to set the base size of a scrollbar where its TrackBar control will disappear if the TextArea becomes smaller than the specified size.
		 */
		readonly scrollbarbaroutsize?: number;
		/**
		 * This property is used to size the decreasing button (DecButton control) of a scrollbar displayed in a TextArea component.
		 */
		readonly scrollbardecbuttonsize?: number;
		/**
		 * This property is used to size the increasing button (IncButton control) of a scrollbar displayed in a TextArea component.
		 */
		readonly scrollbarincbuttonsize?: number;
		/**
		 * This property is used to size the scrollbar displayed in a TextArea component.
		 */
		readonly scrollbarsize?: number;
		/**
		 * This property is used to size the TrackBar control of a scrollbar displayed in a TextArea.
		 */
		readonly scrollbartrackbarsize?: number;
		/**
		 * This property determines how scrollbars work in a TextArea.
		 */
		readonly scrollbartype?: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`;
		/**
		 * This property is used to set the size of the scroll indicator bars displayed in a TextArea.
		 */
		readonly scrollindicatorsize?: number;
		/**
		 * This property is used to set the types of scrolling applied to a TextArea.
		 */
		readonly scrolltype?: nexacro.Enum.ScrollType;
		/**
		 * This property is used to define the tab order number of a TextArea. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 */
		readonly taborder?: number;
		/**
		 * This property determines whether a TextArea receives focus when you move the focus between components by pressing the tab key.
		 */
		readonly tabstop?: boolean;
		/**
		 * This is a read-only property that holds a string displayed on a TextArea component.
		 */
		readonly text?: string;
		/**
		 * This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a TextArea.
		 */
		readonly tooltiptext?: string;
		/**
		 * This property is used to specify the position and type of a tooltip that appears in a TextArea.
		 */
		readonly tooltiptype?: nexacro.Enum.TooltipType;
		/**
		 * This property is used to specify the value of the point that indicates the position of a TextArea's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to determine whether to open a basic context menu when right-clicking the editable area of a TextArea.
		 */
		readonly usecontextmenu?: boolean;
		/**
		 * This property is used to determine whether to open a virtual keyboard when a TextArea receives focus.
		 */
		readonly usesoftkeyboard?: boolean;
		/**
		 * This property holds the string displayed in a TextArea component.
		 */
		readonly value?: string;
		/**
		 * This property is used to determine whether to make a TextArea visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This read-only property holds the vertical scrollbar sub-control of a TextArea.
		 */
		readonly vscrollbar?: object;
		/**
		 * This property is used to set the width of a TextArea.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between words displayed in a TextArea.
		 */
		readonly wordSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This event occurs when the value of a TextArea is changed.
		 */
		readonly canchange?: nexacro.EventObject<nexacro.TextArea, nexacro.ChangeEventInfo>;
		/**
		 * This event occurs after the value of a TextArea is changed.
		 */
		readonly onchanged?: nexacro.EventObject<nexacro.TextArea, nexacro.ChangeEventInfo>;
		/**
		 * This event occurs when you right-click a TextArea or touch a TextArea for a certain duration.
		 */
		readonly oncontextmenu?: nexacro.EventObject<object, nexacro.EventInfo>;
		readonly ondevicebuttonup?: nexacro.EventObject<nexacro.TextArea, nexacro.DeviceButtonEventInfo>;
		/**
		 * This event occurs when you conduct a dragging action by pressing the left button of a mousewithin a TextArea.
		 */
		readonly ondrag?: nexacro.EventObject<nexacro.TextArea, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a TextArea while the pointer is dragging an object.
		 */
		readonly ondragenter?: nexacro.EventObject<nexacro.TextArea, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a TextArea while the pointer is dragging an object.
		 */
		readonly ondragleave?: nexacro.EventObject<nexacro.TextArea, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves while the pointer is dragging an object within a TextArea.
		 */
		readonly ondragmove?: nexacro.EventObject<nexacro.TextArea, nexacro.DragEventInfo>;
		/**
		 * This event occurs when you release a mouse button within the area of a TextArea after you have pressed the button to drag an object.
		 */
		readonly ondrop?: nexacro.EventObject<nexacro.TextArea, nexacro.DragEventInfo>;
		/**
		 * This event occurs when the a component is pressed and released by a mouse.
		 */
		readonly oneditclick?: nexacro.EventObject<nexacro.TextArea, nexacro.EditClickEventInfo>;
		/**
		 * This event occurs when you move the horizontal scrollbar of a TextArea.
		 */
		readonly onhscroll?: nexacro.EventObject<nexacro.TextArea, nexacro.ScrollEventInfo>;
		/**
		 * This event occurs when you attempt to enter a value to a TextArea.
		 */
		readonly oninput?: nexacro.EventObject<nexacro.TextArea, nexacro.InputEventInfo>;
		/**
		 * This event occurs when you press a key with a TextArea focused.
		 */
		readonly onkeydown?: nexacro.EventObject<nexacro.TextArea, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when you release a key with a TextArea focused.
		 */
		readonly onkeyup?: nexacro.EventObject<nexacro.TextArea, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when focus moves out of a TextArea.
		 */
		readonly onkillfocus?: nexacro.EventObject<nexacro.TextArea, nexacro.KillFocusEventInfo>;
		/**
		 * This event occurs when you press the left button of a mouse within the area of a TextArea.
		 */
		readonly onlbuttondown?: nexacro.EventObject<nexacro.TextArea, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release the left button of a mouse within the area of a TextArea.
		 */
		readonly onlbuttonup?: nexacro.EventObject<nexacro.TextArea, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a TextArea.
		 */
		readonly onmouseenter?: nexacro.EventObject<nexacro.TextArea, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a TextArea.
		 */
		readonly onmouseleave?: nexacro.EventObject<nexacro.TextArea, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves within a TextArea.
		 */
		readonly onmousemove?: nexacro.EventObject<nexacro.TextArea, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you rotates your mouse wheel within a TextArea.
		 */
		readonly onmousewheel?: nexacro.EventObject<nexacro.TextArea, nexacro.MouseWheelEventInfo>;
		/**
		 * This event occurs when the position of a TextArea changes.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.TextArea, nexacro.MoveEventInfo>;
		/**
		 * This event occurs when you press the right button of a mouse within the area of a TextArea.
		 */
		readonly onrbuttondown?: nexacro.EventObject<nexacro.TextArea, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release the right button of a mouse within the area of a TextArea.
		 */
		readonly onrbuttonup?: nexacro.EventObject<nexacro.TextArea, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when focus comes into a TextArea.
		 */
		readonly onsetfocus?: nexacro.EventObject<nexacro.TextArea, nexacro.SetFocusEventInfo>;
		/**
		 * This event occurs when the size of a TextArea changes.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.TextArea, nexacro.SizeEventInfo>;
		/**
		 * This event occurs when you touch and release the screen within the area of a TextArea.
		 */
		readonly ontouchend?: nexacro.EventObject<nexacro.TextArea, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is moved along the touch surface within a TextArea.
		 */
		readonly ontouchmove?: nexacro.EventObject<nexacro.TextArea, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is placed on the touch surface within a TextArea.
		 */
		readonly ontouchstart?: nexacro.EventObject<nexacro.TextArea, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when you move the vertical scrollbar of a TextArea.
		 */
		readonly onvscroll?: nexacro.EventObject<nexacro.TextArea, nexacro.ScrollEventInfo>;
		/**
		 * @param {boolean} v This property determines how pressing the tab key functions, between indenting a line or moving focus.
		 * @returns {void} 
		 */
		set_acceptstab(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the action printed as an accessibility feature when a selection box moves to a TextArea.
		 * @returns {void} 
		 */
		set_accessibilityaction(v: string): void;
		/**
		 * @param {nexacro.Enum.DescLevel} v This property is used to determine whether to print accessibility features of the children when a selection box moves to a TextArea.
		 * @returns {void} 
		 */
		set_accessibilitydesclevel(v: nexacro.Enum.DescLevel): void;
		/**
		 * @param {string} v This property is used to specify the description printed as an accessibility feature when a selection box moves to a TextArea.
		 * @returns {void} 
		 */
		set_accessibilitydescription(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a TextArea.
		 * @returns {void} 
		 */
		set_accessibilityenable(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the label printed as an accessibility feature when a selection box moves to a TextArea.
		 * @returns {void} 
		 */
		set_accessibilitylabel(v: string): void;
		/**
		 * @param {nexacro.Enum.Role} v This property is used to set the role of a TextArea. The role is printed as accessibility functionality when a selection box moves to the component.
		 * @returns {void} 
		 */
		set_accessibilityrole(v: nexacro.Enum.Role): void;
		/**
		 * @param {boolean} v This property determines whether to select all text when the editable field of a TextArea is activated.
		 * @returns {void} 
		 */
		set_autoselect(v: boolean): void;
		/**
		 * @param {boolean} v This property determines whether to move focus automatically when the length of a string being entered in a TextArea reaches the value of the maxlength property.
		 * @returns {void} 
		 */
		set_autoskip(v: boolean): void;
		/**
		 * @param {string} v This property is used to set the background of a TextArea.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a TextArea.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a TextArea's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {string} v This property is used to set the shadow effect of a TextArea.
		 * @returns {void} 
		 */
		set_boxShadow(v: string): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a TextArea.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property is used to set the style of a TextArea by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a TextArea.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {string} v This property is used to specify an alternative string that will be displayed when the value of a TextArea is "null".
		 * @returns {void} 
		 */
		set_displaynulltext(v: string): void;
		/**
		 * @param {nexacro.Enum.DragScrollType} v This property is used to determine the directions of scrolling, caused by a user touching and dragging a TextArea.
		 * @returns {void} 
		 */
		set_dragscrolltype(v: nexacro.Enum.DragScrollType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a TextArea.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a TextArea.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {string} v This property sets a font used for a TextArea.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the height of a TextArea.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {nexacro.Enum.HotKeyModifier} v This property is used to set a hotkey for conducting the default action of a TextArea.
		 * @returns {void} 
		 */
		set_hotkey(v: nexacro.Enum.HotKeyModifier): void;
		/**
		 * @param {nexacro.Enum.ImeModeType} v This property is used to select the basic input language of a TextArea.
		 * @returns {void} 
		 */
		set_imemode(v: nexacro.Enum.ImeModeType): void;
		/**
		 * @param {nexacro.Enum.InputFilterType} v This property is used to prevent certain types of input to a TextArea.
		 * @returns {void} 
		 */
		set_inputfilter(v: nexacro.Enum.InputFilterType): void;
		/**
		 * @param {nexacro.Enum.InputModeType} v This property determine the case of the English letters entered to a TextArea.
		 * @returns {void} 
		 */
		set_inputmode(v: nexacro.Enum.InputModeType): void;
		/**
		 * @param {nexacro.Enum.InputType} v This property is used to determine the character types permitted as an input to a TextArea.
		 * @returns {void} 
		 */
		set_inputtype(v: nexacro.Enum.InputType): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a TextArea's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between characters (kerning) displayed in a TextArea.
		 * @returns {void} 
		 */
		set_letterSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * @param {number} v This property is used to set the maximum height of a TextArea for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxheight(v: number): void;
		/**
		 * @param {number} v The property is used to specify the maximum length of a string that can be entered to a TextArea.
		 * @returns {void} 
		 */
		set_maxlength(v: number): void;
		/**
		 * @param {number} v This property is used to set the maximum width of a TextArea for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxwidth(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum height of a TextArea for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum width of a TextArea for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minwidth(v: number): void;
		/**
		 * @param {string} v This property is used to specify the name of a TextArea.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a TextArea.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a TextArea.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {string} v This property is used to set the padding, an inner margin, of a TextArea.
		 * @returns {void} 
		 */
		set_padding(v: string): void;
		/**
		 * @param {nexacro.Enum.HorizontalAlign} v This property is used to set the horizontal alignment of the text or contents displayed in a TextArea.
		 * @returns {void} 
		 */
		set_textAlign(v: nexacro.Enum.HorizontalAlign): void;
		/**
		 * @param {nexacro.Enum.TextDecorationLine} v This property is used to set the effects applied to the text displayed in a TextArea.
		 * @returns {void} 
		 */
		set_textDecoration(v: nexacro.Enum.TextDecorationLine): void;
		/**
		 * @param {nexacro.Enum.WordWrapType} v This property is used to decide whether to break lines automatically when the length of text is longer than the output area.
		 * @returns {void} 
		 */
		set_wordWrap(v: nexacro.Enum.WordWrapType): void;
		/**
		 * @param {number} v This property is used to set the opacity of a TextArea.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {number} v This property is used to specify the index number of a step page where a TextArea is displayed if the parent object uses the step feature.
		 * @returns {void} 
		 */
		set_positionstep(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a TextArea is editable.
		 * @returns {void} 
		 */
		set_readonly(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a TextArea's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {number} v This property is used to set the minimum size of the TrackBar control featured by the scrollbar of a TextArea.
		 * @returns {void} 
		 */
		set_scrollbarbarminsize(v: number): void;
		/**
		 * @param {number} v This property is used to set the base size of a scrollbar where its TrackBar control will disappear if the TextArea becomes smaller than the specified size.
		 * @returns {void} 
		 */
		set_scrollbarbaroutsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the decreasing button (DecButton control) of a scrollbar displayed in a TextArea component.
		 * @returns {void} 
		 */
		set_scrollbardecbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the increasing button (IncButton control) of a scrollbar displayed in a TextArea component.
		 * @returns {void} 
		 */
		set_scrollbarincbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the scrollbar displayed in a TextArea component.
		 * @returns {void} 
		 */
		set_scrollbarsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the TrackBar control of a scrollbar displayed in a TextArea.
		 * @returns {void} 
		 */
		set_scrollbartrackbarsize(v: number): void;
		/**
		 * @param {(nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`)} v This property determines how scrollbars work in a TextArea.
		 * @returns {void} 
		 */
		set_scrollbartype(v: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`): void;
		/**
		 * @param {number} v This property is used to set the size of the scroll indicator bars displayed in a TextArea.
		 * @returns {void} 
		 */
		set_scrollindicatorsize(v: number): void;
		/**
		 * @param {nexacro.Enum.ScrollType} v This property is used to set the types of scrolling applied to a TextArea.
		 * @returns {void} 
		 */
		set_scrolltype(v: nexacro.Enum.ScrollType): void;
		/**
		 * @param {number} v This property is used to define the tab order number of a TextArea. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 * @returns {void} 
		 */
		set_taborder(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a TextArea receives focus when you move the focus between components by pressing the tab key.
		 * @returns {void} 
		 */
		set_tabstop(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a TextArea.
		 * @returns {void} 
		 */
		set_tooltiptext(v: string): void;
		/**
		 * @param {nexacro.Enum.TooltipType} v This property is used to specify the position and type of a tooltip that appears in a TextArea.
		 * @returns {void} 
		 */
		set_tooltiptype(v: nexacro.Enum.TooltipType): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a TextArea's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {boolean} v This property is used to determine whether to open a basic context menu when right-clicking the editable area of a TextArea.
		 * @returns {void} 
		 */
		set_usecontextmenu(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to open a virtual keyboard when a TextArea receives focus.
		 * @returns {void} 
		 */
		set_usesoftkeyboard(v: boolean): void;
		/**
		 * @param {string} v This property holds the string displayed in a TextArea component.
		 * @returns {void} 
		 */
		set_value(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a TextArea visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to set the width of a TextArea.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between words displayed in a TextArea.
		 * @returns {void} 
		 */
		set_wordSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * This method is used to declare a certain event and then add it to a TextArea.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the TextArea.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a TextArea.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a TextArea as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to cause a TextArea to be displayed at the top on the screen. This method applies to among the components under the same parent.
		 */
		bringToFront(): null;
		/**
		 * This method is used to cause a TextArea to be displayed one level higher on the screen. This method applies to among the components under the same parent.
		 */
		bringToPrev(): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to delete a certain length and position of text from the value of a TextArea.
		 * @param {number} nIndex It is an index that indicates the position where deleting text begins.

The index can range from 0 to the length of a designated text.
		 * @param {number} nCnt It is the length of the text to delete.

If you specify -1, you will delete all the characters starting from the position indicated by nIndex to the last character.
For all types of characters--including English, non-English languages, numbers, symbols and line feed characters--, one character is counted as one.
		 */
		deleteText(nIndex?: number, nCnt?: number): null;
		/**
		 * This method is used to delete a TextArea that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method returns the beginning position of a certain piece of text in the value of a TextArea.
		 * @param {string} strText This is a text string to find in the value of the TextArea.
		 * @param {number} nIndex This is an index number that represents a point from which the search beings.

The index ranges from 0 to the length of the value of the TextArea.
A character counts as one whether it is a line feed character, English character, number, symbol or non English character.
		 * @returns {number} 
		 */
		find(strText: string, nIndex?: number): number;
		/**
		 * This method finds a handler in a certain event of a TextArea and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns the index number of the position where a caret is placed in a TextArea.
		 * @returns {number} 
		 */
		getCaretPos(): number;
		/**
		 * This method returns a specific handler from a certain event of a TextArea by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method is used to return the current position of the track of a horizontal scrollbar.
		 * @returns {number} 
		 */
		getHScrollPos(): number;
		/**
		 * This method returns the length of the string that represents the value property of a TextArea.
		 * @returns {number} 
		 */
		getLength(): number;
		/**
		 * This method is used to obtain the bottom position of a TextArea in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * This method is used to obtain the height of a TextArea in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the left position of a TextArea in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * This method is used to obtain the right position of a TextArea in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * This method is used to obtain the top position of a TextArea in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * This method is used to obtain the width of a TextArea in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method returns the value of a TextArea's bottom property in pixel.
		 * @returns {number} 
		 */
		getPixelBottom(): number;
		/**
		 * This method returns the height of a TextArea in pixel.
		 * @returns {number} 
		 */
		getPixelHeight(): number;
		/**
		 * This method returns the value of a TextArea's left property in pixel.
		 * @returns {number} 
		 */
		getPixelLeft(): number;
		/**
		 * This method returns the value of a TextArea's right property in pixel.
		 * @returns {number} 
		 */
		getPixelRight(): number;
		/**
		 * This method returns the value of a TextArea's top property in pixel.
		 * @returns {number} 
		 */
		getPixelTop(): number;
		/**
		 * This method returns the width of a TextArea in pixel.
		 * @returns {number} 
		 */
		getPixelWidth(): number;
		/**
		 * This method returns an array that contains the currently-selected text in the editable field of a TextArea.
		 * @returns {any[]} 
		 */
		getSelect(): any[];
		/**
		 * This method returns currently-selected text in a TextArea.
		 * @returns {string} 
		 */
		getSelectedText(): string;
		/**
		 * This method returns the current position of the thumb of a vertical scrollbar that appears in a TextArea.
		 * @returns {number} 
		 */
		getVScrollPos(): number;
		/**
		 * This method is used to initialize a TextArea after creating it in a script dynamically.
		 * @param {string} strName It sets the ID of a TextArea in the form of a string.
		 * @param {(string|number)} vLeft It specifies the value of the left property of a TextArea in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop It specifies the value of the top property of a TextArea in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth It specifies the value of the width property of a TextArea in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight It specifies the value of the height property of a TextArea in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight It specifies the value of the right property of a TextArea in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom It specifies the value of the bottom property of a TextArea in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vMinWidth It specifies a TextArea's minimum width that can be displayed in the Form.
		 * @param {(string|number)} vMaxWidth It specifies a TextArea's maximum width that can be displayed in the Form.

If this value is smaller than vMinWidth, it will be replaced by the value of vMinWidth.
		 * @param {(string|number)} vMinHeight It specifies a TextArea's minimum height that can be displayed in the Form.
		 * @param {(string|number)} vMaxHeight It specifies a TextArea's maximum height that can be displayed in the Form.

If this value is smaller than vMinHeight, it will be replaced by the value of vMinHeight.
		 */
		init(strName: string, vLeft: string|number, vTop: string|number, vWidth: string|number, vHeight: string|number, vRight?: string|number, vBottom?: string|number, vMinWidth?: string|number, vMaxWidth?: string|number, vMinHeight?: string|number, vMaxHeight?: string|number): null;
		/**
		 * This method is used to add a handler to a certain event of a TextArea at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to insert new text in a certain position in a TextArea.
		 * @param {string} strText It is text to insert as the value of the value property.
		 * @param {number} nIndex It is an index that indicates the position where text is inserted.

The index can range from 0 to the length of the text specified by the value property.
For all types of characters--including English, non-English languages, numbers, symbols and line feed characters--, one character is counted as one.
If you specify -1, new text will be inserted to the end of a designated text.
		 */
		insertText(strText: string, nIndex?: number): null;
		/**
		 * This method is used to change the position and size of a TextArea.
		 * @param {(string|number)} vLeft This parameter defines the value of the left property of a TextArea in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop This parameter defines the value of the top property of a TextArea in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth This parameter defines the value of the width property of a TextArea in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight This parameter defines the value of the height property of a TextArea in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight This parameter defines the value of the right property of a TextArea in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom This parameter defines the value of the bottom property of a TextArea in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 */
		move(vLeft: string|number, vTop: string|number, vWidth?: string|number, vHeight?: string|number, vRight?: string|number, vBottom?: string|number): null;
		/**
		 * This method is used to cause a TextArea to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToNext(objComp: object): null;
		/**
		 * This method is used to cause a TextArea to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToNext(strComp: string): null;
		/**
		 * This method is used to cause a TextArea to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToPrev(objComp: object): null;
		/**
		 * This method is used to cause a TextArea to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToPrev(strComp: string): null;
		/**
		 * This method is used to remove a certain event that is declared in a TextArea.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the TextArea.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a TextArea.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a TextArea and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method replaces a certain piece of text among the value of a TextArea with new one. The replacement is conducted all through the TextArea.
		 * @param {string} strOld This is a string representing a piece of text that will be replaced, among the value of the TextArea.
		 * @param {string} strNew This is a string representing a piece of text that will replace the value of the strOld parameter.
		 * @returns {string} 
		 */
		replace(strOld: string, strNew?: string): string;
		/**
		 * This method is used to change the size of a TextArea.
		 * @param {(string|number)} vWidth This is the width of the TextArea, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the width while the base component is ignored.
If you specify a number in percentage, the width of the TextArea will be determined in proportion to the width of the base component.
		 * @param {(string|number)} vHeight This is the height of the TextArea, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the height while the base component is ignored.
If you specify a number in percentage, the height of the TextArea will be determined in proportion to the height of the base component.
		 */
		resize(vWidth: string|number, vHeight: string|number): null;
		/**
		 * This method is used to move the slider of a scrollbar from the current position by a certain value delivered as an argument.
		 * @param {number} nHoffsetpos A number indicating the distance by which the slider of a horizontal scrollbar will move from the current position

If the number is negative, the slider will move backward.
If the number is positive, the slider will move forward.

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 * @param {number} nVoffsetpos A number indicating the distance by which the slider of a vertical scrollbar will move from the current position

If the number is negative, the slider will move upward.
If the number is positive, the slider will move downward.

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 */
		scrollBy(nHoffsetpos: number, nVoffsetpos: number): null;
		/**
		 * This method is used to move the slider of a scrollbar to a certain position.
		 * @param {number} nHpos A number indicating the position to which you intend to move the slider of a horizontal scrollbar 

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 * @param {number} nVpos A number indicating the position to which you intend to move the slider of a vertical scrollbar 

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 */
		scrollTo(nHpos: number, nVpos: number): null;
		/**
		 * This method is used to cause a TextArea to be displayed at the bottom on the screen. This method applies to among the components under the same parent.
		 */
		sendToBack(): null;
		/**
		 * This method is used to cause a TextArea to be displayed one level lower on the screen. This method applies to among the components under the same parent.
		 */
		sendToNext(): null;
		/**
		 * This method is used to set the position of a caret in a TextArea.
		 * @param {number} nIndex This is the index number of a position where a caret is placed.

The index numbers range from 0 to the length of the text.
If you specify -1, a caret will be placed at the end of the text.
		 * @returns {boolean} 
		 */
		setCaretPos(nIndex?: number): boolean;
		/**
		 * This method is used to change the first handler in a certain event of a TextArea.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a TextArea.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to give focus to a TextArea.
		 * @param {boolean} bMoveScroll If scrolling is enabled in the parent component, it will determine whether to scroll based on the TextArea.

For "true", the parent component will scroll so that the TextArea will show.
For "false", the parent component will not scroll regardless of the TextArea's position.

The default value is "true".
		 * @param {boolean} bInnerFocus If a TextArea is a container component, this parameter determines whether to move focus to a child component.

For "true", focus will be given to the first child component that can receive focus.
For "false", focus will be given to the TextArea.

The default value is "true" if a TextArea is a container component.
		 * @returns {object} 
		 */
		setFocus(bMoveScroll?: boolean, bInnerFocus?: boolean): object;
		/**
		 * This method is used to specify the bottom position of a TextArea in pixel, based on the parent component's top position.
		 * @param {number} nBottom It is a pixel value representing the bottom position of a TextArea, calculated based on the parent component's top position.
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * This method is used to specify the height of a TextArea in pixel.
		 * @param {number} nHeight It is a pixel value representing the height of a TextArea.
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * This method is used to specify the left position of a TextArea in pixel, based on the parent component's left position.
		 * @param {number} nLeft It is a pixel value representing the left position of a TextArea, calculated based on the parent component's left position.
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * This method is used to specify the right position of a TextArea in pixel, based on the parent component's left position.
		 * @param {number} nRight It is a pixel value representing the right position of a TextArea, calculated based on the parent component's left position.
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * This method is used to specify the top position of a TextArea in pixel, based on the parent component's top position.
		 * @param {number} nTop It is a pixel value representing the top position of a TextArea, calculated based on the parent component's top position.
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * This method is used to specify the width of a TextArea in pixel.
		 * @param {number} nWidth It is a pixel value representing the width of a TextArea.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * This method is used to select a certain area in a TextArea, specified by the arguments. The selection is done when the TextArea is focused.
		 * @param {number} nBegin This is the index number of a starting point for the selection.

The index numbers range from 0 to the length of the text.
If you specify -1, the selection begins from the end of the text.

The default value is 0.
		 * @param {number} nEnd This is the index number of an end point for the selection.

The index numbers range from 0 to the length of the text.
If you specify -1, the selection ends at the end of the text.

The default value is -1.
		 * @returns {boolean} 
		 */
		setSelect(nBegin?: number, nEnd?: number): boolean;
		/**
		 * This method is used to replace selected text in a TextArea with a delivered argument.
		 * @param {string} strText This is a string that will replace the selected text in the TextArea.
		 * @returns {string} 
		 */
		setSelectedText(strText: string): string;
		/**
		 * This method is used to display a TextArea on the screen. The TextArea mentioned here refers to the one that is dynamically created through a script.
		 */
		show(): null;
		/**
		 * This method is used to instantly apply the value of a TextArea to the bound Dataset.
		 * @returns {boolean} 
		 */
		updateToDataset(): boolean;
	}
}

