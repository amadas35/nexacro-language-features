// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    Calendar: nexacro.Calendar;
}

    
declare namespace nexacro {
    type CalendarOmitKeys = 'id'|'textAlign'|'textDecoration'|'verticalAlign'|'wordWrap'|'getFocus'|'onclick'|'ondblclick'|'onmousedown'|'onmouseup'|'onmousewheel';
	
	interface Calendar extends Omit<nexacro.Component, CalendarOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.Calendar;
	    /**
		 * This property is used to specify the action printed as an accessibility feature when a selection box moves to a Calendar.
		 */
		readonly accessibilityaction?: string;
		/**
		 * This property is used to determine whether to print accessibility features of the children when a selection box moves to a Calendar.
		 */
		readonly accessibilitydesclevel?: nexacro.Enum.DescLevel;
		/**
		 * This property is used to specify the description printed as an accessibility feature when a selection box moves to a Calendar.
		 */
		readonly accessibilitydescription?: string;
		/**
		 * This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a Calendar.
		 */
		readonly accessibilityenable?: boolean;
		/**
		 * This property is used to specify the label printed as an accessibility feature when a selection box moves to a Calendar.
		 */
		readonly accessibilitylabel?: string;
		/**
		 * This property is used to set the role of a Calendar. The role is printed as accessibility functionality when a selection box moves to the component.
		 */
		readonly accessibilityrole?: nexacro.Enum.Role;
		/**
		 * This property determines whether to select all text when the editable field of a Calendar is activated.
		 */
		readonly autoselect?: boolean;
		/**
		 * This property determines whether to move focus automatically when you finish entering a date to a Calendar.
		 */
		readonly autoskip?: boolean;
		/**
		 * This property is used to set the background of a Calendar.
		 */
		readonly background?: string;
		/**
		 * This property is used to specify a column of a dataset that is designated as an innerdataset. The column contains a background color that will apply to certain dates in the Calendar.
		 */
		readonly backgroundcolumn?: string;
		/**
		 * This property is used to specify a column of a dataset that is designated as an innerdataset. The column contains a border type that will apply to certain dates in the Calendar.
		 */
		readonly bordercolumn?: string;
		/**
		 * This property is used to set the shape of the corners of a Calendar.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Calendar's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the shadow effect of a Calendar.
		 */
		readonly boxShadow?: string;
		/**
		 * This property is used to size the drop-down or spin button of a Calendar.
		 */
		readonly buttonsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property holds a calendaredit object, which is one of the sub-controls of a Calendar.
		 */
		readonly calendaredit?: object;
		/**
		 * This property holds a SpinDown Button object, which is one of the sub-controls of a Calendar.
		 */
		readonly calendarspindownbutton?: object;
		/**
		 * This property holds a SpinUp Button object, which is one of the sub-controls of a Calendar.
		 */
		readonly calendarspinupbutton?: object;
		/**
		 * This property is used to set the color of the text displayed in a Calendar.
		 */
		readonly color?: string;
		/**
		 * This property is used to set the style of a Calendar by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a Calendar.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to specify a column of a dataset that is designated as an innerdataset. The column contains certain dates in the Calendar.
		 */
		readonly datecolumn?: string;
		/**
		 * This property is used to set the format of a date displayed in a Calendar. This property is applicable when the Calendar does not have focus.
		 */
		readonly dateformat?: string;
		/**
		 * This property holds a DatePicker object, which is one of the sub-controls of a Calendar.
		 */
		readonly datepicker?: object;
		/**
		 * This property is used to size the blocks in the day area of the DatePicker control of a Calendar.
		 */
		readonly daysize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property sets an alternative string that is displayed when the value of a Calendar is invalid.
		 */
		readonly displayinvalidtext?: string;
		/**
		 * This property is used to specify an alternative string that will be displayed when the value of a Calendar is "null".
		 */
		readonly displaynulltext?: string;
		/**
		 * This property holds a DropButton object, which is one of the sub-controls of a Calendar.
		 */
		readonly dropbutton?: object;
		/**
		 * This property is used to set the format of a date displayed in the edit field of a Calendar. This property is applicable when the Calendar has focus.
		 */
		readonly editformat?: string;
		/**
		 * This property is used to determine whether to enable a Calendar.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a Calendar.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property is used to dynamically create an expression designed to display a date in a Calendar.
		 */
		readonly expr?: string;
		/**
		 * This property sets a font used for a Calendar.
		 */
		readonly font?: string;
		/**
		 * This property is used to set the order of a year and month, displayed at the top of the DatePicker control of a Calendar.
		 */
		readonly headformat?: string;
		/**
		 * This property is used to set the height of the head of a popup calendar (DatePicker), which is one of the subcontrols of a Calendar component. The head is an area where a year and month is displayed.
		 */
		readonly headheight?: number;
		/**
		 * This property is used to specify the height of a Calendar.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set a hotkey for conducting the default action of a Calendar.
		 */
		readonly hotkey?: nexacro.Enum.HotKeyModifier;
		/**
		 * This property is used to set the ID of an InitValue to be applied to an Calendar.
		 */
		readonly initvalueid?: string;
		/**
		 * This property is used to specify the ID of a dataset that defines certain dates in a Calendar.
		 */
		readonly innerdataset?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Calendar's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between characters (kerning) displayed in a Calendar.
		 */
		readonly letterSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This property is used to set a locale applied to a Calendar.
		 */
		readonly locale?: nexacro.Enum.LocaleCode;
		/**
		 * This property is used to set the maximum height of a Calendar for the component to be displayed on the screen.
		 */
		readonly maxheight?: number;
		/**
		 * This property is used to set the maximum width of a Calendar for the component to be displayed on the screen.
		 */
		readonly maxwidth?: number;
		/**
		 * This property is used to set the minimum height of a Calendar for the component to be displayed on the screen.
		 */
		readonly minheight?: number;
		/**
		 * This property is used to set the minimum width of a Calendar for the component to be displayed on the screen.
		 */
		readonly minwidth?: number;
		/**
		 * This property is used to specify the name of a Calendar.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a Calendar.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a Calendar.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the padding, an inner margin, of a Calendar.
		 */
		readonly padding?: string;
		/**
		 * This property is used to set the opacity of a Calendar.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the parent object of a Calendar.
		 */
		readonly parent?: object;
		/**
		 * This property is used to size a DatePicker, which is a pop-up calendar.
		 */
		readonly popupsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to determine how to display the date picker (pop-up calendar) of a Calendar.
		 */
		readonly popuptype?: nexacro.Enum.CalendarPopupType;
		/**
		 * This property is used to specify the index number of a step page where a Calendar is displayed if the parent object uses the step feature.
		 */
		readonly positionstep?: number;
		/**
		 * This property determines whether a Calendar is editable.
		 */
		readonly readonly?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Calendar's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to define the direction of printing internal contents or components in a Calendar.
		 */
		readonly rtl?: boolean;
		/**
		 * This property determines whether to display the buttons to change the month in the DatePickerControl of a Calendar.
		 */
		readonly showmonthspin?: boolean;
		/**
		 * This property determines whether to display the buttons to change the year in the DatePickerControl of a Calendar.
		 */
		readonly showyearspin?: boolean;
		/**
		 * This property is used to define the tab order number of a Calendar. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 */
		readonly taborder?: number;
		/**
		 * This property determines whether a Calendar receives focus when you move the focus between components by pressing the tab key.
		 */
		readonly tabstop?: boolean;
		/**
		 * This read-only property holds a value that has been produced as a result of converting the input according to the format defined by the dateformat property.
		 */
		readonly text?: string;
		/**
		 * This property is used to specify a column of a dataset that is designated as an innerdataset. The column contains a text color that will apply to certain dates in the Calendar.
		 */
		readonly textcolorcolumn?: string;
		/**
		 * This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a Calendar.
		 */
		readonly tooltiptext?: string;
		/**
		 * This property is used to specify the position and type of a tooltip that appears in a Calendar.
		 */
		readonly tooltiptype?: nexacro.Enum.TooltipType;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Calendar's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the type of a Calendar.
		 */
		readonly type?: nexacro.Enum.CalendarType;
		/**
		 * This property is used to determine whether to open a basic context menu when right-clicking the editable area of a Calendar.
		 */
		readonly usecontextmenu?: boolean;
		/**
		 * This property is used to determine whether to open a virtual keyboard when a Calendar receives focus.
		 */
		readonly usesoftkeyboard?: boolean;
		/**
		 * This property is used to determine whether to display preceding/following days on the margins at the beginning/end of a DatePickerControl.
		 */
		readonly usetrailingday?: boolean;
		/**
		 * This property holds the original date displayed in a Calendar component.
		 */
		readonly value?: string;
		/**
		 * This property is used to determine whether to make a Calendar visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to set the format of the days of a week, displayed in the popup calendar (DatePicker) of a Calendar.
		 */
		readonly weekformat?: string;
		/**
		 * This property is used to set the width of a Calendar.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between words displayed in a Calendar.
		 */
		readonly wordSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This event occurs when the value of a Calendar differs from a selected date in the component.
		 */
		readonly canchange?: nexacro.EventObject<nexacro.Calendar, nexacro.ChangeEventInfo>;
		/**
		 * This event occurs after a date changes in a Calendar.
		 */
		readonly onchanged?: nexacro.EventObject<nexacro.Calendar, nexacro.ChangeEventInfo>;
		/**
		 * This event occurs when a pop-up calendar is closed.
		 */
		readonly oncloseup?: nexacro.EventObject<nexacro.Calendar, nexacro.CalendarCloseUpEventInfo>;
		/**
		 * This event occurs when you right-click a Calendar or touch a Calendar for a certain duration.
		 */
		readonly oncontextmenu?: nexacro.EventObject<object, nexacro.EventInfo>;
		/**
		 * This event occurs when you click the date of a Calendar.
		 */
		readonly ondayclick?: nexacro.EventObject<nexacro.Calendar, nexacro.CalendarDayClickEventInfo>;
		readonly ondevicebuttonup?: nexacro.EventObject<nexacro.Calendar, nexacro.DeviceButtonEventInfo>;
		/**
		 * This event occurs when you conduct a dragging action by pressing the left button of a mousewithin a Calendar.
		 */
		readonly ondrag?: nexacro.EventObject<nexacro.Calendar, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a Calendar while the pointer is dragging an object.
		 */
		readonly ondragenter?: nexacro.EventObject<nexacro.Calendar, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a Calendar while the pointer is dragging an object.
		 */
		readonly ondragleave?: nexacro.EventObject<nexacro.Calendar, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves while the pointer is dragging an object within a Calendar.
		 */
		readonly ondragmove?: nexacro.EventObject<nexacro.Calendar, nexacro.DragEventInfo>;
		/**
		 * This event occurs when you release a mouse button within the area of a Calendar after you have pressed the button to drag an object.
		 */
		readonly ondrop?: nexacro.EventObject<nexacro.Calendar, nexacro.DragEventInfo>;
		/**
		 * This event occurs when you open the pop-up calendar of a Calendar by clicking the dropbutton of the component.
		 */
		readonly ondropdown?: nexacro.EventObject<nexacro.Calendar, nexacro.EventInfo>;
		/**
		 * This event occurs when the left button of a mouse is clicked within the editable field of an Calendar.
		 */
		readonly oneditclick?: nexacro.EventObject<nexacro.Calendar, nexacro.EditClickEventInfo>;
		/**
		 * This event occurs when there has been a change in the data of a Dataset that is bound to the innerdataset property of a Calendar.
		 */
		readonly oninnerdatachanged?: nexacro.EventObject<nexacro.Calendar, nexacro.InnerdataChangedEventInfo>;
		/**
		 * This event occurs when you attempt to enter a value to a Calendar.
		 */
		readonly oninput?: nexacro.EventObject<nexacro.Calendar, nexacro.InputEventInfo>;
		/**
		 * This event occurs when you press a key with a Calendar focused.
		 */
		readonly onkeydown?: nexacro.EventObject<nexacro.Calendar, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when you release a key with a Calendar focused.
		 */
		readonly onkeyup?: nexacro.EventObject<nexacro.Calendar, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when focus moves out of a Calendar.
		 */
		readonly onkillfocus?: nexacro.EventObject<nexacro.Calendar, nexacro.KillFocusEventInfo>;
		/**
		 * This event occurs when you press the left button of a mouse within the area of a Calendar.
		 */
		readonly onlbuttondown?: nexacro.EventObject<nexacro.Calendar, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release the left button of a mouse within the area of a Calendar.
		 */
		readonly onlbuttonup?: nexacro.EventObject<nexacro.Calendar, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a Calendar.
		 */
		readonly onmouseenter?: nexacro.EventObject<nexacro.Calendar, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a Calendar.
		 */
		readonly onmouseleave?: nexacro.EventObject<nexacro.Calendar, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves within a Calendar.
		 */
		readonly onmousemove?: nexacro.EventObject<nexacro.Calendar, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when the position of a Calendar changes.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.Calendar, nexacro.MoveEventInfo>;
		/**
		 * This event occurs when you press the right button of a mouse within the area of a Calendar.
		 */
		readonly onrbuttondown?: nexacro.EventObject<nexacro.Calendar, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release the right button of a mouse within the area of a Calendar.
		 */
		readonly onrbuttonup?: nexacro.EventObject<nexacro.Calendar, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when focus comes into a Calendar.
		 */
		readonly onsetfocus?: nexacro.EventObject<nexacro.Calendar, nexacro.SetFocusEventInfo>;
		/**
		 * This event occurs when the size of a Calendar changes.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.Calendar, nexacro.SizeEventInfo>;
		/**
		 * This event occurs when you click a spin button the a Calendar whose type property is set to "spin".
		 */
		readonly onspin?: nexacro.EventObject<nexacro.Calendar, nexacro.CalendarSpinEventInfo>;
		/**
		 * This event occurs when you touch and release the screen within the area of a Calendar.
		 */
		readonly ontouchend?: nexacro.EventObject<nexacro.Calendar, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is moved along the touch surface within a Calendar.
		 */
		readonly ontouchmove?: nexacro.EventObject<nexacro.Calendar, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is placed on the touch surface within a Calendar.
		 */
		readonly ontouchstart?: nexacro.EventObject<nexacro.Calendar, nexacro.TouchEventInfo>;
		/**
		 * @param {string} v This property is used to specify the action printed as an accessibility feature when a selection box moves to a Calendar.
		 * @returns {void} 
		 */
		set_accessibilityaction(v: string): void;
		/**
		 * @param {nexacro.Enum.DescLevel} v This property is used to determine whether to print accessibility features of the children when a selection box moves to a Calendar.
		 * @returns {void} 
		 */
		set_accessibilitydesclevel(v: nexacro.Enum.DescLevel): void;
		/**
		 * @param {string} v This property is used to specify the description printed as an accessibility feature when a selection box moves to a Calendar.
		 * @returns {void} 
		 */
		set_accessibilitydescription(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a Calendar.
		 * @returns {void} 
		 */
		set_accessibilityenable(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the label printed as an accessibility feature when a selection box moves to a Calendar.
		 * @returns {void} 
		 */
		set_accessibilitylabel(v: string): void;
		/**
		 * @param {nexacro.Enum.Role} v This property is used to set the role of a Calendar. The role is printed as accessibility functionality when a selection box moves to the component.
		 * @returns {void} 
		 */
		set_accessibilityrole(v: nexacro.Enum.Role): void;
		/**
		 * @param {boolean} v This property determines whether to select all text when the editable field of a Calendar is activated.
		 * @returns {void} 
		 */
		set_autoselect(v: boolean): void;
		/**
		 * @param {boolean} v This property determines whether to move focus automatically when you finish entering a date to a Calendar.
		 * @returns {void} 
		 */
		set_autoskip(v: boolean): void;
		/**
		 * @param {string} v This property is used to set the background of a Calendar.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {string} v This property is used to specify a column of a dataset that is designated as an innerdataset. The column contains a background color that will apply to certain dates in the Calendar.
		 * @returns {void} 
		 */
		set_backgroundcolumn(v: string): void;
		/**
		 * @param {string} v This property is used to specify a column of a dataset that is designated as an innerdataset. The column contains a border type that will apply to certain dates in the Calendar.
		 * @returns {void} 
		 */
		set_bordercolumn(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a Calendar.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Calendar's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {string} v This property is used to set the shadow effect of a Calendar.
		 * @returns {void} 
		 */
		set_boxShadow(v: string): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size the drop-down or spin button of a Calendar.
		 * @returns {void} 
		 */
		set_buttonsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a Calendar.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property is used to set the style of a Calendar by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a Calendar.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {string} v This property is used to specify a column of a dataset that is designated as an innerdataset. The column contains certain dates in the Calendar.
		 * @returns {void} 
		 */
		set_datecolumn(v: string): void;
		/**
		 * @param {string} v This property is used to set the format of a date displayed in a Calendar. This property is applicable when the Calendar does not have focus.
		 * @returns {void} 
		 */
		set_dateformat(v: string): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size the blocks in the day area of the DatePicker control of a Calendar.
		 * @returns {void} 
		 */
		set_daysize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {string} v This property sets an alternative string that is displayed when the value of a Calendar is invalid.
		 * @returns {void} 
		 */
		set_displayinvalidtext(v: string): void;
		/**
		 * @param {string} v This property is used to specify an alternative string that will be displayed when the value of a Calendar is "null".
		 * @returns {void} 
		 */
		set_displaynulltext(v: string): void;
		/**
		 * @param {string} v This property is used to set the format of a date displayed in the edit field of a Calendar. This property is applicable when the Calendar has focus.
		 * @returns {void} 
		 */
		set_editformat(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a Calendar.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a Calendar.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {string} v This property is used to dynamically create an expression designed to display a date in a Calendar.
		 * @returns {void} 
		 */
		set_expr(v: string): void;
		/**
		 * @param {string} v This property sets a font used for a Calendar.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {string} v This property is used to set the order of a year and month, displayed at the top of the DatePicker control of a Calendar.
		 * @returns {void} 
		 */
		set_headformat(v: string): void;
		/**
		 * @param {number} v This property is used to set the height of the head of a popup calendar (DatePicker), which is one of the subcontrols of a Calendar component. The head is an area where a year and month is displayed.
		 * @returns {void} 
		 */
		set_headheight(v: number): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the height of a Calendar.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {nexacro.Enum.HotKeyModifier} v This property is used to set a hotkey for conducting the default action of a Calendar.
		 * @returns {void} 
		 */
		set_hotkey(v: nexacro.Enum.HotKeyModifier): void;
		/**
		 * @param {string} v This property is used to specify the ID of a dataset that defines certain dates in a Calendar.
		 * @returns {void} 
		 */
		set_innerdataset(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Calendar's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between characters (kerning) displayed in a Calendar.
		 * @returns {void} 
		 */
		set_letterSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * @param {nexacro.Enum.LocaleCode} v This property is used to set a locale applied to a Calendar.
		 * @returns {void} 
		 */
		set_locale(v: nexacro.Enum.LocaleCode): void;
		/**
		 * @param {number} v This property is used to set the maximum height of a Calendar for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the maximum width of a Calendar for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxwidth(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum height of a Calendar for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum width of a Calendar for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minwidth(v: number): void;
		/**
		 * @param {string} v This property is used to specify the name of a Calendar.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a Calendar.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a Calendar.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {string} v This property is used to set the padding, an inner margin, of a Calendar.
		 * @returns {void} 
		 */
		set_padding(v: string): void;
		/**
		 * @param {number} v This property is used to set the opacity of a Calendar.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size a DatePicker, which is a pop-up calendar.
		 * @returns {void} 
		 */
		set_popupsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {nexacro.Enum.CalendarPopupType} v This property is used to determine how to display the date picker (pop-up calendar) of a Calendar.
		 * @returns {void} 
		 */
		set_popuptype(v: nexacro.Enum.CalendarPopupType): void;
		/**
		 * @param {number} v This property is used to specify the index number of a step page where a Calendar is displayed if the parent object uses the step feature.
		 * @returns {void} 
		 */
		set_positionstep(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a Calendar is editable.
		 * @returns {void} 
		 */
		set_readonly(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Calendar's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {boolean} v This property determines whether to display the buttons to change the month in the DatePickerControl of a Calendar.
		 * @returns {void} 
		 */
		set_showmonthspin(v: boolean): void;
		/**
		 * @param {boolean} v This property determines whether to display the buttons to change the year in the DatePickerControl of a Calendar.
		 * @returns {void} 
		 */
		set_showyearspin(v: boolean): void;
		/**
		 * @param {number} v This property is used to define the tab order number of a Calendar. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 * @returns {void} 
		 */
		set_taborder(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a Calendar receives focus when you move the focus between components by pressing the tab key.
		 * @returns {void} 
		 */
		set_tabstop(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify a column of a dataset that is designated as an innerdataset. The column contains a text color that will apply to certain dates in the Calendar.
		 * @returns {void} 
		 */
		set_textcolorcolumn(v: string): void;
		/**
		 * @param {string} v This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a Calendar.
		 * @returns {void} 
		 */
		set_tooltiptext(v: string): void;
		/**
		 * @param {nexacro.Enum.TooltipType} v This property is used to specify the position and type of a tooltip that appears in a Calendar.
		 * @returns {void} 
		 */
		set_tooltiptype(v: nexacro.Enum.TooltipType): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Calendar's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {nexacro.Enum.CalendarType} v This property is used to set the type of a Calendar.
		 * @returns {void} 
		 */
		set_type(v: nexacro.Enum.CalendarType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to open a basic context menu when right-clicking the editable area of a Calendar.
		 * @returns {void} 
		 */
		set_usecontextmenu(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to open a virtual keyboard when a Calendar receives focus.
		 * @returns {void} 
		 */
		set_usesoftkeyboard(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to display preceding/following days on the margins at the beginning/end of a DatePickerControl.
		 * @returns {void} 
		 */
		set_usetrailingday(v: boolean): void;
		/**
		 * @param {string} v This property holds the original date displayed in a Calendar component.
		 * @returns {void} 
		 */
		set_value(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a Calendar visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {string} v This property is used to set the format of the days of a week, displayed in the popup calendar (DatePicker) of a Calendar.
		 * @returns {void} 
		 */
		set_weekformat(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to set the width of a Calendar.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between words displayed in a Calendar.
		 * @returns {void} 
		 */
		set_wordSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * This method is used to declare a certain event and then add it to a Calendar.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the Calendar.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a Calendar.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a Calendar as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to cause a Calendar to be displayed at the top on the screen. This method applies to among the components under the same parent.
		 */
		bringToFront(): null;
		/**
		 * This method is used to cause a Calendar to be displayed one level higher on the screen. This method applies to among the components under the same parent.
		 */
		bringToPrev(): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to delete a Calendar that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method is used to display a pop-up calendar on the screen.
		 */
		dropdown(): null;
		/**
		 * This method finds a handler in a certain event of a Calendar and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns the index number of the position where a caret is placed in the editable field of a Calendar.
		 * @returns {number} 
		 */
		getCaretPos(): number;
		/**
		 * This method is used to obtain the day drawn from the value of a Calendar component, which consists of a year, month and day.
		 * @returns {number} 
		 */
		getDay(): number;
		/**
		 * This method returns the weekday that is derived from the date saved as a value of a Calendar.
		 * @returns {number} 
		 */
		getDayOfWeek(): number;
		/**
		 * This method returns the text displayed in a Calendar.
		 * @returns {string} 
		 */
		getDisplayText(): string;
		/**
		 * This method returns a specific handler from a certain event of a Calendar by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method returns the Dataset object that is specified as the value of the innerdataset property of a Calendar.
		 * @returns {object} 
		 */
		getInnerDataset(): object;
		/**
		 * This method is used to obtain the month drawn from the value of a Calendar component, which consists of a year, month and day.
		 * @returns {number} 
		 */
		getMonth(): number;
		/**
		 * This method is used to obtain the bottom position of a Calendar in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * This method is used to obtain the height of a Calendar in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the left position of a Calendar in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * This method is used to obtain the right position of a Calendar in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * This method is used to obtain the top position of a Calendar in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * This method is used to obtain the width of a Calendar in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method returns the value of a Calendar's bottom property in pixel.
		 * @returns {number} 
		 */
		getPixelBottom(): number;
		/**
		 * This method returns the height of a Calendar in pixel.
		 * @returns {number} 
		 */
		getPixelHeight(): number;
		/**
		 * This method returns the value of a Calendar's left property in pixel.
		 * @returns {number} 
		 */
		getPixelLeft(): number;
		/**
		 * This method returns the value of a Calendar's right property in pixel.
		 * @returns {number} 
		 */
		getPixelRight(): number;
		/**
		 * This method returns the value of a Calendar's top property in pixel.
		 * @returns {number} 
		 */
		getPixelTop(): number;
		/**
		 * This method returns the width of a Calendar in pixel.
		 * @returns {number} 
		 */
		getPixelWidth(): number;
		/**
		 * This method returns an array that contains the currently-selected text in the editable field of a Calendar.
		 * @returns {any[]} 
		 */
		getSelect(): any[];
		/**
		 * This method returns currently-selected text in the editable field of a Calendar.
		 * @returns {string} 
		 */
		getSelectedText(): string;
		/**
		 * This method is used to obtain the year drawn from the value of a Calendar component, which consists of a year, month and day.
		 * @returns {number} 
		 */
		getYear(): number;
		/**
		 * This method is used to initialize a Calendar after creating it in a script dynamically.
		 * @param {string} strName It sets the ID of a Calendar in the form of a string.
		 * @param {(string|number)} vLeft It specifies the value of the left property of a Calendar in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop It specifies the value of the top property of a Calendar in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth It specifies the value of the width property of a Calendar in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight It specifies the value of the height property of a Calendar in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight It specifies the value of the right property of a Calendar in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom It specifies the value of the bottom property of a Calendar in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vMinWidth It specifies a Calendar's minimum width that can be displayed in the Form.
		 * @param {(string|number)} vMaxWidth It specifies a Calendar's maximum width that can be displayed in the Form.

If this value is smaller than vMinWidth, it will be replaced by the value of vMinWidth.
		 * @param {(string|number)} vMinHeight It specifies a Calendar's minimum height that can be displayed in the Form.
		 * @param {(string|number)} vMaxHeight It specifies a Calendar's maximum height that can be displayed in the Form.

If this value is smaller than vMinHeight, it will be replaced by the value of vMinHeight.
		 */
		init(strName: string, vLeft: string|number, vTop: string|number, vWidth: string|number, vHeight: string|number, vRight?: string|number, vBottom?: string|number, vMinWidth?: string|number, vMaxWidth?: string|number, vMinHeight?: string|number, vMaxHeight?: string|number): null;
		/**
		 * This method is used to add a handler to a certain event of a Calendar at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method returns whether the pop-up calendar of a Calendar is displayed on the screen currently.
		 * @returns {boolean} 
		 */
		isDropdown(): boolean;
		/**
		 * This method is used to change the position and size of a Calendar.
		 * @param {(string|number)} vLeft This parameter defines the value of the left property of a Calendar in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop This parameter defines the value of the top property of a Calendar in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth This parameter defines the value of the width property of a Calendar in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight This parameter defines the value of the height property of a Calendar in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight This parameter defines the value of the right property of a Calendar in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom This parameter defines the value of the bottom property of a Calendar in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 */
		move(vLeft: string|number, vTop: string|number, vWidth?: string|number, vHeight?: string|number, vRight?: string|number, vBottom?: string|number): null;
		/**
		 * This method is used to cause a Calendar to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToNext(objComp: object): null;
		/**
		 * This method is used to cause a Calendar to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToNext(strComp: string): null;
		/**
		 * This method is used to cause a Calendar to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToPrev(objComp: object): null;
		/**
		 * This method is used to cause a Calendar to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToPrev(strComp: string): null;
		/**
		 * This method is used to remove a certain event that is declared in a Calendar.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the Calendar.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a Calendar.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a Calendar and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the size of a Calendar.
		 * @param {(string|number)} vWidth This is the width of the Calendar, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the width while the base component is ignored.
If you specify a number in percentage, the width of the Calendar will be determined in proportion to the width of the base component.
		 * @param {(string|number)} vHeight This is the height of the Calendar, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the height while the base component is ignored.
If you specify a number in percentage, the height of the Calendar will be determined in proportion to the height of the base component.
		 */
		resize(vWidth: string|number, vHeight: string|number): null;
		/**
		 * This method is used to cause a Calendar to be displayed at the bottom on the screen. This method applies to among the components under the same parent.
		 */
		sendToBack(): null;
		/**
		 * This method is used to cause a Calendar to be displayed one level lower on the screen. This method applies to among the components under the same parent.
		 */
		sendToNext(): null;
		/**
		 * This method is used to set the position of a caret in the editable field of a Calendar.
		 * @param {number} nIndex This is the index number of a position where a caret is placed.
The index numbers range from 0 to the length of the text.
If you specify -1, a caret will be placed at the right end of the text.
		 * @returns {boolean} 
		 */
		setCaretPos(nIndex?: number): boolean;
		/**
		 * This method is used to change the first handler in a certain event of a Calendar.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a Calendar.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to give focus to a Calendar.
		 * @param {boolean} bMoveScroll If scrolling is enabled in the parent component, it will determine whether to scroll based on the Calendar.

For "true", the parent component will scroll so that the Calendar will show.
For "false", the parent component will not scroll regardless of the Calendar's position.

The default value is "true".
		 * @param {boolean} bInnerFocus If a Calendar is a container component, this parameter determines whether to move focus to a child component.

For "true", focus will be given to the first child component that can receive focus.
For "false", focus will be given to the Calendar.

The default value is "true" if a Calendar is a container component.
		 * @returns {object} 
		 */
		setFocus(bMoveScroll?: boolean, bInnerFocus?: boolean): object;
		/**
		 * This method sets the innerdataset property of a Calendar by specifying its argument as the value of the property.
		 * @param {object} objDataset It is a DataSet object that will be specified as the value of the innerdataset property.
		 */
		setInnerDataset(objDataset: object): null;
		/**
		 * This method is used to specify the bottom position of a Calendar in pixel, based on the parent component's top position.
		 * @param {number} nBottom It is a pixel value representing the bottom position of a Calendar, calculated based on the parent component's top position.
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * This method is used to specify the height of a Calendar in pixel.
		 * @param {number} nHeight It is a pixel value representing the height of a Calendar.
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * This method is used to specify the left position of a Calendar in pixel, based on the parent component's left position.
		 * @param {number} nLeft It is a pixel value representing the left position of a Calendar, calculated based on the parent component's left position.
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * This method is used to specify the right position of a Calendar in pixel, based on the parent component's left position.
		 * @param {number} nRight It is a pixel value representing the right position of a Calendar, calculated based on the parent component's left position.
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * This method is used to specify the top position of a Calendar in pixel, based on the parent component's top position.
		 * @param {number} nTop It is a pixel value representing the top position of a Calendar, calculated based on the parent component's top position.
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * This method is used to specify the width of a Calendar in pixel.
		 * @param {number} nWidth It is a pixel value representing the width of a Calendar.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * This method is used to select a certain area in the editable field of a Calendar, specified by the arguments. The selection is done when the editable field is focused.
		 * @param {number} nBegin This is the index number of a starting point for the selection.

The index numbers range from 0 to the length of the text.
If you specify -1, the selection begins from the right end.

The default value is 0.
		 * @param {number} nEnd This is the index number of an end point for the selection.

The index numbers range from 0 to the length of the text.
If you specify -1, the selection ends at the right end.

The default value is -1.
		 * @returns {boolean} 
		 */
		setSelect(nBegin?: number, nEnd?: number): boolean;
		/**
		 * This method is used to display a Calendar on the screen. The Calendar mentioned here refers to the one that is dynamically created through a script.
		 */
		show(): null;
		/**
		 * This method is used to instantly apply the value of a Calendar to the bound Dataset.
		 * @returns {boolean} 
		 */
		updateToDataset(): boolean;
	}
}

