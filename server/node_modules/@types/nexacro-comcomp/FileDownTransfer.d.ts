// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    FileDownTransfer: nexacro.FileDownTransfer;
}

    
declare namespace nexacro {
    type FileDownTransferOmitKeys = 'id';
	
	interface FileDownTransfer extends Omit<nexacro.EventSinkObject, FileDownTransferOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.FileDownTransfer;
	    /**
		 * This property is used to define a file name that will appear by default in a FileDialog opened for file downloading.
		 */
		readonly downloadfilename?: string;
		/**
		 * This property is used to specify the name of a FileDownTransfer.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the data that will be sent to the server. The data, which takes the form of a collection, is used to request file download.
		 */
		readonly postdatalist?: object;
		/**
		 * In a FileDownTransfer, this property is used to designate the name of a file to download and its location in the server.
		 */
		readonly url?: string;
		/**
		 * This event occurs when file download fails or an error code is returned.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.FileDownTransfer, nexacro.FileDownTransferErrorEventInfo>;
		/**
		 * This event occurs when a success code is delivered after the downloading of files.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.FileDownTransfer, nexacro.FileDownTransferEventInfo>;
		/**
		 * @param {string} v This property is used to define a file name that will appear by default in a FileDialog opened for file downloading.
		 * @returns {void} 
		 */
		set_downloadfilename(v: string): void;
		/**
		 * @param {string} v This property is used to specify the name of a FileDownTransfer.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v In a FileDownTransfer, this property is used to designate the name of a file to download and its location in the server.
		 * @returns {void} 
		 */
		set_url(v: string): void;
		/**
		 * This method is used to declare a certain event and then add it to a FileDownTransfer.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the FileDownTransfer.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a FileDownTransfer.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a FileDownTransfer as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to remove all the entries of the data set by the postdatalist property.
		 */
		clearPostDataList(): null;
		/**
		 * This method is used to delete a FileDownTransfer that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method is used to download a certain file from the server in the "POST" manner by using the HTTP/HTTPS protocol.
		 * @param {string} strUrl This is a string that represents the path to a file to download.

If you omit the value of this parameter, the value of the url property will be applied.
If you specify the value of this parameter, the value of the url property will be ignored.
		 * @param {any} strTargetpath 
		 */
		download(strUrl?: string, strTargetpath?: any): null;
		/**
		 * This method finds a handler in a certain event of a FileDownTransfer and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns a specific handler from a certain event of a FileDownTransfer by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method returns the entry of a certain key from the data set by the postdatalist property.
		 * @param {string} strKey This is a string representing the key of the data entry that will be returned.
		 * @returns {any} 
		 */
		getPostData(strKey: string): any;
		/**
		 * This method is used to add a handler to a certain event of a FileDownTransfer at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to remove a certain event that is declared in a FileDownTransfer.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the FileDownTransfer.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a FileDownTransfer.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a FileDownTransfer and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to remove the entry of a certain key from the data set by the postdatalist property.
		 * @param {string} strKey This is a string representing the key of the data entry that will be removed.
		 */
		removePostData(strKey: string): null;
		/**
		 * This method is used to change the first handler in a certain event of a FileDownTransfer.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a FileDownTransfer.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to add data to the postdatalist property, whose data will be sent to the server to request file download.
		 * @param {string} strKey This is a string representing the key of the data entry that will be sent to the server.

If there exists already an entry of the same key, the entry will be replaced with the new data.
		 * @param {any} varVal This is data that will be sent to the server.

You can use basic data types like number, string and Boolean.
		 */
		setPostData(strKey: string, varVal: any): null;
	}
}

