// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    NormalDataset: nexacro.Dataset;
}

    
declare namespace nexacro {
    
	interface Dataset extends nexacro.EventSinkObject {
	    /**
		 * @constructor
		 */
		new(): nexacro.Dataset;
	    /**
		 * This property is used to set the arguments that will be delivered to the business service set by the url property of a Dataset.
		 */
		readonly arguments?: string;
		readonly binddataobject?: string;
		/**
		 * This read-only property holds the number of columns defined in a Dataset.
		 */
		readonly colcount?: any;
		/**
		 * This read-only property holds the information on a Dataset column. The information takes the form of a collection.
		 */
		readonly colinfos?: any;
		readonly collation?: nexacro.Enum.CollationType;
		/**
		 * This read-only property holds the number of const (constant) columns defined in a Dataset.
		 */
		readonly constcount?: any;
		readonly dataobjectbindmode?: nexacro.Enum.Dataobjectbindmode;
		readonly dataobjectpath?: string;
		/**
		 * This property is used to determine whether to trigger events in a Dataset.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property is used to set an expression to filter the data loaded onto a Dataset.
		 */
		readonly filterstr?: any;
		/**
		 * This property specifies an expression that is used to group the data loaded onto a Dataset.
		 */
		readonly keystring?: any;
		/**
		 * This property determines how to apply the value of the filterstr property when a Dataset loads data or conducts a transaction.
		 */
		readonly loadfiltermode?: nexacro.Enum.LoadMode;
		/**
		 * This property determines how to apply the value of the keystring property when a Dataset loads data or conducts a transaction.
		 */
		readonly loadkeymode?: nexacro.Enum.LoadMode;
		/**
		 * This property is used to specify the name of a Dataset.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the timing of loading data when the url property of a Dataset is set.
		 */
		readonly preload?: boolean;
		/**
		 * This property is used to define how to process chucked data, which is sent from the server with a stream of data chucks.
		 */
		readonly progressload?: boolean;
		/**
		 * This property is used to set the position of the subtotal of a group that is created through the keystring property of a Dataset.
		 */
		readonly reversesubsum?: boolean;
		/**
		 * This read-only property holds the number of loaded rows .
		 */
		readonly rowcount?: any;
		/**
		 * This property holds the index number of a currently-selected Dataset row.
		 */
		readonly rowposition?: any;
		/**
		 * This property determines how to process Infinity in a Dataset column whose type is INT, FLOAT or BIGDECIMAL.
		 */
		readonly saveinfinity?: nexacro.Enum.DataSetValidation;
		/**
		 * This property determines how to process an invalid date in a Dataset column whose type is DATE, TIME or DATETIME.
		 */
		readonly saveinvaliddate?: nexacro.Enum.DataSetValidation;
		/**
		 * This property determines how to process NaN in a Dataset column whose type is DATE, TIME or DATETIME.
		 */
		readonly savenan?: nexacro.Enum.DataSetValidation;
		/**
		 * This property designates the ID of a Dataset that will be used actually. The designation will be conducted among the Datasets delivered through the business service that is connected through the url property of the current Dataset.
		 */
		readonly serverdatasetid?: any;
		/**
		 * This property determines whether to change the row type automatically when the data of a Dataset is inserted, updated or deleted.
		 */
		readonly updatecontrol?: boolean;
		/**
		 * This property is used to specify the URL of a business service that is connected to a Dataset.
		 */
		readonly url?: string;
		/**
		 * This property determines whether to apply the column layout of a Dataset that is received through a transaction.
		 */
		readonly useclientlayout?: boolean;
		/**
		 * This event occurs when a column value of a Dataset changes.
		 */
		readonly cancolumnchange?: nexacro.EventObject<Dataset, nexacro.DSColChangeEventInfo>;
		/**
		 * This event occurs when another row is selected in a Dataset and thus the value of the rowposition property is changed.
		 */
		readonly canrowposchange?: nexacro.EventObject<Dataset, nexacro.DSRowPosChangeEventInfo>;
		/**
		 * This event occurs after the value of a Dataset column changes.
		 */
		readonly oncolumnchanged?: nexacro.EventObject<Dataset, nexacro.DSColChangeEventInfo>;
		/**
		 * This event occurs after data is loaded onto a Dataset.
		 */
		readonly onload?: nexacro.EventObject<Dataset, nexacro.DSLoadEventInfo>;
		/**
		 * This event occurs when another row of a Dataset is selected, causing the change in the value of the rowposition property.
		 */
		readonly onrowposchanged?: nexacro.EventObject<Dataset, nexacro.DSRowPosChangeEventInfo>;
		/**
		 * This event occurs after data is inserted to or deleted from a Dataset. This event also occurs after a Dataset row changes its position or state.
		 */
		readonly onrowsetchanged?: nexacro.EventObject<Dataset, nexacro.DSRowsetChangeEventInfo>;
		/**
		 * This is among the events that occur in a Dataset when data is inserted, deleted or updated or when the position or state of a row is changed. This is the event that occurs last in such occasions.
		 */
		readonly onvaluechanged?: nexacro.EventObject<Dataset, nexacro.DSColChangeEventInfo>;
		/**
		 * @param {string} v This property is used to set the arguments that will be delivered to the business service set by the url property of a Dataset.
		 * @returns {void} 
		 */
		set_arguments(v: string): void;
		set_binddataobject(v: string): void;
		set_collation(v: nexacro.Enum.CollationType): void;
		set_dataobjectbindmode(v: nexacro.Enum.Dataobjectbindmode): void;
		set_dataobjectpath(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a Dataset.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {any} v This property is used to set an expression to filter the data loaded onto a Dataset.
		 * @returns {void} 
		 */
		set_filterstr(v: any): void;
		/**
		 * @param {any} v This property specifies an expression that is used to group the data loaded onto a Dataset.
		 * @returns {void} 
		 */
		set_keystring(v: any): void;
		/**
		 * @param {nexacro.Enum.LoadMode} v This property determines how to apply the value of the filterstr property when a Dataset loads data or conducts a transaction.
		 * @returns {void} 
		 */
		set_loadfiltermode(v: nexacro.Enum.LoadMode): void;
		/**
		 * @param {nexacro.Enum.LoadMode} v This property determines how to apply the value of the keystring property when a Dataset loads data or conducts a transaction.
		 * @returns {void} 
		 */
		set_loadkeymode(v: nexacro.Enum.LoadMode): void;
		/**
		 * @param {string} v This property is used to specify the name of a Dataset.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {boolean} v This property is used to set the timing of loading data when the url property of a Dataset is set.
		 * @returns {void} 
		 */
		set_preload(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to define how to process chucked data, which is sent from the server with a stream of data chucks.
		 * @returns {void} 
		 */
		set_progressload(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to set the position of the subtotal of a group that is created through the keystring property of a Dataset.
		 * @returns {void} 
		 */
		set_reversesubsum(v: boolean): void;
		/**
		 * @param {any} v This property holds the index number of a currently-selected Dataset row.
		 * @returns {void} 
		 */
		set_rowposition(v: any): void;
		/**
		 * @param {nexacro.Enum.DataSetValidation} v This property determines how to process Infinity in a Dataset column whose type is INT, FLOAT or BIGDECIMAL.
		 * @returns {void} 
		 */
		set_saveinfinity(v: nexacro.Enum.DataSetValidation): void;
		/**
		 * @param {nexacro.Enum.DataSetValidation} v This property determines how to process an invalid date in a Dataset column whose type is DATE, TIME or DATETIME.
		 * @returns {void} 
		 */
		set_saveinvaliddate(v: nexacro.Enum.DataSetValidation): void;
		/**
		 * @param {nexacro.Enum.DataSetValidation} v This property determines how to process NaN in a Dataset column whose type is DATE, TIME or DATETIME.
		 * @returns {void} 
		 */
		set_savenan(v: nexacro.Enum.DataSetValidation): void;
		/**
		 * @param {any} v This property designates the ID of a Dataset that will be used actually. The designation will be conducted among the Datasets delivered through the business service that is connected through the url property of the current Dataset.
		 * @returns {void} 
		 */
		set_serverdatasetid(v: any): void;
		/**
		 * @param {boolean} v This property determines whether to change the row type automatically when the data of a Dataset is inserted, updated or deleted.
		 * @returns {void} 
		 */
		set_updatecontrol(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the URL of a business service that is connected to a Dataset.
		 * @returns {void} 
		 */
		set_url(v: string): void;
		/**
		 * @param {boolean} v This property determines whether to apply the column layout of a Dataset that is received through a transaction.
		 * @returns {void} 
		 */
		set_useclientlayout(v: boolean): void;
		/**
		 * This method is used to add a column to a Dataset.
		 * @param {string} strColID This is a string that represents the ID of a column to add to the Dataset.
		 * @param {string} strColType This is the type of a column to add to the Dataset.
		 * @param {number} nColSize This is a number representing the length of data held by a column to add to the Dataset.

The default value is 256.
		 * @param {string} strDatapath 
		 * @returns {number} 
		 */
		addColumn(strColID: string, strColType: string, nColSize?: number, strDatapath?: string): number;
		/**
		 * This method is used to add a column to a Dataset by using a ColumnInfo object.
		 * @param {string} strID This is a string that represents the ID of a column to add to the Dataset.
		 * @param {object} objColInfo This is a ColumnInfo object to add to the Dataset.
		 * @returns {number} 
		 */
		addColumnInfo(strID: string, objColInfo: object): number;
		/**
		 * This method is used to add a const column to a Dataset.
		 * @param {string} strColID This is a string that represents the ID of a const column to add to the Dataset.

If there is already a const column whose ID equals the value of the this parameter, the value of the existing const column will be changed.
		 * @param {any} varVal This is a variant that represents the value of a const column to add to the Dataset.
		 * @param {string} strColType This is the type of a const column to add.

If you omit this parameter, either none or an invalid type can be set.
		 * @param {number} nColSize This is the data size of a const column to add.

If you omit this parameter, no data size will be set.
		 * @param {string} strDatapath 
		 * @returns {number} 
		 */
		addConstColumn(strColID: string, varVal: any, strColType?: string, nColSize?: number, strDatapath?: string): number;
		/**
		 * This method is used to declare a certain event and then add it to a Dataset.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the Dataset.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a Dataset.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a Dataset as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to add a new row at the of the last row of a Dataset.
		 * @returns {number} 
		 */
		addRow(): number;
		/**
		 * This method is used to load data from the location delivered as an argument and then to add the data to the end of the current Dataset's last row.
		 * @param {string} strUrl It specifies a service location (URL) where data will be loaded.
See the document of the url property of the Dataset to learn the permitted formats  to specify a location.

The value of the url property of the relevant Dataset will be applied if you do not specify this parameter.
		 */
		append(strUrl?: string): null;
		/**
		 * This method is used to add a row of data to the end row of a current Dataset.
		 * @param {object} objDataset It is an object that represents a Dataset that will be added.
		 * @param {boolean} bCheckCol For "true", data will be added to matching columns.
For "false", data will be added in the sequence of columns.

The default value is "false".
		 * @param {boolean} bUpdateConstCol For "true", this method will change the constant of the Const Column with the same ID.
For "false", this method will not change the constant of the Const Column with the same ID.

The default value is "false".
		 * @returns {number} 
		 */
		appendData(objDataset: object, bCheckCol?: boolean, bUpdateConstCol?: boolean): number;
		/**
		 * This method changes the types of the all the rows of a Dataset to "ROWTYPE_NORMAL" (normal).
		 */
		applyChange(): null;
		/**
		 * This method replaces all the data of a current Dataset with the rows and columns from a certain Dataset.
		 * @param {object} objDataset This is a Dataset object all of whose rows and columns will be brought.
		 * @returns {number} 
		 */
		assign(objDataset: object): number;
		/**
		 * This method is used to delete all the data as well as the information on columns and rows.
		 * @returns {number} 
		 */
		clear(): number;
		/**
		 * This method clears all the rows of a Dataset while maintaining columns.
		 * @returns {number} 
		 */
		clearData(): number;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method copies rows from a specified Dataset into a current Dataset.
		 * @param {object} objDataset This is a Dataset object that contains the rows to copy.
		 * @param {boolean} bFilteredOnly If this parameter is set to "true", only filtered-in rows can be copied when the Dataset defined by the objDataset parameter is filtered.
If this parameter is set to "false", all rows can be copied regardless of whether the Dataset is filtered.

The default value is "false".
		 * @returns {number} 
		 */
		copyData(objDataset: object, bFilteredOnly?: boolean): number;
		/**
		 * This method replaces a certain row of the current Dataset with a certain row of the specified Dataset.
		 * @param {number} nToRow This is the index number of a row in the current Dataset. The row will be replaced with new data.
		 * @param {object} objDataset This is a Dataset object that contains the data to copy.
		 * @param {number} nFromRow This is the index number of a row of the Dataset defined by the objDataset parameter. The row will be copied.
		 * @param {string} strColInfo This is a string representing the conditions for matching columns. An example of the format is "ToColumnID=FromColumnID,ToColumnID1=FromColumnID1".

If you do not set this parameter, only the columns whose IDs are the same will be matched.
		 * @returns {boolean} 
		 */
		copyRow(nToRow: number, objDataset: object, nFromRow: number, strColInfo?: string): boolean;
		/**
		 * This method is used to return a Dataset consisting of the rows that satisfy a given condition. This method excludes the rows that are filtered out from its search list.
		 * @param {string} strDatasetID It is the ID of a Dataset to create.
		 * @param {any[]} arrColList It is an array for determining how to structure the columns of a new Dataset and how  to fill them with data.

You can specify the elements of an array with the below formats.

"ColID" : it indicates that you will create a Dataset column of the ID specified by the "ColID" argument and then bring data from the column of the same ID in the original Dataset.
If no column in the original Dataset has a specified ID, the data of the created column will be null.

"NewColID : OldColID" : it indicates that you will create a Dataset column of the ID specified by the "NewColID" argument and then bring data from a column of the ID specified by the "OldColID" argument in the original Dataset.
If no column in the original Dataset has the ID specified by the "OldColID" argument, the data of the created column will be null.

"NewColID : strExpr" : it indicates that you will create a Dataset column of the ID specified by the "NewColID" argument and then bring data from the result of an expression specified by the strExpr argument.
		 * @param {string} strWhereExpr It is a condition for selecting the rows that will be copied to the new Dataset.
		 * @param {number} nStartIdx It is the index number of a row in the original Dataset. The row is the point that this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row in the original Dataset. The row is the point that this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @returns {object} 
		 */
		createDataset(strDatasetID: string, arrColList: any[], strWhereExpr?: string, nStartIdx?: number, nEndIdx?: number): object;
		/**
		 * This method is used to return a Dataset consisting of the rows that satisfy a given condition. This method includes the rows that are filtered out in its search list.
		 * @param {string} strDatasetID It is the ID of a Dataset to create.
		 * @param {any[]} arrColList It is an array for determining how to structure the columns of a new Dataset and how  to fill them with data.

You can specify the elements of an array with the below formats.

"ColID" : it indicates that you will create a Dataset column of the ID specified by the "ColID" argument and then bring data from the column of the same ID in the original Dataset.
If no column in the original Dataset has a specified ID, the data of the created column will be null.

"NewColID : OldColID" : it indicates that you will create a Dataset column of the ID specified by the "NewColID" argument and then bring data from a column of the ID specified by the "OldColID" argument in the original Dataset.
If no column in the original Dataset has the ID specified by the "OldColID" argument, the data of the created column will be null.

"NewColID : strExpr" : it indicates that you will create a Dataset column of the ID specified by the "NewColID" argument and then bring data from the result of an expression specified by the strExpr argument.
		 * @param {string} strWhereExpr It is a condition for selecting the rows that will be copied to the new Dataset.
		 * @param {number} nStartIdx It is the index number of a row in the original Dataset. The row is the point that this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row in the original Dataset. The row is the point that this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @returns {object} 
		 */
		createDatasetNF(strDatasetID: string, arrColList: any[], strWhereExpr?: string, nStartIdx?: number, nEndIdx?: number): object;
		/**
		 * This method is used to delete all the rows of a Dataset.
		 * @returns {number} 
		 */
		deleteAll(): number;
		/**
		 * This method is used to delete a specified column or const column of a Dataset.
		 * @param {number} nCol This is the index number of a column to delete.
		 * @returns {boolean} 
		 */
		deleteColumn(nCol: number): boolean;
		/**
		 * This method is used to delete a specified column or const column of a Dataset.
		 * @param {string} strColID This is the ID of a column to delete.
		 * @returns {boolean} 
		 */
		deleteColumn(strColID: string): boolean;
		/**
		 * This method receives an array that contains rows to remove and then deletes the relevant rows.
		 * @param {any[]} arrRowlist This is an array whose elements are row index numbers.
		 */
		deleteMultiRows(arrRowlist: any[]): null;
		/**
		 * This method is used to delete a specified row of a Dataset.
		 * @param {number} nRow This is the index number of a row to delete.
		 * @returns {boolean} 
		 */
		deleteRow(nRow: number): boolean;
		/**
		 * This method is used to exchange the positions of the two rows in a Dataset.
		 * @param {number} nRow1 This is the index number of the first row  that will be exchanged.
		 * @param {number} nRow2 This is the index number of the second row  that will be exchanged.
		 * @returns {boolean} 
		 */
		exchangeRow(nRow1: number, nRow2: number): boolean;
		/**
		 * This method returns an array of the index number of rows that satisfy a specified conditional expression. This method excludes the rows that are filtered out from its search list.
		 * @param {string} strExpr It is a conditional expression for searching for a value in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {any[]} 
		 */
		extractRows(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): any[];
		/**
		 * This method returns an array of the index number of rows that satisfy a specified conditional expression. This method includes the rows that are filtered out in its search list.
		 * @param {string} strExpr It is a conditional expression for searching for a value in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {any[]} 
		 */
		extractRowsNF(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): any[];
		/**
		 * This method is used to filter the data loaded onto a Dataset so that only the rows of data that satisfies a given condition is shown.
		 * @param {string} strFilterExpr This is a condition with which the data of a Dataset will be filtered.

An existing condition will be revoked if you specify an empty string ("").
If you omit this argument, the value of the filterstr property will be applied.
		 */
		filter(strFilterExpr?: string): null;
		/**
		 * This method is used to filter a certain row of a Dataset to make it invisible.
		 * @param {number} nRow This is the index number of a row to filter out.
		 */
		filterRow(nRow: number): null;
		/**
		 * This method finds a handler in a certain event of a Dataset and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method searches a certain column and returns a row that has the longest data. This method excludes the rows that are filtered out from its search list.
		 * @param {string} strColID It is the ID or index number of a Dataset column that will be searched.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @returns {number} 
		 */
		findMaxLengthRow(strColID: string, nStartIdx?: number, nEndIdx?: number): number;
		/**
		 * This method searches a certain column and returns a row that has the longest data. This method includes the rows that are filtered out in its search list.
		 * @param {string} strColID It is the ID or index number of a Dataset column that will be searched.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @returns {number} 
		 */
		findMaxLengthRowNF(strColID: string, nStartIdx?: number, nEndIdx?: number): number;
		/**
		 * This method receives a row index number in a filtered Dataset and returns the index number of the corresponding row in the non-filtered Dataset.
		 * @param {number} nRowPos It is a row index number counted based on the filtered Dataset.
		 * @returns {number} 
		 */
		findNFRowIndex(nRowPos: number): number;
		/**
		 * This method is used to return the index of the first row whose column value matches a given value while excluding the rows that are filtered out.
		 * @param {string} strColID It specifies the ID or index number of a column that will be searched.
		 * @param {string} strVal This is a value that you will search for in the column specified by strColID.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @returns {number} 
		 */
		findRow(strColID: string, strVal: string, nStartIdx?: number, nEndIdx?: number): number;
		/**
		 * This method is used to return the index of the first row whose specified column value begins with a given value while excluding the rows that are filtered out.
		 * @param {string} strColID It specifies the ID or index number of a column that will be searched.
		 * @param {string} strVal This is a value that you will search for in the column specified by strColID.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @returns {number} 
		 */
		findRowAs(strColID: string, strVal: string, nStartIdx?: number, nEndIdx?: number): number;
		/**
		 * This method is used to return the index of the first row whose specified column value begins with a given value while including the rows that are filtered out.
		 * @param {string} strColID It specifies the ID or index number of a column that will be searched.
		 * @param {string} strVal This is a value that you will search for in the column specified by strColID.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @returns {number} 
		 */
		findRowAsNF(strColID: string, strVal: string, nStartIdx?: number, nEndIdx?: number): number;
		/**
		 * This method is used to return the index of the first row that satisfies a given conditional expression while excluding the rows that are filtered out.
		 * @param {string} strExpr It is a conditional expression, which this method searches for the first row that satisfies.

You can use an assignment statement with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		findRowExpr(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): number;
		/**
		 * This method is used to return the index of the first row that satisfies a given conditional expression while including the rows that are filtered out.
		 * @param {string} strExpr It is a conditional expression, which this method searches for the first row that satisfies.

You can use an assignment statement with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		findRowExprNF(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): number;
		/**
		 * This method is used to return the index of the first row whose column value matches a given value while including the rows that are filtered out.
		 * @param {string} strColID It specifies the ID or index number of a column that will be searched.
		 * @param {string} strVal This is a value that you will search for in the column specified by strColID.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @returns {number} 
		 */
		findRowNF(strColID: string, strVal: string, nStartIdx?: number, nEndIdx?: number): number;
		/**
		 * This method returns the average of certain column values. Otherwise, it follows a specified formula and returns the average of the values satisfying the formula. This method excludes the rows that are filtered out from the calculation.
		 * @param {string} strExpr It is the ID of a column where you will obtain the average value. Otherwise, it is a formula that you will use to obtain the average value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins calculation with.

If you specify a negative number or omit the value, 0 will be applied instead, with the calculation starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends calculation with.
Namely, this method calculates rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the calculation ending at the last row.
		 * @param {boolean} bExcludeNaN This parameter determines whether to exclude a column value or calculated value if it is null, undefined, ""(an empty string) or NaN.
If such a value is included in the calculation of the average, the denominator--i.e. the total number of values--will increase.

For "true", such a value will be included.
For "false", such a value will be excluded.

The default value is "true".
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.

Even if you specify the ID of a certain column as an array, the relevant column value will not replace an assignment statement.
If you want a column value to replace an assignment statement, you must specify the ID of the column as the strExpr parameter.
That is, if you specify the ID of a certain column as the "arrArgs[0]" array, "$0" will be replaced by a string rather than the column value.
		 * @returns {number} 
		 */
		getAvg(strExpr: string, nStartIdx?: number, nEndIdx?: number, bExcludeNaN?: boolean, arrArgs?: any[]): number;
		/**
		 * This method returns the average of certain column values. Otherwise, it follows a specified formula and returns the average of the values satisfying the formula. This method includes the rows that are filtered out in the calculation.
		 * @param {string} strExpr It is the ID of a column where you will obtain the average value. Otherwise, it is a formula that you will use to obtain the average value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins calculation with.

If you specify a negative number or omit the value, 0 will be applied instead, with the calculation starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends calculation with.
Namely, this method calculates rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the calculation ending at the last row.
		 * @param {boolean} bExcludeNaN This parameter determines whether to exclude a column value or calculated value if it is null, undefined, ""(an empty string) or NaN.
If such a value is included in the calculation of the average, the denominator--i.e. the total number of values--will increase.

For "true", such a value will be included.
For "false", such a value will be excluded.

The default value is "true".
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.

Even if you specify the ID of a certain column as an array, the relevant column value will not replace an assignment statement.
If you want a column value to replace an assignment statement, you must specify the ID of the column as the strExpr parameter.
That is, if you specify the ID of a certain column as the "arrArgs[0]" array, "$0" will be replaced by a string rather than the column value.
		 * @returns {number} 
		 */
		getAvgNF(strExpr: string, nStartIdx?: number, nEndIdx?: number, bExcludeNaN?: boolean, arrArgs?: any[]): number;
		/**
		 * This method finds the rows that satisfy a specified condition and then returns the average of certain column values. Otherwise, it follows a specified formula and returns the average of the values satisfying the formula. This method excludes the rows that are filtered out from its search list.
		 * @param {string} strCmpExpr It is a conditional expression for searching for relevant rows in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrCmpArgs parameter.
		 * @param {string} strValExpr It is the ID of a column where you will the average value. Otherwise, it is a formula that you
 will use to obtain the average value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {boolean} bExcludeNaN This parameter determines whether to exclude a column value or calculated value if it is null, undefined, ""(an empty string) or NaN.
If such a value is included in the calculation of the average, the denominator--i.e. the total number of values--will increase.

For "true", such a value will be excluded.
For "false", such a value will be included.

The default value is "true".
		 * @param {any[]} arrCmpArgs It is an array of values that will replace an assignment statement defined by the strCmpExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrCmpArgs[0] and arrCmpArgs[2] respectively.

Even if you specify the ID of a certain column as an array, the relevant column value will not replace an assignment statement.
If you want a column value to replace an assignment statement, you must specify the ID of the column as the strCmpExpr parameter.
That is, if you specify the ID of a certain column as the "arrCmpArgs[0]" array, "$0" will be replaced by a string rather than the column value.
		 * @param {any[]} arrValArgs It is an array of values that will replace an assignment statement defined by the strValExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrValArgs[0] and arrValArgs[2] respectively.

Even if you specify the ID of a certain column as an array, the relevant column value will not replace an assignment statement.
If you want a column value to replace an assignment statement, you must specify the ID of the column as the strValExpr parameter.
That is, if you specify the ID of a certain column as the "arrValArgs[0]" array, "$0" will be replaced by a string rather than the column value.
		 * @returns {number} 
		 */
		getCaseAvg(strCmpExpr: string, strValExpr: string, nStartIdx?: number, nEndIdx?: number, bExcludeNaN?: boolean, arrCmpArgs?: any[], arrValArgs?: any[]): number;
		/**
		 * This method finds the rows that satisfy a specified condition and then returns the average of certain column values. Otherwise, it follows a specified formula and returns the average of the values satisfying the formula. This method includes the rows that are filtered out in its search list.
		 * @param {string} strCmpExpr It is a conditional expression for searching for relevant rows in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrCmpArgs parameter.
		 * @param {string} strValExpr It is the ID of a column where you will the average value. Otherwise, it is a formula that you
 will use to obtain the average value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {boolean} bExcludeNaN This parameter determines whether to exclude a column value or calculated value if it is null, undefined, ""(an empty string) or NaN.
If such a value is included in the calculation of the average, the denominator--i.e. the total number of values--will increase.

For "true", such a value will be included.
For "false", such a value will be excluded.

The default value is "true".
		 * @param {any[]} arrCmpArgs It is an array of values that will replace an assignment statement defined by the strCmpExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrCmpArgs[0] and arrCmpArgs[2] respectively.

Even if you specify the ID of a certain column as an array, the relevant column value will not replace an assignment statement.
If you want a column value to replace an assignment statement, you must specify the ID of the column as the strCmpExpr parameter.
That is, if you specify the ID of a certain column as the "arrCmpArgs[0]" array, "$0" will be replaced by a string rather than the column value.
		 * @param {any[]} arrValArgs It is an array of values that will replace an assignment statement defined by the strValExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrValArgs[0] and arrValArgs[2] respectively.

Even if you specify the ID of a certain column as an array, the relevant column value will not replace an assignment statement.
If you want a column value to replace an assignment statement, you must specify the ID of the column as the strValExpr parameter.
That is, if you specify the ID of a certain column as the "arrValArgs[0]" array, "$0" will be replaced by a string rather than the column value.
		 * @returns {number} 
		 */
		getCaseAvgNF(strCmpExpr: string, strValExpr: string, nStartIdx?: number, nEndIdx?: number, bExcludeNaN?: boolean, arrCmpArgs?: any[], arrValArgs?: any[]): number;
		/**
		 * This method returns the total number of rows that satisfy a specified conditional expression. This method excludes the rows that are filtered out from its search list.
		 * @param {string} strExpr It is a conditional expression for searching for a value in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getCaseCount(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): number;
		/**
		 * This method returns the total number of rows that satisfy a specified conditional expression. This method includes the rows that are filtered out in its search list.
		 * @param {string} strExpr It is a conditional expression for searching for a value in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getCaseCountNF(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): number;
		/**
		 * This method finds the rows that satisfy a specified condition and then returns the maximum value in a certain column. Otherwise, it follows a specified formula and returns the maximum value among the ones satisfying the formula. This method excludes the rows that are filtered out from its search list.
		 * @param {string} strCmpExpr It is a conditional expression for searching for a value in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrCmpArgs parameter.
		 * @param {string} strValExpr It is the ID of a column where you will obtain the maximum value. Otherwise, it is a formula that you will use to obtain the maximum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrCmpArgs It is an array of values that will replace an assignment statement defined by the strCmpExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrCmpArgs[0] and arrCmpArgs[2] respectively.
		 * @param {any[]} arrValArgs It is an array of values that will replace an assignment statement defined by the strValExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrValArgs[0] and arrValArgs[2] respectively.
		 * @returns {number} 
		 */
		getCaseMax(strCmpExpr: string, strValExpr: string, nStartIdx?: number, nEndIdx?: number, arrCmpArgs?: any[], arrValArgs?: any[]): number;
		/**
		 * This method finds the rows that satisfy a specified condition and then returns the maximum value in a certain column. Otherwise, it follows a specified formula and returns the maximum value among the ones satisfying the formula. This method includes the rows that are filtered out in its search list.
		 * @param {string} strCmpExpr It is a conditional expression for searching for a value in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrCmpArgs parameter.
		 * @param {string} strValExpr It is the ID of a column where you will obtain the maximum value. Otherwise, it is a formula that you will use to obtain the maximum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrCmpArgs It is an array of values that will replace an assignment statement defined by the strCmpExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrCmpArgs[0] and arrCmpArgs[2] respectively.
		 * @param {any[]} arrValArgs It is an array of values that will replace an assignment statement defined by the strValExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrValArgs[0] and arrValArgs[2] respectively.
		 * @returns {number} 
		 */
		getCaseMaxNF(strCmpExpr: string, strValExpr: string, nStartIdx?: number, nEndIdx?: number, arrCmpArgs?: any[], arrValArgs?: any[]): number;
		/**
		 * This method finds the rows that satisfy a specified condition and then returns the minimum value in a certain column. Otherwise, it follows a specified formula and returns the minimum value among the ones satisfying the formula. This method excludes the rows that are filtered out from its search list.
		 * @param {string} strCmpExpr It is a conditional expression for searching for a value in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrCmpArgs parameter.
		 * @param {string} strValExpr It is the ID of a column where you will obtain the minimum value. Otherwise, it is a formula that you will use to obtain the minimum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrCmpArgs It is an array of values that will replace an assignment statement defined by the strCmpExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrCmpArgs[0] and arrCmpArgs[2] respectively.
		 * @param {any[]} arrValArgs It is an array of values that will replace an assignment statement defined by the strValExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrValArgs[0] and arrValArgs[2] respectively.
		 * @returns {number} 
		 */
		getCaseMin(strCmpExpr: string, strValExpr: string, nStartIdx?: number, nEndIdx?: number, arrCmpArgs?: any[], arrValArgs?: any[]): number;
		/**
		 * This method finds the rows that satisfy a specified condition and then returns the minimum value in a certain column. Otherwise, it follows a specified formula and returns the minimum value among the ones satisfying the formula. This method includes the rows that are filtered out in its search list.
		 * @param {string} strCmpExpr It is a conditional expression for searching for a value in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrCmpArgs parameter.
		 * @param {string} strValExpr It is the ID of a column where you will obtain the minimum value. Otherwise, it is a formula that you will use to obtain the minimum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrCmpArgs It is an array of values that will replace an assignment statement defined by the strCmpExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrCmpArgs[0] and arrCmpArgs[2] respectively.
		 * @param {any[]} arrValArgs It is an array of values that will replace an assignment statement defined by the strValExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrValArgs[0] and arrValArgs[2] respectively.
		 * @returns {number} 
		 */
		getCaseMinNF(strCmpExpr: string, strValExpr: string, nStartIdx?: number, nEndIdx?: number, arrCmpArgs?: any[], arrValArgs?: any[]): number;
		/**
		 * This method finds the rows that satisfy a specified condition and then returns the sum of certain column values. Otherwise, it follows a specified formula and returns the sum of the values satisfying the formula. This method excludes the rows that are filtered out from its search list.
		 * @param {string} strCmpExpr It is a conditional expression for searching for relevant rows in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrCmpArgs parameter.
		 * @param {string} strValExpr It is the ID of a column where you will the sum value. Otherwise, it is a formula that you
 will use to obtain the sum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrCmpArgs It is an array of values that will replace an assignment statement defined by the strCmpExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrCmpArgs[0] and arrCmpArgs[2] respectively.
		 * @param {any[]} arrValArgs It is an array of values that will replace an assignment statement defined by the strValExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrValArgs[0] and arrValArgs[2] respectively.
		 * @returns {number} 
		 */
		getCaseSum(strCmpExpr: string, strValExpr: string, nStartIdx?: number, nEndIdx?: number, arrCmpArgs?: any[], arrValArgs?: any[]): number;
		/**
		 * This method finds the rows that satisfy a specified condition and then returns the sum of certain column values. Otherwise, it follows a specified formula and returns the sum of the values satisfying the formula. This method includes the rows that are filtered out in its search list.
		 * @param {string} strCmpExpr It is a conditional expression for searching for relevant rows in the Dataset.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrCmpArgs parameter.
		 * @param {string} strValExpr It is the ID of a column where you will the sum value. Otherwise, it is a formula that you
 will use to obtain the sum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrCmpArgs It is an array of values that will replace an assignment statement defined by the strCmpExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrCmpArgs[0] and arrCmpArgs[2] respectively.
		 * @param {any[]} arrValArgs It is an array of values that will replace an assignment statement defined by the strValExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrValArgs[0] and arrValArgs[2] respectively.
		 * @returns {number} 
		 */
		getCaseSumNF(strCmpExpr: string, strValExpr: string, nStartIdx?: number, nEndIdx?: number, arrCmpArgs?: any[], arrValArgs?: any[]): number;
		/**
		 * This method is used to obtain the total number of the columns defined in a Dataset including const columns.
		 * @returns {number} 
		 */
		getColCount(): number;
		/**
		 * This method returns the ID of a column whose index number matches a specified value.
		 * @param {number} nColIdx It is the index number of a column whose ID you want to obtain.

You can specify the index number of a Const column.
		 * @returns {string} 
		 */
		getColID(nColIdx: number): string;
		/**
		 * This method returns the index number of a column whose ID matches a specified value.
		 * @param {string} strColID It is the ID of a normal column or Const column whose index number you want to obtain.
		 * @returns {number} 
		 */
		getColIndex(strColID: string): number;
		/**
		 * This method returns the column value of a specified row while excluding the rows that are filtered out.
		 * @param {number} nRow It is the index number of a Dataset row whose column value you intend to obtain.

The index number of the beginning row is 0.
		 * @param {number} nColIdx It is the index number of a Dataset column whose value you intend to obtain.
		 * @returns {any} 
		 */
		getColumn(nRow: number, nColIdx: number): any;
		/**
		 * This method returns the column value of a specified row while excluding the rows that are filtered out.
		 * @param {number} nRow It is the index number of a Dataset row whose column value you intend to obtain.

The index number of the beginning row is 0.
		 * @param {string} strColID It is the ID of a Dataset column whose value you intend to obtain.
		 * @returns {any} 
		 */
		getColumn(nRow: number, strColID: string): any;
		/**
		 * This method returns the ColumnInfo object of a specified column in a Dataset.
		 * @param {number} nColIdx The index number of a target column
		 * @returns {object} 
		 */
		getColumnInfo(nColIdx: number): object;
		/**
		 * This method returns the ColumnInfo object of a specified column in a Dataset.
		 * @param {string} strColName The ID of a target column
		 * @returns {object} 
		 */
		getColumnInfo(strColName: string): object;
		/**
		 * This method returns the column value of a specified row while including the rows that are filtered out.
		 * @param {number} nRow It is the index number of a Dataset row whose column value you intend to obtain.

The index number of the beginning row is 0.
		 * @param {number} nColIdx It is the index number of a Dataset column whose value you intend to obtain.
		 * @returns {any} 
		 */
		getColumnNF(nRow: number, nColIdx: number): any;
		/**
		 * This method returns the column value of a specified row while including the rows that are filtered out.
		 * @param {number} nRow It is the index number of a Dataset row whose column value you intend to obtain.

The index number of the beginning row is 0.
		 * @param {string} strColID It is the ID of a Dataset column whose value you intend to obtain.
		 * @returns {any} 
		 */
		getColumnNF(nRow: number, strColID: string): any;
		/**
		 * This method returns the ID of a Const column whose index number matches a specified value.
		 * @param {number} nColIdx It is the index number of a Const column whose ID you want to obtain.
		 * @returns {string} 
		 */
		getConstColID(nColIdx: number): string;
		/**
		 * This method returns the index number of a Const column whose ID matches a specified value.
		 * @param {string} strColID It is the ID of a Const column whose index number you want to obtain.
		 * @returns {number} 
		 */
		getConstColIndex(strColID: string): number;
		/**
		 * This method is used to obtain the value of a certain const column defined in a Dataset.
		 * @param {number} nColIdx This is the index number of the const column whose value will be obtained.
		 * @returns {any} 
		 */
		getConstColumn(nColIdx: number): any;
		/**
		 * This method is used to obtain the value of a certain const column defined in a Dataset.
		 * @param {string} strColID This is the ID of the const column whose value will be obtained.
		 * @returns {any} 
		 */
		getConstColumn(strColID: string): any;
		/**
		 * This method is used to obtain the number of the const columns defined in a Dataset.
		 * @returns {number} 
		 */
		getConstCount(): number;
		/**
		 * This method searches a certain column and returns the number of rows that contain data, while excluding the rows that are filtered out from its search list.
		 * @param {string} strColID It is the ID or index number of a column where you will obtain the number of rows that contain data.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @returns {number} 
		 */
		getCount(strColID?: string, nStartIdx?: number, nEndIdx?: number): number;
		/**
		 * This method searches a certain column and returns the number of rows that contain data, while including the rows that are filtered out in its search list.
		 * @param {string} strColID It is the ID or index number of a column where you will obtain the number of rows that contain data.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @returns {number} 
		 */
		getCountNF(strColID?: string, nStartIdx?: number, nEndIdx?: number): number;
		/**
		 * This method obtains the column value in a certain deleted row of a Dataset.
		 * @param {number} nRow This is the index number of a deleted row in which a column value will be obtained.
		 * @param {number} nColIdx This is the index number of a column whose value will be obtained.
		 * @returns {any} 
		 */
		getDeletedColumn(nRow: number, nColIdx: number): any;
		/**
		 * This method obtains the column value in a certain deleted row of a Dataset.
		 * @param {number} nRow This is the index number of a deleted row in which a column value will be obtained.
		 * @param {string} strColID This is the ID of a deleted row in which a column value will be obtained.
		 * @returns {any} 
		 */
		getDeletedColumn(nRow: number, strColID: string): any;
		/**
		 * This method is used to obtain the number of the rows deleted from a Dataset.
		 * @returns {number} 
		 */
		getDeletedRowCount(): number;
		/**
		 * This method returns an array that contains all the rows deleted from a Dataset.
		 * @returns {any[]} 
		 */
		getDeletedRowset(): any[];
		/**
		 * This method returns a specific handler from a certain event of a Dataset by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method is used to obtain the number of the rows in the group which a specified row refers to. The specified row should contain the information on a group.
		 * @param {number} nRow This is the index number of a target row.

The index number of the first row is 0.
		 * @returns {number} 
		 */
		getGroupRangeCount(nRow: number): number;
		/**
		 * This method is used to obtain the beginning row of the group which a specified row refers to. The specified row should contain the information on a group.
		 * @param {number} nRow This is the index number of a target row.

The index number of the first row is 0.
		 * @returns {number} 
		 */
		getGroupRangeStart(nRow: number): number;
		/**
		 * This method returns the maximum among certain column values. Otherwise, it follows a specified formula and returns the maximum among the values satisfying the formula. This method excludes the rows that are filtered out from its search list.
		 * @param {string} strExpr It is the ID of a column where you will obtain the maximum value. Otherwise, it is a formula that you will use to obtain the maximum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getMax(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): number;
		/**
		 * This method returns the maximum among certain column values. Otherwise, it follows a specified formula and returns the maximum among the values satisfying the formula. This method includes the rows that are filtered out in its search list.
		 * @param {string} strExpr It is the ID of a column where you will obtain the maximum value. Otherwise, it is a formula that you will use to obtain the maximum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getMaxNF(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): number;
		/**
		 * This method returns the minimum among certain column values. Otherwise, it follows a specified formula and returns the minimum among the values satisfying the formula. This method excludes the rows that are filtered out from its search list.
		 * @param {string} strExpr It is the ID of a column where you will obtain the minimum value. Otherwise, it is a formula that you will use to obtain the minimum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getMin(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): number;
		/**
		 * This method returns the minimum among certain column values. Otherwise, it follows a specified formula and returns the minimum among the values satisfying the formula. This method includes the rows that are filtered out in its search list.
		 * @param {string} strExpr It is the ID of a column where you will obtain the minimum value. Otherwise, it is a formula that you will use to obtain the minimum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrValArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins searching with.

If you specify a negative number or omit the value, 0 will be applied instead, with the search starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends searching with.
Namely, this method searches rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the search ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getMinNF(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): number;
		/**
		 * This method is used to return the initial column value of a specified row while excluding the rows that are filtered out.
		 * @param {number} nRow It is the index number of a row whose initial value you intend to obtain.
		 * @param {number} nColIdx It is the index number of a column whose initial value you intend to obtain.
		 * @returns {any} 
		 */
		getOrgColumn(nRow: number, nColIdx: number): any;
		/**
		 * This method is used to return the initial column value of a specified row while excluding the rows that are filtered out.
		 * @param {number} nRow It is the index number of a row whose initial value you intend to obtain.
		 * @param {string} strColID It is the ID of a column whose initial value you intend to obtain.
		 * @returns {any} 
		 */
		getOrgColumn(nRow: number, strColID: string): any;
		/**
		 * This method is used to return the initial column value of a specified row while including the rows that are filtered out.
		 * @param {number} nRow It is the index number of a row whose initial value you intend to obtain.
		 * @param {number} nColIdx It is the index number of a column whose initial value you intend to obtain.
		 * @returns {any} 
		 */
		getOrgColumnNF(nRow: number, nColIdx: number): any;
		/**
		 * This method is used to return the initial column value of a specified row while including the rows that are filtered out.
		 * @param {number} nRow It is the index number of a row whose initial value you intend to obtain.
		 * @param {string} strColID It is the ID of a column whose initial value you intend to obtain.
		 * @returns {any} 
		 */
		getOrgColumnNF(nRow: number, strColID: string): any;
		/**
		 * This method is used to return the total number of rows excluding the rows that are filtered out.
		 * @returns {number} 
		 */
		getRowCount(): number;
		/**
		 * This method is used to return the total number of rows including the rows that are filtered out.
		 * @returns {number} 
		 */
		getRowCountNF(): number;
		/**
		 * This method is used to obtain the level of a certain row when the rows of a Dataset are grouped.
		 * @param {number} nRow This is the index number of a target row.

The index number of the first row is 0.
		 * @returns {number} 
		 */
		getRowLevel(nRow: number): number;
		/**
		 * This method finds certain percentage of rows and returns the average of their values in a certain column. Otherwise, it follows a specified formula and returns the average of the values satisfying the formula. This method excludes the rows that are filtered out from the calculation.
		 * @param {any[]} arrRows It is an array that contains the index numbers of the rows whose values in a certain column you will obtain the average of.
		 * @param {string} strColExpr It is the ID or index number of a column which the column values of the rows belong to. The rows here refer to the ones specified by the arrRows parameter. Otherwise, it is a formula that you will use to obtain the average value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {boolean} bExcludeNaN This parameter determines whether to exclude a column value or calculated value if it is null, undefined, ""(an empty string) or NaN.
If such a value is included in the calculation of the average, the denominator--i.e. the total number of values--will increase.

For "true", such a value will be included.
For "false", such a value will be excluded.

The default value is "true".
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.

Even if you specify the ID of a certain column as an array, the relevant column value will not replace an assignment statement.
If you want a column value to replace an assignment statement, you must specify the ID of the column as the strColExpr parameter.
That is, if you specify the ID of a certain column as the "arrArgs[0]" array, "$0" will be replaced by a string rather than the column value.
		 * @returns {number} 
		 */
		getRowsAvg(arrRows: any[], strColExpr: string, bExcludeNaN?: boolean, arrArgs?: any[]): number;
		/**
		 * This method finds certain rows and returns the average of their values in a certain column. Otherwise, it follows a specified formula and returns the average of the values satisfying the formula. This method includes the rows that are filtered out in the calculation.
		 * @param {any[]} arrRows It is an array that contains the index numbers of the rows whose values in a certain column you will obtain the average of.
		 * @param {string} strColExpr It is the ID or index number of a column which the column values of the rows belong to. The rows here refer to the ones specified by the arrRows parameter. Otherwise, it is a formula that you will use to obtain the average value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {boolean} bExcludeNaN This parameter determines whether to exclude a column value or calculated value if it is null, undefined, ""(an empty string) or NaN.
If such a value is included in the calculation of the average, the denominator--i.e. the total number of values--will increase.

For "true", such a value will be included.
For "false", such a value will be excluded.

The default value is "true".
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.

Even if you specify the ID of a certain column as an array, the relevant column value will not replace an assignment statement.
If you want a column value to replace an assignment statement, you must specify the ID of the column as the strColExpr parameter.
That is, if you specify the ID of a certain column as the "arrArgs[0]" array, "$0" will be replaced by a string rather than the column value.
		 * @returns {number} 
		 */
		getRowsAvgNF(arrRows: any[], strColExpr: string, bExcludeNaN?: boolean, arrArgs?: any[]): number;
		/**
		 * This method finds certain rows in a certain column and then returns the number of rows that contain data, while excluding the rows that are filtered out from its search list.
		 * @param {any[]} arrRows It is an array that contains the index numbers of the rows whose values in a certain column will be checked for the presence of data.
		 * @param {string} strColExpr It is the ID or index number of a column which the column values of the rows belong to. The rows refer to the ones specified by the arrRows parameter. Otherwise, it is a formula that you will use to check whether calculated values contain data.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strColExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getRowsCount(arrRows: any[], strColExpr: string, arrArgs?: any[]): number;
		/**
		 * This method finds certain rows in a certain column and then returns the number of rows that contain data, while including the rows that are filtered out in its search list.
		 * @param {any[]} arrRows It is an array that contains the index numbers of the rows whose values in a certain column will be checked for the presence of data.
		 * @param {string} strColExpr It is the ID or index number of a column which the column values of the rows belong to. The rows refer to the ones specified by the arrRows parameter. Otherwise, it is a formula that you will use to check whether calculated values contain data.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strColExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getRowsCountNF(arrRows: any[], strColExpr: string, arrArgs?: any[]): number;
		/**
		 * This method finds certain rows and returns the maximum among their values in a certain column. Otherwise, it follows a specified formula and returns the maximum among the values satisfying the formula. This method excludes the rows that are filtered out from its search list.
		 * @param {any[]} arrRows It is an array that contains the index numbers of the rows whose values in a certain column you will obtain the maximum among.
		 * @param {string} strColExpr It is the ID or index number of a column which the column values of the rows belong to. The rows here refer to the ones specified by the arrRows parameter. Otherwise, it is a formula that you will use to obtain the maximum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strColExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getRowsMax(arrRows: any[], strColExpr: string, arrArgs?: any[]): number;
		/**
		 * This method finds certain rows and returns the maximum among their values in a certain column. Otherwise, it follows a specified formula and returns the maximum among the values satisfying the formula. This method includes the rows that are filtered out in its search list.
		 * @param {any[]} arrRows It is an array that contains the index numbers of the rows whose values in a certain column you will obtain the maxinimum among.
		 * @param {string} strColExpr It is the ID or index number of a column which the column values of the rows belong to. The rows here refer to the ones specified by the arrRows parameter. Otherwise, it is a formula that you will use to obtain the maximum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strColExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getRowsMaxNF(arrRows: any[], strColExpr: string, arrArgs?: any[]): number;
		/**
		 * This method finds certain rows and returns the minimum among their values in a certain column. Otherwise, it follows a specified formula and returns the minimum among the values satisfying the formula. This method excludes the rows that are filtered out from its search list.
		 * @param {any[]} arrRows It is an array that contains the index numbers of the rows whose values in a certain column you will obtain the minimum among.
		 * @param {string} strColExpr It is the ID or index number of a column which the column values of the rows belong to. The rows here refer to the ones specified by the arrRows parameter. Otherwise, it is a formula that you will use to obtain the minimum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strColExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getRowsMin(arrRows: any[], strColExpr: string, arrArgs?: any[]): number;
		/**
		 * This method finds certain rows and returns the minimum among their values in a certain column. Otherwise, it follows a specified formula and returns the minimum among the values satisfying the formula. This method includes the rows that are filtered out in its search list.
		 * @param {any[]} arrRows It is an array that contains the index numbers of the rows whose values in a certain column you will obtain the minimum among.
		 * @param {string} strColExpr It is the ID or index number of a column which the column values of the rows belong to. The rows here refer to the ones specified by the arrRows parameter. Otherwise, it is a formula that you will use to obtain the minimum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strColExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getRowsMinNF(arrRows: any[], strColExpr: string, arrArgs?: any[]): number;
		/**
		 * This method finds certain rows and returns the sum of their values in a certain column. Otherwise, it follows a specified formula and returns the sum of the values satisfying the formula. This method excludes the rows that are filtered out from the calculation.
		 * @param {any[]} arrRows It is an array that contains the index numbers of the rows whose values in a certain column you will obtain the sum of.
		 * @param {string} strColExpr It is the ID or index number of a column which the column values of the rows belong to. The rows here refer to the ones specified by the arrRows parameter. Otherwise, it is a formula that you will use to obtain the sum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strColExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getRowsSum(arrRows: any[], strColExpr: string, arrArgs?: any[]): number;
		/**
		 * This method finds certain rows and returns the sum of their values in a certain column. Otherwise, it follows a specified formula and returns the sum of the values satisfying the formula. This method includes the rows that are filtered out in the calculation.
		 * @param {any[]} arrRows It is an array that contains the index numbers of the rows whose values in a certain column you will obtain the sum of.
		 * @param {string} strColExpr It is the ID or index number of a column which the column values of the rows belong to. The rows here refer to the ones specified by the arrRows parameter. Otherwise, it is a formula that you will use to obtain the sum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strColExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getRowsSumNF(arrRows: any[], strColExpr: string, arrArgs?: any[]): number;
		/**
		 * This method is used to return the type of a certain row while excluding the rows that are filtered out from its search list.
		 * @param {number} nRow It is the index number of a row whose type you want to obtain.

The index number of the first row is 0.
		 * @returns {number} 
		 */
		getRowType(nRow: number): number;
		/**
		 * This method is used to return the type of a certain row while including the rows that are filtered out in its search list.
		 * @param {number} nRow It is the index number of a row whose type you want to obtain.

The index number of the first row is 0.
		 * @returns {number} 
		 */
		getRowTypeNF(nRow: number): number;
		/**
		 * This method returns the sum of certain column values. Otherwise, it follows a specified formula and returns the sum of the values satisfying the formula. This method excludes the rows that are filtered out from the calculation.
		 * @param {string} strExpr It is the ID of a column where you will the sum value. Otherwise, it is a formula that you
 will use to obtain the sum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins calculation with.

If you specify a negative number or omit the value, 0 will be applied instead, with the calculation starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends calculation with.
Namely, this method calculates rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the calculation ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getSum(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): number;
		/**
		 * This method returns the sum of certain column values. Otherwise, it follows a specified formula and returns the sum of the values satisfying the formula. This method includes the rows that are filtered out in the calculation.
		 * @param {string} strExpr It is the ID of a column where you will the sum value. Otherwise, it is a formula that you
 will use to obtain the sum value.

You can use an assignment statement in the expression with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {number} nStartIdx It is the index number of a row which this method begins calculation with.

If you specify a negative number or omit the value, 0 will be applied instead, with the calculation starting from the first row.
		 * @param {number} nEndIdx It is one plus the index number of a row which this method ends calculation with.
Namely, this method calculates rows up to the one whose index number is 1 less than the specified.

You should specify a number bigger than the value of the nStartIdx parameter.
If you specify a negative number or omit the value, -1 will be applied instead, with the calculation ending at the last row.
		 * @param {any[]} arrArgs It is an array of values that will replace an assignment statement defined by the strExpr parameter.

From the format "$ + number", the array will be assigned to the number.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {number} 
		 */
		getSumNF(strExpr: string, nStartIdx?: number, nEndIdx?: number, arrArgs?: any[]): number;
		/**
		 * This method is used to add a handler to a certain event of a Dataset at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to insert a new row to a specified position in a Dataset.
		 * @param {number} nRow This is the index number of a position to which a row will be inserted.

The index number of the first row is 0.
		 * @returns {number} 
		 */
		insertRow(nRow: number): number;
		/**
		 * This method is used to load data from the business service set by the url property of a Dataset.
		 * @param {boolean} bAsync For "true", data will be loaded in the asynchronous manner.
For "false", data will be loaded in the synchronous manner.

The default value is "true".
		 * @param {boolean} bBinary For "true", data will be loaded in the binary format.
For "false", data will be loaded in non-binary formats.

The default value is "false". 

* You can specify only "false" in the web runtime environment.
		 */
		load(bAsync?: boolean, bBinary?: boolean): null;
		/**
		 * This method is used to load binary data onto a Dataset.
		 * @param {object} varBinData Data items in the binary format
		 * @returns {number} 
		 */
		loadBIN(varBinData: object): number;
		/**
		 * This method is used to load CSV-formatted data onto a Dataset.
		 * @param {object} varCsvData This is an object that represents CSV-formatted data.

The format of this parameter begins with "Dataset:Dataset_id". In addition, you need to specify CSV data that contains column information as its header.
"Dataset_id" and "Column Infos" are divided by the line feed character CR/LF or LF.
		 * @param {boolean} bClear If this method is set to "true", the existing data will be deleted.
If this method is set to "false", the existing data will not be deleted.

The default value is "true".
		 * @returns {number} 
		 */
		loadCSV(varCsvData: object, bClear?: boolean): number;
		loadFromDataObject(): null;
		loadJSON(strJsonData: string, bClear?: boolean): number;
		/**
		 * This method is used to load items of data formatted in SSV onto a Dataset.
		 * @param {string} varSsvData It designates data items formatted in SSV.
		 * @param {boolean} bClear For "true", existing data in the Dataset will be removed.
For "false", existing data in the Dataset will not be removed.

The default value is "true".
		 * @returns {number} 
		 */
		loadSSV(varSsvData: string, bClear?: boolean): number;
		/**
		 * This method is used to load XML-formatted data onto a Dataset.
		 * @param {string} strXmlData This is a string that represents XML-formatted data.
		 * @param {boolean} bClear If this method is set to "true", the existing data will be deleted.
If this method is set to "false", the existing data will not be deleted.

The default value is "true".
		 * @returns {number} 
		 */
		loadXML(strXmlData: string, bClear?: boolean): number;
		/**
		 * This method finds the first row whose certain column value matches a given value. Then, this method returns the value from the specified column. This method excludes the rows that are filtered out from its search list.
		 * @param {(string|number)} varCol This parameter represents a column that will be searched to find a match for the value of the varCmpVal parameter. This parameter's value can be set with an ID, index number or regular expression.

You can use an assignment statement with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {string} varCmpVal This is a value that will be searched for in the column designated by the varCol parameter.
		 * @param {string} strOutputColID This a string representing the ID of a column from which this method will obtain a value that matches the value defined by the varCol parameter, which is included in the column designated by the varCmpVal parameter.
		 * @param {any[]} arrArgs This is an array of values that will replace an assignment statement defined by the strColID parameter.

In the format "$ + number", the number serves as an argument of the array.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {any} 
		 */
		lookup(varCol: string|number, varCmpVal: string, strOutputColID: string, arrArgs?: any[]): any;
		/**
		 * This method finds the first row whose certain column value begins a given value. Then, this method returns the value from the specified column. This method excludes the rows that are filtered out from its search list.
		 * @param {(string|number)} varCol This parameter represents a column that will be searched to find a match for the value of the varCmpVal parameter. This parameter's value can be set with an ID, index number or regular expression.

You can use an assignment statement with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {any} varCmpVal This is a value that will be searched for in the column designated by the varCol parameter.
		 * @param {string} strOutputColID This a string representing the ID of a column from which this method will obtain a value that begins with the value defined by the varCol parameter, which is included in the column designated by the varCmpVal parameter.
		 * @param {any[]} arrArgs This is an array of values that will replace an assignment statement defined by the strColID parameter.

In the format "$ + number", the number serves as an argument of the array.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {any} 
		 */
		lookupAs(varCol: string|number, varCmpVal: any, strOutputColID: string, arrArgs?: any[]): any;
		/**
		 * This method finds the first row whose certain column value begins a given value. Then, this method returns the value from the specified column. This method includes the rows that are filtered out in its search list.
		 * @param {(string|number)} varCol This parameter represents a column that will be searched to find a match for the value of the varCmpVal parameter. This parameter's value can be set with an ID, index number or regular expression.

You can use an assignment statement with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {any} varCmpVal This is a value that will be searched for in the column designated by the varCol parameter.
		 * @param {string} strOutputColID This a string representing the ID of a column from which this method will obtain a value that begins with the value defined by the varCol parameter, which is included in the column designated by the varCmpVal parameter.
		 * @param {any[]} arrArgs This is an array of values that will replace an assignment statement defined by the strColID parameter.

In the format "$ + number", the number serves as an argument of the array.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {any} 
		 */
		lookupAsNF(varCol: string|number, varCmpVal: any, strOutputColID: string, arrArgs?: any[]): any;
		/**
		 * This method finds the first row whose certain column value matches a given value. Then, this method returns the value from the specified column. This method includes the rows that are filtered out in its search list.
		 * @param {(string|number)} varCol This parameter represents a column that will be searched to find a match for the value of the varCmpVal parameter. This parameter's value can be set with an ID, index number or regular expression.

You can use an assignment statement with the format "$ + number".
The assignment is replaced with the value defined by the arrArgs parameter.
		 * @param {string} varCmpVal This is a value that will be searched for in the column designated by the varCol parameter.
		 * @param {string} strOutputColID This a string representing the ID of a column from which this method will obtain a value that matches the value defined by the varCol parameter, which is included in the column designated by the varCmpVal parameter.
		 * @param {any[]} arrArgs This is an array of values that will replace an assignment statement defined by the strColID parameter.

In the format "$ + number", the number serves as an argument of the array.
That is, "$0" and "$2" indicate arrArgs[0] and arrArgs[2] respectively.
		 * @returns {any} 
		 */
		lookupNF(varCol: string|number, varCmpVal: string, strOutputColID: string, arrArgs?: any[]): any;
		/**
		 * This method is used to integrate a specified Dataset into a current Dataset.
		 * @param {object} objDataset This is a Dataset object that will be merged into the current Dataset.
		 * @returns {number} 
		 */
		mergeData(objDataset: object): number;
		/**
		 * This method moves a certain row of a Dataset to a specified position.
		 * @param {number} nOldRow This is the current index number of a row that will be moved.

The index number of the first row is 0.
		 * @param {number} nNewRow This is the index number of a position to which the designated row will be moved.

The index number of the first row is 0.
		 * @returns {number} 
		 */
		moveRow(nOldRow: number, nNewRow: number): number;
		/**
		 * This method is used to remove a certain event that is declared in a Dataset.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the Dataset.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a Dataset.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a Dataset and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to restore the data of a Dataset to the last-saved state.
		 */
		reset(): null;
		/**
		 * This method is used to convert data of a Dataset into binary data.
		 * @param {string} strID A Dataset ID defined in a binary file to be created.
This parameter is used when you want to use a different ID from the original.

The default value is the ID of an original Dataset.
		 * @param {string} strSaveType It specifies which data entries will be converted in the binary format.

If you specify "n","N","normal" or "Normal", this method will convert all data except deleted ones.
If you specify "u","U","update" or "Update", this method will convert updated data.
If you specify "a","A","all" or "All", this method will convert all data including inserted, updated and deleted ones.

The default value is "Normal".
		 * @param {string} strSaveNaN This parameter determines how to convert a "NaN" value in a column whose type is INT, FLOAT or BIGDECIMAL.

If you specify "include", the value will be converted into "NaN" in the binary form.
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the savenan property will be applied instead.
		 * @param {string} strSaveInfinity This parameter determines how to convert an "Infinity" value in a column whose type is INT, FLOAT or BIGDECIMAL.

If you specify "include", the value will be converted into "Infinity" in the binary form.
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the saveinfinity property will be applied instead.
		 * @param {string} strSaveDate This parameter determines how to convert an invalid date value in a column whose type is DATE, TIME or DATETIME.

If you specify "include", the value will be converted into the string "Invalid Date".
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the saveinvaliddate property will be applied instead.
		 * @returns {string} 
		 */
		saveBIN(strID?: string, strSaveType?: string, strSaveNaN?: string, strSaveInfinity?: string, strSaveDate?: string): string;
		/**
		 * This method converts the data of a Dataset into the CSV format and returns the result.
		 * @param {string} strID This is a string representing a Dataset ID that will be defined in the resulting CSV file.
This parameter is required when the ID defined in the resulting file differs from the actual Dataset ID.

If omitted, the ID of the current Dataset will be applied.
		 * @param {string} strSaveNaN This parameter determines how to convert a "NaN" value in a column whose type is INT, FLOAT or BIGDECIMAL.

If you specify "include", the value will be converted into "NaN" in the CSV format.
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the savenan property will be applied instead.
		 * @param {string} strSaveInfinity This parameter determines how to convert an "Infinity" value in a column whose type is INT, FLOAT or BIGDECIMAL.

If you specify "include", the value will be converted into "Infinity" in the CSV format.
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the saveinfinity property will be applied instead.
		 * @param {string} strSaveDate This parameter determines how to convert an invalid date value in a column whose type is DATE, TIME or DATETIME.

If you specify "include", the value will be converted into the string "Invalid Date".
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the saveinvaliddate property will be applied instead.
		 * @returns {string} 
		 */
		saveCSV(strID?: string, strSaveNaN?: string, strSaveInfinity?: string, strSaveDate?: string): string;
		saveJSON(strID?: string, strSaveType?: string, strSaveNaN?: string, strSaveInfinity?: string, strSaveDate?: string): string;
		/**
		 * This method is used to convert data of a Dataset into SSV-formatted data.
		 * @param {string} strID A Dataset ID defined in a SSV  file to be created.
This parameter is used when you want to use a different ID from the original.

The default value is the ID of an original Dataset.
		 * @param {string} strSaveType It specifies which data entries will be converted in the SSV format.

If you specify "n","N","normal" or "Normal", this method will convert all data except deleted ones.
If you specify "u","U","update" or "Update", this method will convert updated data.
If you specify "a","A","all" or "All", this method will convert all data including inserted, updated and deleted ones.
If you specify "v","V","view" or "View" , this method will convert all data except deleted ones like the "Normal" value. However, this option converts data in the order shown in a Grid.

The default value is "Normal".
		 * @param {string} strSaveNaN This parameter determines how to convert a "NaN" value in a column whose type is INT, FLOAT or BIGDECIMAL.

If you specify "include", the value will be converted into "NaN" in the SSV format.
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the savenan property will be applied instead.
		 * @param {string} strSaveInfinity This parameter determines how to convert an "Infinity" value in a column whose type is INT, FLOAT or BIGDECIMAL.

If you specify "include", the value will be converted into "Infinity" in the SSV format.
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the saveinfinity property will be applied instead.
		 * @param {string} strSaveDate This parameter determines how to convert an invalid date value in a column whose type is DATE, TIME or DATETIME.

If you specify "include", the value will be converted into the string "Invalid Date".
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the saveinvaliddate property will be applied instead.
		 * @returns {string} 
		 */
		saveSSV(strID?: string, strSaveType?: string, strSaveNaN?: string, strSaveInfinity?: string, strSaveDate?: string): string;
		/**
		 * This method is used to convert data of a Dataset into XML-formatted data.
		 * @param {string} strID A Dataset ID defined in an XML file to be created.
This parameter is used when you want to use a different ID from the original.

The default value is the ID of an original Dataset.
		 * @param {string} strSaveType It specifies which data entries will be converted in the XML format.

If you specify "n","N","normal" or "Normal", this method will convert all data except deleted ones.
If you specify "u","U","update" or "Update", this method will convert updated data.
If you specify "a","A","all" or "All", this method will convert all data including inserted, updated and deleted ones.
If you specify "v","V","view" or "View" , this method will convert all data except deleted ones like the "Normal" value. However, this option converts data in the order shown in a Grid.

The default value is "Normal".
		 * @param {string} strSaveNaN This parameter determines how to convert a "NaN" value in a column whose type is INT, FLOAT or BIGDECIMAL.

If you specify "include", the value will be converted into "NaN" in the XML format.
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the savenan property will be applied instead.
		 * @param {string} strSaveInfinity This parameter determines how to convert an "Infinity" value in a column whose type is INT, FLOAT or BIGDECIMAL.

If you specify "include", the value will be converted into "Infinity" in the XML format.
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the saveinfinity property will be applied instead.
		 * @param {string} strSaveDate This parameter determines how to convert an invalid date value in a column whose type is DATE, TIME or DATETIME.

If you specify "include", the value will be converted into the string "Invalid Date".
If you specify "exclude", the value will be converted into an empty string ("").

If you omit this parameter, the value of the saveinvaliddate property will be applied instead.
		 * @returns {string} 
		 */
		saveXML(strID?: string, strSaveType?: string, strSaveNaN?: string, strSaveInfinity?: string, strSaveDate?: string): string;
		/**
		 * This method changes the column value of a certain row while excluding the rows that are filtered out.
		 * @param {number} nRow It is the index number of a row whose column value you want to change.

The index number of the beginning row is 0.
		 * @param {number} nColIdx It is the index number of a column whose value you want to change.
		 * @param {any} varVal It is a value that you want to set for the column.
		 * @returns {boolean} 
		 */
		setColumn(nRow: number, nColIdx: number, varVal: any): boolean;
		/**
		 * This method changes the column value of a certain row while excluding the rows that are filtered out.
		 * @param {number} nRow It is the index number of a row whose column value you want to change.

The index number of the beginning row is 0.
		 * @param {string} strColID It is the ID of a column whose value will be changed.
		 * @param {any} varVal It is a value that you want to set for the column.
		 * @returns {boolean} 
		 */
		setColumn(nRow: number, strColID: string, varVal: any): boolean;
		/**
		 * This method changes the column value of a certain row while including the rows that are filtered out.
		 * @param {number} nRow It is the index number of a row whose column value you want to change.

The index number of the beginning row is 0.
		 * @param {number} nColIdx It is the index number of a column whose value you want to change.
		 * @param {any} varVal It is a value that you want to set for the column.
		 * @returns {boolean} 
		 */
		setColumnNF(nRow: number, nColIdx: number, varVal: any): boolean;
		/**
		 * This method changes the column value of a certain row while including the rows that are filtered out.
		 * @param {number} nRow It is the index number of a row whose column value you want to change.

The index number of the beginning row is 0.
		 * @param {string} strColID It is the ID of a column whose value will be changed.
		 * @param {any} varVal It is a value that you want to set for the column.
		 * @returns {boolean} 
		 */
		setColumnNF(nRow: number, strColID: string, varVal: any): boolean;
		/**
		 * This method is used to change the constant of a const column defined in a Dataset.
		 * @param {number} nColIdx This is the index number of the const column whose constant will be changed.
		 * @param {any} varVal This is a value that will replace the existing constant.
		 * @returns {boolean} 
		 */
		setConstColumn(nColIdx: number, varVal: any): boolean;
		/**
		 * This method is used to change the constant of a const column defined in a Dataset.
		 * @param {string} strColID This is a string representing the ID of the const column whose constant will be changed.
		 * @param {any} varVal This is a value that will replace the existing constant.
		 * @returns {boolean} 
		 */
		setConstColumn(strColID: string, varVal: any): boolean;
		setContents(strContents: any): boolean;
		/**
		 * This method is used to change the first handler in a certain event of a Dataset.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a Dataset.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the type of a certain row while excluding the rows that are filtered out from its search list.
		 * @param {number} nRow It is the index number of a row whose type you want to change.
		 * @param {number} nRowType It is a number indicating the row type specified for the designated row.
		 * @returns {boolean} 
		 */
		setRowType(nRow: number, nRowType: number): boolean;
		/**
		 * This method is used to change the type of a certain row while excluding the rows that are filtered out from its search list.
		 * @param {number} nRow It is the index number of a row whose type you want to change.
		 * @param {string} strRowType It is text indicating the row type specified for the designated row.

If you specify "i" or "I", it indicates "Dataset.ROWTYPE_INSERT".
If you specify "u" or "U", it indicates "Dataset.ROWTYPE_UPDATE".
If you specify "d" or "D", it indicates "Dataset.ROWTYPE_DELETE".

If you specify a value other than the above-mentioned ones, this method will work as if the value is "Dataset.ROWTYPE_NORMAL".
		 * @returns {boolean} 
		 */
		setRowType(nRow: number, strRowType: string): boolean;
		/**
		 * This method is used to change the type of a certain row while including the rows that are filtered out in its search list.
		 * @param {number} nRow It is the index number of a row whose type you want to change.
		 * @param {number} nRowType It is a number indicating the row type specified for the designated row.
		 * @returns {boolean} 
		 */
		setRowTypeNF(nRow: number, nRowType: number): boolean;
		/**
		 * This method is used to change the type of a certain row while including the rows that are filtered out in its search list.
		 * @param {number} nRow It is the index number of a row whose type you want to change.
		 * @param {string} strRowType It is text indicating the row type specified for the designated row.

If you specify "i" or "I", it indicates "Dataset.ROWTYPE_INSERT".
If you specify "u" or "U", it indicates "Dataset.ROWTYPE_UPDATE".
If you specify "d" or "D", it indicates "Dataset.ROWTYPE_DELETE".

If you specify a value other than the above-mentioned ones, this method will work as if the value is "Dataset.ROWTYPE_NORMAL".
		 * @returns {boolean} 
		 */
		setRowTypeNF(nRow: number, strRowType: string): boolean;
		/**
		 * This method is used to change the ID of a column--including a const column--defined in a Dataset.
		 * @param {number} nCol This is the index number of the column whose ID will be changed.

The index number of the first column is 0.
		 * @param {string} strNewColID This is a string that represents a new ID.
		 * @returns {number} 
		 */
		updateColID(nCol: number, strNewColID: string): number;
		/**
		 * This method is used to change the ID of a column--including a const column--defined in a Dataset.
		 * @param {string} strOldColID This is a string representing the ID of the column whose ID will be changed.
		 * @param {string} strNewColID This is a string that represents a new ID.
		 * @returns {number} 
		 */
		updateColID(strOldColID: string, strNewColID: string): number;
		/**
		 * This method is used to change the ID of a const column defined in a Dataset.
		 * @param {number} nCol This is the index number of the const column whose ID will be changed.

The index number of the first column is 0.
		 * @param {string} strNewColID This is a string that represents a new ID.
		 * @returns {number} 
		 */
		updateConstColID(nCol: number, strNewColID: string): number;
		/**
		 * This method is used to change the ID of a const column defined in a Dataset.
		 * @param {string} strOldColID This is a string representing the ID of the const column whose ID will be changed.
		 * @param {string} strNewColID This is a string that represents a new ID.
		 * @returns {number} 
		 */
		updateConstColID(strOldColID: string, strNewColID: string): number;
		/**
		 * This method is used to group or sort the data loaded onto a Dataset.
		 * @param {string} strKeyString It is a string representing an expression to group or sort data.

If you omit this parameter, the value of the keystring property will apply.
		 * @returns {boolean} 
		 */
		updateSortGroup(strKeyString?: string): boolean;
	}
}

