// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    VideoPlayer: nexacro.VideoPlayer;
}

    
declare namespace nexacro {
    type VideoPlayerOmitKeys = 'background'|'borderRadius'|'boxShadow'|'color'|'cursor'|'expr'|'font'|'hotkey'|'id'|'initvalueid'|'letterSpacing'|'edge'|'padding'|'-nexa-rtl-background-image'|'-nexa-rtl-edge-image'|'textAlign'|'textDecoration'|'verticalAlign'|'wordWrap'|'opacity'|'rtl'|'text'|'tooltiptext'|'tooltiptype'|'vr360mode'|'wordSpacing'|'bringToFront'|'bringToPrev'|'getDisplayText'|'getFocus'|'moveToNext'|'moveToPrev'|'sendToBack'|'sendToNext'|'setFocus'|'onclick'|'oncontextmenu'|'ondblclick'|'ondrag'|'ondragenter'|'ondragleave'|'ondragmove'|'ondrop'|'oninput'|'onkeydown'|'onkeyup'|'onkillfocus'|'onlbuttondown'|'onlbuttonup'|'onmousedown'|'onmouseenter'|'onmouseleave'|'onmousemove'|'onmouseup'|'onmousewheel'|'onrbuttondown'|'onrbuttonup'|'onsetfocus'|'ontouchend'|'ontouchmove'|'ontouchstart';
	
	interface VideoPlayer extends Omit<nexacro.Component, VideoPlayerOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.VideoPlayer;
	    /**
		 * This property is used to specify the action printed as an accessibility feature when a selection box moves to a VideoPlayer.
		 */
		readonly accessibilityaction?: string;
		/**
		 * This property is used to determine whether to print accessibility features of the children when a selection box moves to a VideoPlayer.
		 */
		readonly accessibilitydesclevel?: nexacro.Enum.DescLevel;
		/**
		 * This property is used to specify the description printed as an accessibility feature when a selection box moves to a VideoPlayer.
		 */
		readonly accessibilitydescription?: string;
		/**
		 * This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a VideoPlayer.
		 */
		readonly accessibilityenable?: boolean;
		/**
		 * This property is used to specify the label printed as an accessibility feature when a selection box moves to a VideoPlayer.
		 */
		readonly accessibilitylabel?: string;
		/**
		 * This property is used to set the role of a VideoPlayer. The role is printed as accessibility functionality when a selection box moves to the component.
		 */
		readonly accessibilityrole?: nexacro.Enum.Role;
		/**
		 * This read-only property holds a aspect ration of a video file loaded onto a VideoPlayer component.
		 */
		readonly aspectratio?: any;
		/**
		 * This property is used to determine whether to play a loaded file automatically in a VideoPlayer.
		 */
		readonly autoplay?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a VideoPlayer's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the style of a VideoPlayer by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the playback position of a video file in a VideoPlayer.
		 */
		readonly currenttime?: number;
		/**
		 * This read-only property holds the total duration of a video file loaded onto a VideoPlayer.
		 */
		readonly duration?: any;
		/**
		 * This property is used to determine whether to enable a VideoPlayer.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a VideoPlayer.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property is used to specify the height of a VideoPlayer.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to specify the value of the point that indicates the position of a VideoPlayer's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the maximum height of a VideoPlayer for the component to be displayed on the screen.
		 */
		readonly maxheight?: number;
		/**
		 * This property is used to set the maximum width of a VideoPlayer for the component to be displayed on the screen.
		 */
		readonly maxwidth?: number;
		/**
		 * This property is used to set the minimum height of a VideoPlayer for the component to be displayed on the screen.
		 */
		readonly minheight?: number;
		/**
		 * This property is used to set the minimum width of a VideoPlayer for the component to be displayed on the screen.
		 */
		readonly minwidth?: number;
		/**
		 * This property is used to determine whether to mute a video file in a VideoPlayer.
		 */
		readonly mute?: boolean;
		/**
		 * This property is used to specify the name of a VideoPlayer.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a VideoPlayer.
		 */
		readonly border?: string;
		/**
		 * This read-only property holds the parent object of a VideoPlayer.
		 */
		readonly parent?: object;
		/**
		 * This property is used to specify the index number of a step page where a VideoPlayer is displayed if the parent object uses the step feature.
		 */
		readonly positionstep?: number;
		/**
		 * This property is used to determine whether to repeat a video file in a VideoPlayer component.
		 */
		readonly repeat?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a VideoPlayer's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to determine whether to display the default UI (ControlBar) in a VideoPlayer.
		 */
		readonly showcontrolbar?: boolean;
		/**
		 * This property is used to define the tab order number of a VideoPlayer. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 */
		readonly taborder?: number;
		/**
		 * This property determines whether a VideoPlayer receives focus when you move the focus between components by pressing the tab key.
		 */
		readonly tabstop?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a VideoPlayer's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to specify a video file to be played in a VideoPlayer component.
		 */
		readonly url?: string;
		/**
		 * This read-only property holds the actual width and height of a video file loaded onto a VideoPlayer component, in the form of an array.
		 */
		readonly videosize?: object;
		/**
		 * This property is used to determine whether to make a VideoPlayer visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to set the volume of a VideoPlayer.
		 */
		readonly volume?: number;
		/**
		 * This property is used to set the width of a VideoPlayer.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This event occurs when the playback position changes.
		 */
		readonly oncurrenttimechanged?: nexacro.EventObject<nexacro.VideoPlayer, nexacro.VideoCurrentTimeChangedEventInfo>;
		/**
		 * This error occurs when a VideoPlayer component fails to process a video file.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.VideoPlayer, nexacro.VideoErrorEventInfo>;
		/**
		 * This event occurs when the position of a VideoPlayer changes.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.VideoPlayer, nexacro.MoveEventInfo>;
		/**
		 * This event occurs when the status of playing a video file changes in a VideoPlayer component.
		 */
		readonly onplaystatuschanged?: nexacro.EventObject<nexacro.VideoPlayer, nexacro.VideoPlayStateChangedEventInfo>;
		/**
		 * This event occurs when the size of a VideoPlayer changes.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.VideoPlayer, nexacro.SizeEventInfo>;
		/**
		 * @param {string} v This property is used to specify the action printed as an accessibility feature when a selection box moves to a VideoPlayer.
		 * @returns {void} 
		 */
		set_accessibilityaction(v: string): void;
		/**
		 * @param {nexacro.Enum.DescLevel} v This property is used to determine whether to print accessibility features of the children when a selection box moves to a VideoPlayer.
		 * @returns {void} 
		 */
		set_accessibilitydesclevel(v: nexacro.Enum.DescLevel): void;
		/**
		 * @param {string} v This property is used to specify the description printed as an accessibility feature when a selection box moves to a VideoPlayer.
		 * @returns {void} 
		 */
		set_accessibilitydescription(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a VideoPlayer.
		 * @returns {void} 
		 */
		set_accessibilityenable(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the label printed as an accessibility feature when a selection box moves to a VideoPlayer.
		 * @returns {void} 
		 */
		set_accessibilitylabel(v: string): void;
		/**
		 * @param {nexacro.Enum.Role} v This property is used to set the role of a VideoPlayer. The role is printed as accessibility functionality when a selection box moves to the component.
		 * @returns {void} 
		 */
		set_accessibilityrole(v: nexacro.Enum.Role): void;
		/**
		 * @param {boolean} v This property is used to determine whether to play a loaded file automatically in a VideoPlayer.
		 * @returns {void} 
		 */
		set_autoplay(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a VideoPlayer's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {string} v This property is used to set the style of a VideoPlayer by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {number} v This property is used to set the playback position of a video file in a VideoPlayer.
		 * @returns {void} 
		 */
		set_currenttime(v: number): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a VideoPlayer.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a VideoPlayer.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the height of a VideoPlayer.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a VideoPlayer's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {number} v This property is used to set the maximum height of a VideoPlayer for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the maximum width of a VideoPlayer for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxwidth(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum height of a VideoPlayer for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum width of a VideoPlayer for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minwidth(v: number): void;
		/**
		 * @param {boolean} v This property is used to determine whether to mute a video file in a VideoPlayer.
		 * @returns {void} 
		 */
		set_mute(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the name of a VideoPlayer.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a VideoPlayer.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {number} v This property is used to specify the index number of a step page where a VideoPlayer is displayed if the parent object uses the step feature.
		 * @returns {void} 
		 */
		set_positionstep(v: number): void;
		/**
		 * @param {boolean} v This property is used to determine whether to repeat a video file in a VideoPlayer component.
		 * @returns {void} 
		 */
		set_repeat(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a VideoPlayer's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {boolean} v This property is used to determine whether to display the default UI (ControlBar) in a VideoPlayer.
		 * @returns {void} 
		 */
		set_showcontrolbar(v: boolean): void;
		/**
		 * @param {number} v This property is used to define the tab order number of a VideoPlayer. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 * @returns {void} 
		 */
		set_taborder(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a VideoPlayer receives focus when you move the focus between components by pressing the tab key.
		 * @returns {void} 
		 */
		set_tabstop(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a VideoPlayer's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {string} v This property is used to specify a video file to be played in a VideoPlayer component.
		 * @returns {void} 
		 */
		set_url(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a VideoPlayer visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {number} v This property is used to set the volume of a VideoPlayer.
		 * @returns {void} 
		 */
		set_volume(v: number): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to set the width of a VideoPlayer.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * This method is used to declare a certain event and then add it to a VideoPlayer.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the VideoPlayer.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a VideoPlayer.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a VideoPlayer as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to delete a VideoPlayer that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method finds a handler in a certain event of a VideoPlayer and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns a specific handler from a certain event of a VideoPlayer by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method is used to obtain the bottom position of a VideoPlayer in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * This method is used to obtain the height of a VideoPlayer in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the left position of a VideoPlayer in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * This method is used to obtain the right position of a VideoPlayer in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * This method is used to obtain the top position of a VideoPlayer in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * This method is used to obtain the width of a VideoPlayer in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method returns the value of a VideoPlayer's bottom property in pixel.
		 * @returns {number} 
		 */
		getPixelBottom(): number;
		/**
		 * This method returns the height of a VideoPlayer in pixel.
		 * @returns {number} 
		 */
		getPixelHeight(): number;
		/**
		 * This method returns the value of a VideoPlayer's left property in pixel.
		 * @returns {number} 
		 */
		getPixelLeft(): number;
		/**
		 * This method returns the value of a VideoPlayer's right property in pixel.
		 * @returns {number} 
		 */
		getPixelRight(): number;
		/**
		 * This method returns the value of a VideoPlayer's top property in pixel.
		 * @returns {number} 
		 */
		getPixelTop(): number;
		/**
		 * This method returns the width of a VideoPlayer in pixel.
		 * @returns {number} 
		 */
		getPixelWidth(): number;
		/**
		 * This method is used to initialize a VideoPlayer after creating it in a script dynamically.
		 * @param {string} strName It sets the ID of a VideoPlayer in the form of a string.
		 * @param {(string|number)} vLeft It specifies the value of the left property of a VideoPlayer in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop It specifies the value of the top property of a VideoPlayer in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth It specifies the value of the width property of a VideoPlayer in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight It specifies the value of the height property of a VideoPlayer in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight It specifies the value of the right property of a VideoPlayer in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom It specifies the value of the bottom property of a VideoPlayer in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vMinWidth It specifies a VideoPlayer's minimum width that can be displayed in the Form.
		 * @param {(string|number)} vMaxWidth It specifies a VideoPlayer's maximum width that can be displayed in the Form.

If this value is smaller than vMinWidth, it will be replaced by the value of vMinWidth.
		 * @param {(string|number)} vMinHeight It specifies a VideoPlayer's minimum height that can be displayed in the Form.
		 * @param {(string|number)} vMaxHeight It specifies a VideoPlayer's maximum height that can be displayed in the Form.

If this value is smaller than vMinHeight, it will be replaced by the value of vMinHeight.
		 */
		init(strName: string, vLeft: string|number, vTop: string|number, vWidth: string|number, vHeight: string|number, vRight?: string|number, vBottom?: string|number, vMinWidth?: string|number, vMaxWidth?: string|number, vMinHeight?: string|number, vMaxHeight?: string|number): null;
		/**
		 * This method is used to add a handler to a certain event of a VideoPlayer at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to change the position and size of a VideoPlayer.
		 * @param {(string|number)} vLeft This parameter defines the value of the left property of a VideoPlayer in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop This parameter defines the value of the top property of a VideoPlayer in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth This parameter defines the value of the width property of a VideoPlayer in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight This parameter defines the value of the height property of a VideoPlayer in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight This parameter defines the value of the right property of a VideoPlayer in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom This parameter defines the value of the bottom property of a VideoPlayer in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 */
		move(vLeft: string|number, vTop: string|number, vWidth?: string|number, vHeight?: string|number, vRight?: string|number, vBottom?: string|number): null;
		/**
		 * This method is used to pause a video file played by a VideoPlayer component.
		 */
		pause(): null;
		/**
		 * This method is used to play a video file loaded onto a VideoPlayer object.
		 */
		play(): null;
		/**
		 * This method is used to remove a certain event that is declared in a VideoPlayer.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the VideoPlayer.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a VideoPlayer.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a VideoPlayer and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the size of a VideoPlayer.
		 * @param {(string|number)} vWidth This is the width of the VideoPlayer, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the width while the base component is ignored.
If you specify a number in percentage, the width of the VideoPlayer will be determined in proportion to the width of the base component.
		 * @param {(string|number)} vHeight This is the height of the VideoPlayer, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the height while the base component is ignored.
If you specify a number in percentage, the height of the VideoPlayer will be determined in proportion to the height of the base component.
		 */
		resize(vWidth: string|number, vHeight: string|number): null;
		/**
		 * This method is used to bring the playback position of a video file to the beginning. The file is the one loaded onto a VideoPlayer component.
		 */
		rewind(): null;
		/**
		 * This method is used to change the first handler in a certain event of a VideoPlayer.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a VideoPlayer.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to specify the bottom position of a VideoPlayer in pixel, based on the parent component's top position.
		 * @param {number} nBottom It is a pixel value representing the bottom position of a VideoPlayer, calculated based on the parent component's top position.
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * This method is used to specify the height of a VideoPlayer in pixel.
		 * @param {number} nHeight It is a pixel value representing the height of a VideoPlayer.
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * This method is used to specify the left position of a VideoPlayer in pixel, based on the parent component's left position.
		 * @param {number} nLeft It is a pixel value representing the left position of a VideoPlayer, calculated based on the parent component's left position.
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * This method is used to specify the right position of a VideoPlayer in pixel, based on the parent component's left position.
		 * @param {number} nRight It is a pixel value representing the right position of a VideoPlayer, calculated based on the parent component's left position.
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * This method is used to specify the top position of a VideoPlayer in pixel, based on the parent component's top position.
		 * @param {number} nTop It is a pixel value representing the top position of a VideoPlayer, calculated based on the parent component's top position.
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * This method is used to specify the width of a VideoPlayer in pixel.
		 * @param {number} nWidth It is a pixel value representing the width of a VideoPlayer.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * This method is used to display a VideoPlayer on the screen. The VideoPlayer mentioned here refers to the one that is dynamically created through a script.
		 */
		show(): null;
		/**
		 * This method is used for a VideoPlayer component to stop playing a video file and move the playback position to the beginning.
		 */
		stop(): null;
	}
}

