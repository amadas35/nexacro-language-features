// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    FileUpTransfer: nexacro.FileUpTransfer;
}

    
declare namespace nexacro {
    type FileUpTransferOmitKeys = 'id';
	
	interface FileUpTransfer extends Omit<nexacro.EventSinkObject, FileUpTransferOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.FileUpTransfer;
	    /**
		 * This read-only property holds a collection that contains the information on the files to be uploaded from a FileUpTransfer to the server.
		 */
		readonly filelist?: object;
		/**
		 * This property is used to specify the name of a FileUpTransfer.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the data that will be sent to the server. The data, which takes the form of a collection, is used to request file upload.
		 */
		readonly postdatalist?: object;
		/**
		 * This property is used to define a server location onto which a FileUpTransfer will upload files.
		 */
		readonly url?: string;
		/**
		 * This event occurs when file upload fails or an error code is returned.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.FileUpTransfer, nexacro.FileUpTransferErrorEventInfo>;
		/**
		 * This event occurs at regular intervals while files are uploaded.
		 */
		readonly onprogress?: nexacro.EventObject<nexacro.FileUpTransfer, nexacro.FileUpTransferProgressEventInfo>;
		/**
		 * This event occurs when a success code is delivered after the uploading of files.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.FileUpTransfer, nexacro.FileUpTransferEventInfo>;
		/**
		 * @param {string} v This property is used to specify the name of a FileUpTransfer.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to define a server location onto which a FileUpTransfer will upload files.
		 * @returns {void} 
		 */
		set_url(v: string): void;
		/**
		 * This method is used to declare a certain event and then add it to a FileUpTransfer.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the FileUpTransfer.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a FileUpTransfer.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a FileUpTransfer as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to add a file item to the end position of the filelist property.
		 * @param {string} strID This is a string representing the ID of a file to add to the filelist property.

This parameter is used as the value of the name parameter for file uploading.
		 * @param {object} objVFile This is a VirtualFile object containing the information on the file that will be added to the filelist property.
		 * @returns {number} 
		 */
		addFile(strID: string, objVFile: object): number;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to delete all the file items held by the filelist property.
		 */
		clearFileList(): null;
		/**
		 * This method is used to remove all the entries of the data set by the postdatalist property.
		 */
		clearPostDataList(): null;
		/**
		 * This method is used to delete a FileUpTransfer that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method returns the existence of a file item that matches a VirtualFile object delivered as an argument. The file item here is held by the filelist property.
		 * @param {object} objVFile This is a VirtualFile object containing the information on the file whose existence will be checked.
		 * @returns {boolean} 
		 */
		existFile(objVFile: object): boolean;
		/**
		 * This method finds a handler in a certain event of a FileUpTransfer and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns a specific handler from a certain event of a FileUpTransfer by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method returns an array whose elements are VirtualFile objects that match specified file names. The specified files are among the file items held by the filelist property.
		 * @param {string} strFileName This is a string representing the names of files whose information will be returned.
		 * @returns {any[]} 
		 */
		getFileArrayByFileName(strFileName: string): any[];
		/**
		 * This method returns an array whose elements are index numbers of the file items that match specified file names. The file items here are held by the filelist property.
		 * @param {string} strFileName This is a string representing the names of files whose index numbers will be returned.
		 * @returns {object} 
		 */
		getIndexArrayByFileName(strFileName: string): object;
		/**
		 * This method returns the entry of a certain key from the data set by the postdatalist property.
		 * @param {string} strKey This is a string representing the key of the data entry that will be returned.
		 * @returns {any} 
		 */
		getPostData(strKey: string): any;
		/**
		 * This method is used to add a handler to a certain event of a FileUpTransfer at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to remove a certain event that is declared in a FileUpTransfer.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the FileUpTransfer.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a FileUpTransfer.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a FileUpTransfer and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to remove a file item that matches a VirtualFile object delivered as an argument. The file item here is held by the filelist property.
		 * @param {string} strID This is a string that represents the ID of a file to remove from the filelist property.
		 * @returns {number} 
		 */
		removeFile(strID: string): number;
		/**
		 * This method is used to remove a file item whose index number matches a number delivered as an argument. The file item here is held by the filelist property.
		 * @param {number} nIndex This is a number representing the index number of a file item that will be removed. The file item here is held by the filelist property.

If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @returns {number} 
		 */
		removeFileByIndex(nIndex: number): number;
		/**
		 * This method is used to remove the entry of a certain key from the data set by the postdatalist property.
		 * @param {string} strKey This is a string representing the key of the data entry that will be removed.
		 */
		removePostData(strKey: string): null;
		/**
		 * This method is used to change the first handler in a certain event of a FileUpTransfer.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a FileUpTransfer.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change a file item that is held by the filelist property. The index number of the item is delivered as an argument.
		 * @param {number} nIndex This is a number representing the index number of a file item that will be changed. The file item here is held by the filelist property.

If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objVFile This is a VirtualFile object containing the information on the file that will replace the existing file item.
		 * @returns {boolean} 
		 */
		setFile(nIndex: number, objVFile: object): boolean;
		/**
		 * This method is used to add data to the postdatalist property, whose data will be sent to the server to request file upload.
		 * @param {string} strKey This is a string representing the key of the data entry that will be sent to the server.

If there exists already an entry of the same key, the entry will be replaced with the new data.
		 * @param {any} varVal This is data that will be sent to the server.

You can use basic data types like number, string and Boolean.
		 */
		setPostData(strKey: string, varVal: any): null;
		/**
		 * This method is used to upload the files set by the filelist property in the "POST" manner by using the HTTP/HTTPS protocol.
		 * @param {string} strUrl It is a string that represents the server location onto which files will be uploaded.

If you omit this parameter, the value of the url property will be applied instead.
If you specify this parameter, the url property will be ignored.
		 */
		upload(strUrl?: string): null;
	}
}

