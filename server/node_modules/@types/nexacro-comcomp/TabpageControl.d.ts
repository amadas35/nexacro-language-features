// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    Tabpage: nexacro.TabpageControl;
}

    
declare namespace nexacro {
    type TabpageControlOmitKeys = 'bottom'|'boxShadow'|'expr'|'height'|'id'|'initvalueid'|'left'|'maxheight'|'maxwidth'|'minheight'|'minwidth'|'padding'|'textAlign'|'textDecoration'|'verticalAlign'|'wordWrap'|'parent'|'positionstep'|'right'|'taborder'|'tabstop'|'top'|'urlchangeeffect'|'visible'|'width'|'bringToFront'|'bringToPrev'|'destroy'|'getDisplayText'|'getFocus'|'getOffsetBottom'|'getOffsetHeight'|'getOffsetLeft'|'getOffsetRight'|'getOffsetTop'|'getOffsetWidth'|'getPixelBottom'|'getPixelHeight'|'getPixelLeft'|'getPixelRight'|'getPixelTop'|'getPixelWidth'|'init'|'move'|'moveToNext'|'moveToPrev'|'resize'|'sendToBack'|'sendToNext'|'setOffsetBottom'|'setOffsetHeight'|'setOffsetLeft'|'setOffsetRight'|'setOffsetTop'|'setOffsetWidth'|'show'|'onclick'|'ondblclick'|'oninput';
	
	interface TabpageControl extends Omit<nexacro.Div, TabpageControlOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.TabpageControl;
	    /**
		 * This property is used to specify the action printed as an accessibility feature when a selection box moves to a TabpageControl.
		 */
		readonly accessibilityaction?: string;
		/**
		 * This property is used to determine whether to print accessibility features of the children when a selection box moves to a TabpageControl.
		 */
		readonly accessibilitydesclevel?: nexacro.Enum.DescLevel;
		/**
		 * This property is used to specify the description printed as an accessibility feature when a selection box moves to a TabpageControl.
		 */
		readonly accessibilitydescription?: string;
		/**
		 * This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a TabpageControl.
		 */
		readonly accessibilityenable?: boolean;
		/**
		 * This property is used to specify the label printed as an accessibility feature when a selection box moves to a TabpageControl.
		 */
		readonly accessibilitylabel?: string;
		/**
		 * This property is used to set the role of a TabpageControl. The role is printed as accessibility functionality when a selection box moves to the component.
		 */
		readonly accessibilityrole?: nexacro.Enum.Role;
		/**
		 * This property is used to determine how to load a Form onto a TabPageControl component when the value of the url property is dynamically changed.
		 */
		readonly async?: boolean;
		/**
		 * This property is used to set the background of a TabpageControl.
		 */
		readonly background?: string;
		/**
		 * This property is used to set the shape of the corners of a TabpageControl.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to set the color of the text displayed in a TabpageControl.
		 */
		readonly color?: string;
		/**
		 * This property is used to set the style of a TabpageControl by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a TabpageControl.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to determine whether to enable a TabpageControl.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a TabpageControl.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property sets a font used for a TabpageControl.
		 */
		readonly font?: string;
		/**
		 * This read-only property holds a Form that has all the objects subordinate to a TabpageControl.
		 */
		readonly form?: any;
		/**
		 * This property is used to specify the minimum size of the track bar featured by the scrollbar of the Form displayed inside a TabpageControl.
		 */
		readonly formscrollbarbarminsize?: number;
		/**
		 * This property is used to set the base size of a scrollbar where the track bar will disappear if the scrollbar becomes smaller than the specified size. This property is applicable to the scrollbar of the Form within a TabpageControl.
		 */
		readonly formscrollbarbaroutsize?: number;
		/**
		 * This property is used to size the decreasing button (DecButton control) of the scrollbar of a Form displayed within a TabpageControl.
		 */
		readonly formscrollbardecbuttonsize?: number;
		/**
		 * This property is used to size the increasing button (IncButton control) of the scrollbar of a Form displayed within a TabpageControl.
		 */
		readonly formscrollbarincbuttonsize?: number;
		/**
		 * This property is used to size the scrollbar of a Form displayed within a TabpageControl.
		 */
		readonly formscrollbarsize?: number;
		/**
		 * This property is used to size the track bar featured by the scrollbar of a Form displayed within a TabpageControl.
		 */
		readonly formscrollbartrackbarsize?: number;
		/**
		 * This property determines how scrollbars work in a Form displayed within a TabpageControl.
		 */
		readonly formscrollbartype?: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`;
		/**
		 * This property is used to size the scroll indicator bars of a Form displayed within a TabpageControl.
		 */
		readonly formscrollindicatorsize?: number;
		/**
		 * This property is used to set the types of scrolling applied to a Form that is displayed within a TabpageControl.
		 */
		readonly formscrolltype?: nexacro.Enum.ScrollType;
		/**
		 * This property is used to set a hotkey for moving focus to a TabpageControl.
		 */
		readonly hotkey?: nexacro.Enum.HotKeyModifier;
		/**
		 * This property is used to set the spacing between characters (kerning) displayed in a TabpageControl.
		 */
		readonly letterSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This property is used to specify the name of a TabpageControl.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a Tabpage control.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a TabpageControl.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the opacity of a TabpageControl.
		 */
		readonly opacity?: number;
		/**
		 * This property is used to define the direction of printing internal contents or components in a TabpageControl.
		 */
		readonly rtl?: boolean;
		/**
		 * This property is used to set the style of the TabButton of a TabpageControl by using a class defined in the relevant XCSS file.
		 */
		readonly tabbuttoncssclass?: string;
		/**
		 * This property is used to specify the height of the TabButton of a TabpageControl.
		 */
		readonly tabbuttonheight?: number;
		/**
		 * This property is used to specify the width of the TabButton of a TabpageControl.
		 */
		readonly tabbuttonwidth?: number;
		/**
		 * This property is used to specify the text to display on a tab button.
		 */
		readonly text?: string;
		/**
		 * This property is used to specify the text of a tooltip that apeears when a mouse pointer hovers over a TabpageControl.
		 */
		readonly tooltiptext?: string;
		/**
		 * This property is used to specify the position and type of a tooltip that appears in a TabpageControl.
		 */
		readonly tooltiptype?: nexacro.Enum.TooltipType;
		/**
		 * This property is used to connect a Form to a TabPage.
		 */
		readonly url?: string;
		/**
		 * This property is used to set the spacing between words displayed in a TabpageControl.
		 */
		readonly wordSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This event occurs when you right-click a TabpageControl or touch a TabpageControl for a certain duration.
		 */
		readonly oncontextmenu?: nexacro.EventObject<TabpageControl, nexacro.ContextMenuEventInfo>;
		readonly ondevicebuttonup?: nexacro.EventObject<TabpageControl, nexacro.DeviceButtonEventInfo>;
		/**
		 * This event occurs when you conduct a dragging action by pressing the left button of a mousewithin a TabpageControl.
		 */
		readonly ondrag?: nexacro.EventObject<TabpageControl, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a TabpageControl while the pointer is dragging an object.
		 */
		readonly ondragenter?: nexacro.EventObject<TabpageControl, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a TabpageControl while the pointer is dragging an object.
		 */
		readonly ondragleave?: nexacro.EventObject<TabpageControl, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves while the pointer is dragging an object within a TabpageControl.
		 */
		readonly ondragmove?: nexacro.EventObject<TabpageControl, nexacro.DragEventInfo>;
		/**
		 * This event occurs when you release a mouse button within the area of a TabpageControl after you have pressed the button to drag an object.
		 */
		readonly ondrop?: nexacro.EventObject<TabpageControl, nexacro.DragEventInfo>;
		/**
		 * This event occurs when you move the horizontal scrollbar of a TabpageControl.
		 */
		readonly onhscroll?: nexacro.EventObject<TabpageControl, nexacro.ScrollEventInfo>;
		/**
		 * This event occurs when you press a key with a TabpageControl focused.
		 */
		readonly onkeydown?: nexacro.EventObject<TabpageControl, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when you release a key with a TabpageControl focused.
		 */
		readonly onkeyup?: nexacro.EventObject<TabpageControl, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when focus moves out of a TabpageControl.
		 */
		readonly onkillfocus?: nexacro.EventObject<TabpageControl, nexacro.KillFocusEventInfo>;
		/**
		 * This event occurs when you press the left button of a mouse within the area of a TabpageControl.
		 */
		readonly onlbuttondown?: nexacro.EventObject<TabpageControl, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release the left button of a mouse within the area of a TabpageControl.
		 */
		readonly onlbuttonup?: nexacro.EventObject<TabpageControl, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you press a button other than the left and right buttons of a mouse within the area of a TabpageControl.
		 */
		readonly onmousedown?: nexacro.EventObject<TabpageControl, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a TabpageControl.
		 */
		readonly onmouseenter?: nexacro.EventObject<TabpageControl, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a TabpageControl.
		 */
		readonly onmouseleave?: nexacro.EventObject<TabpageControl, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves within a TabpageControl.
		 */
		readonly onmousemove?: nexacro.EventObject<TabpageControl, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release a button other than the left and right buttons of a mouse.
		 */
		readonly onmouseup?: nexacro.EventObject<TabpageControl, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you rotates your mouse wheel within a TabpageControl.
		 */
		readonly onmousewheel?: nexacro.EventObject<TabpageControl, nexacro.MouseWheelEventInfo>;
		/**
		 * This event occurs when the position of a TabpageControl changes.
		 */
		readonly onmove?: nexacro.EventObject<TabpageControl, nexacro.MoveEventInfo>;
		/**
		 * This event occurs when you press the right button of a mouse within the area of a TabpageControl.
		 */
		readonly onrbuttondown?: nexacro.EventObject<TabpageControl, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release the right button of a mouse within the area of a TabpageControl.
		 */
		readonly onrbuttonup?: nexacro.EventObject<TabpageControl, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when focus comes into a TabpageControl.
		 */
		readonly onsetfocus?: nexacro.EventObject<TabpageControl, nexacro.SetFocusEventInfo>;
		/**
		 * This event occurs when the size of a TabpageControl changes.
		 */
		readonly onsize?: nexacro.EventObject<TabpageControl, nexacro.SizeEventInfo>;
		/**
		 * This event occurs when you touch and release the screen within the area of a TabpageControl.
		 */
		readonly ontouchend?: nexacro.EventObject<TabpageControl, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is moved along the touch surface within a TabpageControl.
		 */
		readonly ontouchmove?: nexacro.EventObject<TabpageControl, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is placed on the touch surface within a TabpageControl.
		 */
		readonly ontouchstart?: nexacro.EventObject<TabpageControl, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when you move the vertical scrollbar of a TabpageControl.
		 */
		readonly onvscroll?: nexacro.EventObject<TabpageControl, nexacro.ScrollEventInfo>;
		/**
		 * @param {string} v This property is used to specify the action printed as an accessibility feature when a selection box moves to a TabpageControl.
		 * @returns {void} 
		 */
		set_accessibilityaction(v: string): void;
		/**
		 * @param {nexacro.Enum.DescLevel} v This property is used to determine whether to print accessibility features of the children when a selection box moves to a TabpageControl.
		 * @returns {void} 
		 */
		set_accessibilitydesclevel(v: nexacro.Enum.DescLevel): void;
		/**
		 * @param {string} v This property is used to specify the description printed as an accessibility feature when a selection box moves to a TabpageControl.
		 * @returns {void} 
		 */
		set_accessibilitydescription(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a TabpageControl.
		 * @returns {void} 
		 */
		set_accessibilityenable(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the label printed as an accessibility feature when a selection box moves to a TabpageControl.
		 * @returns {void} 
		 */
		set_accessibilitylabel(v: string): void;
		/**
		 * @param {nexacro.Enum.Role} v This property is used to set the role of a TabpageControl. The role is printed as accessibility functionality when a selection box moves to the component.
		 * @returns {void} 
		 */
		set_accessibilityrole(v: nexacro.Enum.Role): void;
		/**
		 * @param {boolean} v This property is used to determine how to load a Form onto a TabPageControl component when the value of the url property is dynamically changed.
		 * @returns {void} 
		 */
		set_async(v: boolean): void;
		/**
		 * @param {string} v This property is used to set the background of a TabpageControl.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a TabpageControl.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a TabpageControl.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property is used to set the style of a TabpageControl by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a TabpageControl.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a TabpageControl.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a TabpageControl.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {string} v This property sets a font used for a TabpageControl.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {number} v This property is used to specify the minimum size of the track bar featured by the scrollbar of the Form displayed inside a TabpageControl.
		 * @returns {void} 
		 */
		set_formscrollbarbarminsize(v: number): void;
		/**
		 * @param {number} v This property is used to set the base size of a scrollbar where the track bar will disappear if the scrollbar becomes smaller than the specified size. This property is applicable to the scrollbar of the Form within a TabpageControl.
		 * @returns {void} 
		 */
		set_formscrollbarbaroutsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the decreasing button (DecButton control) of the scrollbar of a Form displayed within a TabpageControl.
		 * @returns {void} 
		 */
		set_formscrollbardecbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the increasing button (IncButton control) of the scrollbar of a Form displayed within a TabpageControl.
		 * @returns {void} 
		 */
		set_formscrollbarincbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the scrollbar of a Form displayed within a TabpageControl.
		 * @returns {void} 
		 */
		set_formscrollbarsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the track bar featured by the scrollbar of a Form displayed within a TabpageControl.
		 * @returns {void} 
		 */
		set_formscrollbartrackbarsize(v: number): void;
		/**
		 * @param {(nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`)} v This property determines how scrollbars work in a Form displayed within a TabpageControl.
		 * @returns {void} 
		 */
		set_formscrollbartype(v: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`): void;
		/**
		 * @param {number} v This property is used to size the scroll indicator bars of a Form displayed within a TabpageControl.
		 * @returns {void} 
		 */
		set_formscrollindicatorsize(v: number): void;
		/**
		 * @param {nexacro.Enum.ScrollType} v This property is used to set the types of scrolling applied to a Form that is displayed within a TabpageControl.
		 * @returns {void} 
		 */
		set_formscrolltype(v: nexacro.Enum.ScrollType): void;
		/**
		 * @param {nexacro.Enum.HotKeyModifier} v This property is used to set a hotkey for moving focus to a TabpageControl.
		 * @returns {void} 
		 */
		set_hotkey(v: nexacro.Enum.HotKeyModifier): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between characters (kerning) displayed in a TabpageControl.
		 * @returns {void} 
		 */
		set_letterSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * @param {string} v This property is used to specify the name of a TabpageControl.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a Tabpage control.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a TabpageControl.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {number} v This property is used to set the opacity of a TabpageControl.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {string} v This property is used to set the style of the TabButton of a TabpageControl by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_tabbuttoncssclass(v: string): void;
		/**
		 * @param {number} v This property is used to specify the height of the TabButton of a TabpageControl.
		 * @returns {void} 
		 */
		set_tabbuttonheight(v: number): void;
		/**
		 * @param {number} v This property is used to specify the width of the TabButton of a TabpageControl.
		 * @returns {void} 
		 */
		set_tabbuttonwidth(v: number): void;
		/**
		 * @param {string} v This property is used to specify the text to display on a tab button.
		 * @returns {void} 
		 */
		set_text(v: string): void;
		/**
		 * @param {string} v This property is used to specify the text of a tooltip that apeears when a mouse pointer hovers over a TabpageControl.
		 * @returns {void} 
		 */
		set_tooltiptext(v: string): void;
		/**
		 * @param {nexacro.Enum.TooltipType} v This property is used to specify the position and type of a tooltip that appears in a TabpageControl.
		 * @returns {void} 
		 */
		set_tooltiptype(v: nexacro.Enum.TooltipType): void;
		/**
		 * @param {string} v This property is used to connect a Form to a TabPage.
		 * @returns {void} 
		 */
		set_url(v: string): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between words displayed in a TabpageControl.
		 * @returns {void} 
		 */
		set_wordSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * This method is used to add a dynamically-created component as a child to a TabpageControl.
		 * @param {string} strChildID ID of a child component to add
		 * @param {object} objComp It specifies an object to be added as a child component.
		 * @returns {number} 
		 */
		addChild(strChildID: string, objComp: object): number;
		/**
		 * This method is used to declare a certain event and then add it to a TabpageControl.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the TabpageControl.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a TabpageControl.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a TabPage as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the funtion in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method finds a handler in a certain event of a TabpageControl and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns a specific handler from a certain event of a TabpageControl by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method is used to insert a dynamically-created component as a child to a TabpageControl. The component is added in a specified place in order.
		 * @param {number} nIdx It specifies the index of the place in which a child will be added.
If you specify -1, a child will be added at the end following other child components.
		 * @param {string} strChildID ID of a child component to add
		 * @param {object} objComp It specifies an object to be added as a child.
		 * @returns {number} 
		 */
		insertChild(nIdx: number, strChildID: string, objComp: object): number;
		/**
		 * This method is used to add a handler to a certain event of a TabpageControl at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		isValidObject(): null;
		/**
		 * This method is used to reload the Form that is linked to a TabpageControl through the url property.
		 */
		reload(): null;
		/**
		 * This method is used to remove a component that has been dynamically added to a TabpageControl.
		 * @param {string} strChildID A string that represents the ID of a child component to remove
		 * @returns {object} 
		 */
		removeChild(strChildID: string): object;
		/**
		 * This method is used to remove a certain event that is declared in a TabpageControl.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the TabpageControl.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a TabpageControl.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a TabpageControl and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to create the internal contents of a TabpageControl dynamically.
		 * @param {string} strCont It is a string that represents the internal contents of a TabpageControl, specified in the form of XML.

You must include the Layout tag in the following format: &lt;Layout&gt; ... &lt;/Layout&gt;

You can include a user property in the contents.
You cannot include an invisible object, Bind object and InitValue object in the contents.
		 * @returns {boolean} 
		 */
		setContents(strCont: string): boolean;
		/**
		 * This method is used to change the first handler in a certain event of a TabpageControl.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a TabpageControl.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to give focus to a TabpageControl.
		 * @param {boolean} bMoveScroll If scrolling is enabled in the parent component, it will determine whether to scroll based on the TabpageControl.

For "true", the parent component will scroll so that the TabpageControl will show.
For "false", the parent component will not scroll regardless of the TabpageControl's position.

The default value is "true".
		 * @param {boolean} bInnerFocus If a TabpageControl is a container component, this parameter determines whether to move focus to a child component.

For "true", focus will be given to the first child component that can receive focus.
For "false", focus will be given to the TabpageControl.

The default value is "true" if a TabpageControl is a container component.
		 * @returns {object} 
		 */
		setFocus(bMoveScroll?: boolean, bInnerFocus?: boolean): object;
	}
}

