// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    ExcelImportObject: nexacro.ExcelImportObject;
}

    
declare namespace nexacro {
    
	interface ExcelImportObject extends nexacro.EventSinkObject {
	    /**
		 * @constructor
		 */
		new(): nexacro.ExcelImportObject;
	    /**
		 * This property is used to set the file types applicable to the file dialog displayed for selecting a file to import.
		 */
		readonly filefilter?: string;
		/**
		 * This property is used to determine the default file type presented by a file dialog by specifying an index number.
		 */
		readonly filefilterindex?: number;
		/**
		 * This property is used to set the location of a file to import and determine how to handle the file.
		 */
		readonly importfilemode?: nexacro.Enum.ImportFileMode;
		/**
		 * This property is used to specify the format of a file imported by an ExcelImportObject . The format is specified in the form of a constant.
		 */
		readonly importtype?: number;
		/**
		 * This property is used to specify the URL to which an ExcelImportObject will import files.
		 */
		readonly importurl?: string;
		/**
		 * This property is used to specify the name of a ExcelImportObject.
		 */
		readonly name?: string;
		readonly quotechar?: nexacro.Enum.ExportImportQuoteType;
		readonly separator?: any;
		/**
		 * This property determines how to import the value of an Excel cell when the value's data type is a date or time. You can choose whether to import a raw value or a formatted value.
		 */
		readonly userawdatevalue?: boolean;
		/**
		 * This property determines whether to import the value of a cell of an Excel file in raw from or displayed form. This property is applicable when the value of a cell is a number.
		 */
		readonly userawnumbervalue?: boolean;
		/**
		 * This event occurs when there is an error during import process.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.ExcelImportObject, nexacro.ExcelImportErrorEventInfo>;
		/**
		 * This event occurs when the importing process is completed.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.ExcelImportObject, nexacro.ExcelImportEventInfo>;
		/**
		 * @param {string} v This property is used to set the file types applicable to the file dialog displayed for selecting a file to import.
		 * @returns {void} 
		 */
		set_filefilter(v: string): void;
		/**
		 * @param {number} v This property is used to determine the default file type presented by a file dialog by specifying an index number.
		 * @returns {void} 
		 */
		set_filefilterindex(v: number): void;
		/**
		 * @param {nexacro.Enum.ImportFileMode} v This property is used to set the location of a file to import and determine how to handle the file.
		 * @returns {void} 
		 */
		set_importfilemode(v: nexacro.Enum.ImportFileMode): void;
		/**
		 * @param {number} v This property is used to specify the format of a file imported by an ExcelImportObject . The format is specified in the form of a constant.
		 * @returns {void} 
		 */
		set_importtype(v: number): void;
		/**
		 * @param {string} v This property is used to specify the URL to which an ExcelImportObject will import files.
		 * @returns {void} 
		 */
		set_importurl(v: string): void;
		/**
		 * @param {string} v This property is used to specify the name of a ExcelImportObject.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		set_quotechar(v: nexacro.Enum.ExportImportQuoteType): void;
		set_separator(v: any): void;
		/**
		 * @param {boolean} v This property determines how to import the value of an Excel cell when the value's data type is a date or time. You can choose whether to import a raw value or a formatted value.
		 * @returns {void} 
		 */
		set_userawdatevalue(v: boolean): void;
		/**
		 * @param {boolean} v This property determines whether to import the value of a cell of an Excel file in raw from or displayed form. This property is applicable when the value of a cell is a number.
		 * @returns {void} 
		 */
		set_userawnumbervalue(v: boolean): void;
		/**
		 * This method is used to declare a certain event and then add it to a ExcelImportObject.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the ExcelImportObject.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a ExcelImportObject.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a ExcelImportObject as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to delete a ExcelImportObject that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method finds a handler in a certain event of a ExcelImportObject and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns a specific handler from a certain event of a ExcelImportObject by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method is used to import an Excel or Hancell file and create a Dataset as a result.
		 * @param {string} strSource You can specify the location of a file that you want to import in the form of a URL.

If the importfilemode property is set to "server", you can specify a location with the format "http://" or "https://".
If you use a relative path with importfilemode set to "server", the path will be based on the value of the importurl property.
If importfilemode is set to "local" or you do not set this parameter, a FileDialog will appear to allow you to select a file.
		 * @param {string} strRange This parameter specifies a certain area in the file designated by the strSource parameter with the format "sheet name!cell number:cell number". The data of the specified area will be imported.

If you need to designate multiple areas, you can specify areas multiple times with the below format.

strRange ::= '[Command=&lt;strCommand&gt;; Output=&lt;dsName&gt;; Head=&lt;strArea&gt;; Body=&lt;strArea&gt;]'

&lt;strCommand&gt; ::= 'getsheetlist' | 'getsheetdata'
  If you set getsheetlist, this method will import the sheet list from the file set by strSource.
  If you set getsheetdata, this method will import the data defined by &lt;strArea&gt; from the file set by strSource.
  The default value is "getsheetdata".

&lt;dsName&gt; 
 This is the name of a variable that contains the imported data.
 This variable represents the right-hand side of the equation applied to the strOutDatasets parameter
 If you omit this value, the variable name will be created automatically: "output1", "output2" and so on..

&lt;strArea&gt; ::= 'sheet name!cell number:cell number'
  This is the area whose data will be imported.
   The data in the head area will be used as the column names in the resulting Dataset.
   If the data in the head area is omitted, the column names will be created automatically: "Column0", "Column1" and so on.
  The data in the body area will be used as the row data in the resulting Dataset.
  If the data in the body area is omitted. all records will be imported.

<b>* This parameter is not applicable when a file to import is formatted in CSV.</b>
		 * @param {string} strOutDatasets This parameter specifies the ID of a Dataset that stores the imported data with the format "Dataset name=variable name".

You can set one or more Datasets by using whitespaces as separators.
The variable name on the right-hand side of the equation adopts the variable name defined by the strRange parameter or an automatically-created name such as "output1".
		 * @param {string} strArgument You can specify information needed for import.

You can set one or more pairs of arguments by using whitespaces as separators.
If you import an Excel file that is locked with a password, you must enter an argument with the format ""filepassword=the password of the Excel file" to succeed in the import.
		 */
		importData(strSource: string, strRange: string, strOutDatasets: string, strArgument?: string): null;
		/**
		 * This method is used to import an Excel or Hancell file and create a Dataset as a result. An import job is identified by its ID.
		 * @param {string} strImportID This is a string that represents the ID of an import job.

The value of this parameter is delivered as the value of the importid property of an ExcelImportEventInfo object, which is conveyed to the onsuccess event.
		 * @param {string} strSource You can specify the location of a file that you want to import in the form of a URL.

If the importfilemode property is set to "server", you can specify a location with the format "http://" or "https://".
If you use a relative path with importfilemode set to "server", the path will be based on the value of the importurl property.
If importfilemode is set to "local" or you do not set this parameter, a FileDialog will appear to allow you to select a file.
		 * @param {string} strRange This parameter specifies a certain area in the file designated by the strSource parameter with the format "sheet name!cell number:cell number". The data of the specified area will be imported.

If you need to designate multiple areas, you can specify areas multiple times with the below format.

strRange ::= '[Command=&lt;strCommand&gt;; Output=&lt;dsName&gt;; Head=&lt;strArea&gt;; Body=&lt;strArea&gt;]'

&lt;strCommand&gt; ::= 'getsheetlist' | 'getsheetdata'
  If you set getsheetlist, this method will import the sheet list from the file set by strSource.
  If you set getsheetdata, this method will import the data defined by &lt;strArea&gt; from the file set by strSource.
  The default value is "getsheetdata".

&lt;dsName&gt; 
 This is the name of a variable that contains the imported data.
 This variable represents the right-hand side of the equation applied to the strOutDatasets parameter
 If you omit this value, the variable name will be created automatically: "output1", "output2" and so on..

&lt;strArea&gt; ::= 'sheet name!cell number:cell number'
  This is the area whose data will be imported.
   The data in the head area will be used as the column names in the resulting Dataset.
   If the data in the head area is omitted, the column names will be created automatically: "Column0", "Column1" and so on.
  The data in the body area will be used as the row data in the resulting Dataset.
  If the data in the body area is omitted. all records will be imported.

<b>* This parameter is not applicable when a file to import is formatted in CSV.</b>
		 * @param {string} strOutDatasets This parameter specifies the ID of a Dataset that stores the imported data with the format "Dataset name=variable name".

You can set one or more Datasets by using whitespaces as separators.
The variable name on the right-hand side of the equation adopts the variable name defined by the strRange parameter or an automatically-created name such as "output1".
		 * @param {string} strArgument You can specify information needed for import.

You can set one or more pairs of arguments by using whitespaces as separators.
If you import an Excel file that is locked with a password, you must enter an argument with the format ""filepassword=the password of the Excel file" to succeed in the import.
		 */
		importDataEx(strImportID: string, strSource: string, strRange: string, strOutDatasets: string, strArgument?: string): null;
		/**
		 * This method is used to add a handler to a certain event of a ExcelImportObject at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to remove a certain event that is declared in a ExcelImportObject.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the ExcelImportObject.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a ExcelImportObject.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a ExcelImportObject and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the first handler in a certain event of a ExcelImportObject.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a ExcelImportObject.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
	}
}

