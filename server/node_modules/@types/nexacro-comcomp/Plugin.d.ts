// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    Plugin: nexacro.Plugin;
}

    
declare namespace nexacro {
    type PluginOmitKeys = 'accessibilityaction'|'accessibilitydesclevel'|'accessibilitydescription'|'accessibilityenable'|'accessibilitylabel'|'accessibilityrole'|'background'|'borderRadius'|'boxShadow'|'color'|'cssclass'|'cursor'|'enableevent'|'expr'|'font'|'hotkey'|'id'|'letterSpacing'|'edge'|'padding'|'textAlign'|'textDecoration'|'verticalAlign'|'wordWrap'|'opacity'|'rtl'|'text'|'tooltiptext'|'tooltiptype'|'wordSpacing'|'addEvent'|'addEventHandler'|'addEventHandlerLookup'|'bringToFront'|'bringToPrev'|'clearEventHandler'|'destroy'|'findEventHandler'|'getDisplayText'|'getEventHandler'|'getFocus'|'insertEventHandler'|'removeEvent'|'removeEventHandler'|'removeEventHandlerLookup'|'resize'|'setEventHandler'|'setEventHandlerLookup'|'onclick'|'oncontextmenu'|'ondblclick'|'ondrag'|'ondragenter'|'ondragleave'|'ondragmove'|'ondrop'|'oninput'|'onkeydown'|'onkeyup'|'onkillfocus'|'onlbuttondown'|'onlbuttonup'|'onmousedown'|'onmouseenter'|'onmouseleave'|'onmousemove'|'onmouseup'|'onmousewheel'|'onmove'|'onrbuttondown'|'onrbuttonup'|'onsetfocus'|'onsize'|'ontouchend'|'ontouchmove'|'ontouchstart';
	
	interface Plugin extends Omit<nexacro.Component, PluginOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.Plugin;
	    /**
		 * This property determines whether to re-adjust the alpha value applied to the image of a windowless Plugin.
		 */
		readonly adjustalpha?: boolean;
		/**
		 * This property is used to set the archive property defined in the object linked to a Plugin.
		 */
		readonly archive?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Plugin's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to specify the class identifier (classid) or programmatic identifier (progid) of the object to connect a Plugin to.
		 */
		readonly classid?: string;
		/**
		 * This property is used to specify the class identifier (classid) or programmatic identifier (progid) of the object to connect a Plugin to. This property is applicable when the connected object is 64-bit.
		 */
		readonly classid64?: string;
		/**
		 * This property is used to set the codes of the object to link to a Plugin.
		 */
		readonly code?: string;
		/**
		 * This property is used to set the location of the object linked to a Plugin.
		 */
		readonly codebase?: string;
		/**
		 * This property is used to set a certain property of a Plugin. Otherwise, this property is used to save the metadata that will be used in the ActiveX of a Plugin.
		 */
		readonly contents?: string;
		/**
		 * This property is used to determine whether to enable a Plugin.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to specify the height of a Plugin.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the ID of an InitValue to be applied to an Plugin.
		 */
		readonly initvalueid?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Plugin's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the license of the object linked to a Plugin.
		 */
		readonly license?: string;
		/**
		 * This property is used to set the ipk path of the object linked to a Plugin.
		 */
		readonly lpkpath?: string;
		/**
		 * This property is used to set the maximum height of a Plugin for the component to be displayed on the screen.
		 */
		readonly maxheight?: number;
		/**
		 * This property is used to set the maximum width of a Plugin for the component to be displayed on the screen.
		 */
		readonly maxwidth?: number;
		/**
		 * This property is used to set the type of the object to link to a Plugin.
		 */
		readonly mimetype?: string;
		/**
		 * This property is used to set the minimum height of a Plugin for the component to be displayed on the screen.
		 */
		readonly minheight?: number;
		/**
		 * This property is used to set the minimum width of a Plugin for the component to be displayed on the screen.
		 */
		readonly minwidth?: number;
		/**
		 * This property is used to specify the name of a Plugin.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a Plugin.
		 */
		readonly border?: string;
		/**
		 * This read-only property holds the parent object of a Plugin.
		 */
		readonly parent?: object;
		/**
		 * This property is used to set the location of the object to link to a Plugin.
		 */
		readonly pluginpage?: string;
		/**
		 * This property is used to set the data and src properties defined in the object to link to a Plugin.
		 */
		readonly pluginsrc?: string;
		/**
		 * This property determines whether to create a Plugin in the form of a pop-up when the object linked to the Plugin is a window.
		 */
		readonly popupstyle?: boolean;
		/**
		 * This property is used to specify the index number of a step page where a Plugin is displayed if the parent object uses the step feature.
		 */
		readonly positionstep?: number;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Plugin's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to define the tab order number of a Plugin. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 */
		readonly taborder?: number;
		/**
		 * This property determines whether a Plugin receives focus when you move the focus between components by pressing the tab key.
		 */
		readonly tabstop?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Plugin's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property determines whether to use persistent data.
		 */
		readonly usepersistdata?: boolean;
		/**
		 * This property is used to determine whether to make a Plugin visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to set the width of a Plugin.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property determines whether an object to link to a Plugin has a window.
		 */
		readonly windowed?: boolean;
		/**
		 * @param {boolean} v This property determines whether to re-adjust the alpha value applied to the image of a windowless Plugin.
		 * @returns {void} 
		 */
		set_adjustalpha(v: boolean): void;
		/**
		 * @param {string} v This property is used to set the archive property defined in the object linked to a Plugin.
		 * @returns {void} 
		 */
		set_archive(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Plugin's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {string} v This property is used to specify the class identifier (classid) or programmatic identifier (progid) of the object to connect a Plugin to.
		 * @returns {void} 
		 */
		set_classid(v: string): void;
		/**
		 * @param {string} v This property is used to specify the class identifier (classid) or programmatic identifier (progid) of the object to connect a Plugin to. This property is applicable when the connected object is 64-bit.
		 * @returns {void} 
		 */
		set_classid64(v: string): void;
		/**
		 * @param {string} v This property is used to set the codes of the object to link to a Plugin.
		 * @returns {void} 
		 */
		set_code(v: string): void;
		/**
		 * @param {string} v This property is used to set the location of the object linked to a Plugin.
		 * @returns {void} 
		 */
		set_codebase(v: string): void;
		/**
		 * @param {string} v This property is used to set a certain property of a Plugin. Otherwise, this property is used to save the metadata that will be used in the ActiveX of a Plugin.
		 * @returns {void} 
		 */
		set_contents(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a Plugin.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the height of a Plugin.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Plugin's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {string} v This property is used to set the license of the object linked to a Plugin.
		 * @returns {void} 
		 */
		set_license(v: string): void;
		/**
		 * @param {string} v This property is used to set the ipk path of the object linked to a Plugin.
		 * @returns {void} 
		 */
		set_lpkpath(v: string): void;
		/**
		 * @param {number} v This property is used to set the maximum height of a Plugin for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the maximum width of a Plugin for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxwidth(v: number): void;
		/**
		 * @param {string} v This property is used to set the type of the object to link to a Plugin.
		 * @returns {void} 
		 */
		set_mimetype(v: string): void;
		/**
		 * @param {number} v This property is used to set the minimum height of a Plugin for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum width of a Plugin for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minwidth(v: number): void;
		/**
		 * @param {string} v This property is used to specify the name of a Plugin.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a Plugin.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the location of the object to link to a Plugin.
		 * @returns {void} 
		 */
		set_pluginpage(v: string): void;
		/**
		 * @param {string} v This property is used to set the data and src properties defined in the object to link to a Plugin.
		 * @returns {void} 
		 */
		set_pluginsrc(v: string): void;
		/**
		 * @param {boolean} v This property determines whether to create a Plugin in the form of a pop-up when the object linked to the Plugin is a window.
		 * @returns {void} 
		 */
		set_popupstyle(v: boolean): void;
		/**
		 * @param {number} v This property is used to specify the index number of a step page where a Plugin is displayed if the parent object uses the step feature.
		 * @returns {void} 
		 */
		set_positionstep(v: number): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Plugin's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {number} v This property is used to define the tab order number of a Plugin. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 * @returns {void} 
		 */
		set_taborder(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a Plugin receives focus when you move the focus between components by pressing the tab key.
		 * @returns {void} 
		 */
		set_tabstop(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Plugin's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {boolean} v This property determines whether to use persistent data.
		 * @returns {void} 
		 */
		set_usepersistdata(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a Plugin visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to set the width of a Plugin.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {boolean} v This property determines whether an object to link to a Plugin has a window.
		 * @returns {void} 
		 */
		set_windowed(v: boolean): void;
		/**
		 * This method is used to call a certain method of the object linked to a Plugin.
		 * @param {string} strMethodID This is a string that represents the name of a method to call.
		 * @param {any} varArg1 
		 * @param {any} varArg2 
		 * @returns {any} 
		 */
		callMethod(strMethodID: string, varArg1?: any, varArg2?: any): any;
		/**
		 * This method is used to obtain the bottom position of a Plugin in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * This method is used to obtain the height of a Plugin in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the left position of a Plugin in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * This method is used to obtain the right position of a Plugin in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * This method is used to obtain the top position of a Plugin in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * This method is used to obtain the width of a Plugin in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method returns the value of a Plugin's bottom property in pixel.
		 * @returns {number} 
		 */
		getPixelBottom(): number;
		/**
		 * This method returns the height of a Plugin in pixel.
		 * @returns {number} 
		 */
		getPixelHeight(): number;
		/**
		 * This method returns the value of a Plugin's left property in pixel.
		 * @returns {number} 
		 */
		getPixelLeft(): number;
		/**
		 * This method returns the value of a Plugin's right property in pixel.
		 * @returns {number} 
		 */
		getPixelRight(): number;
		/**
		 * This method returns the value of a Plugin's top property in pixel.
		 * @returns {number} 
		 */
		getPixelTop(): number;
		/**
		 * This method returns the width of a Plugin in pixel.
		 * @returns {number} 
		 */
		getPixelWidth(): number;
		/**
		 * This method returns the value of a certain property defined in the object linked to a Plugin.
		 * @param {string} strPropID This is a string representing the name of a property defined in the object linked to the Plugin.
		 * @returns {any} 
		 */
		getProperty(strPropID: string): any;
		/**
		 * This method is used to initialize a Plugin after creating it in a script dynamically.
		 * @param {string} strName It sets the ID of a Plugin in the form of a string.
		 * @param {(string|number)} vLeft It specifies the value of the left property of a Plugin in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop It specifies the value of the top property of a Plugin in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth It specifies the value of the width property of a Plugin in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight It specifies the value of the height property of a Plugin in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight It specifies the value of the right property of a Plugin in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom It specifies the value of the bottom property of a Plugin in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vMinWidth It specifies a Plugin's minimum width that can be displayed in the Form.
		 * @param {(string|number)} vMaxWidth It specifies a Plugin's maximum width that can be displayed in the Form.

If this value is smaller than vMinWidth, it will be replaced by the value of vMinWidth.
		 * @param {(string|number)} vMinHeight It specifies a Plugin's minimum height that can be displayed in the Form.
		 * @param {(string|number)} vMaxHeight It specifies a Plugin's maximum height that can be displayed in the Form.

If this value is smaller than vMinHeight, it will be replaced by the value of vMinHeight.
		 */
		init(strName: string, vLeft: string|number, vTop: string|number, vWidth: string|number, vHeight: string|number, vRight?: string|number, vBottom?: string|number, vMinWidth?: string|number, vMaxWidth?: string|number, vMinHeight?: string|number, vMaxHeight?: string|number): null;
		/**
		 * This method is used to install the object to link to a Plugin.
		 * @returns {boolean} 
		 */
		install(): boolean;
		/**
		 * This method is used to check whether the object linked to a Plugin has been installed in the system.
		 * @returns {boolean} 
		 */
		isInstalled(): boolean;
		/**
		 * This method is used to check whether an object has been successfully created and loaded onto a Plugin.
		 * @returns {boolean} 
		 */
		isLoaded(): boolean;
		/**
		 * This method is used to change the position and size of a Plugin.
		 * @param {(string|number)} vLeft This parameter defines the value of the left property of a Plugin in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop This parameter defines the value of the top property of a Plugin in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth This parameter defines the value of the width property of a Plugin in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight This parameter defines the value of the height property of a Plugin in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight This parameter defines the value of the right property of a Plugin in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom This parameter defines the value of the bottom property of a Plugin in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 */
		move(vLeft: string|number, vTop: string|number, vWidth?: string|number, vHeight?: string|number, vRight?: string|number, vBottom?: string|number): null;
		/**
		 * This method is used to cause a Plugin to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToNext(objComp: object): null;
		/**
		 * This method is used to cause a Plugin to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToNext(strComp: string): null;
		/**
		 * This method is used to cause a Plugin to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToPrev(objComp: object): null;
		/**
		 * This method is used to cause a Plugin to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToPrev(strComp: string): null;
		/**
		 * This method is used to cause a Plugin to be displayed at the bottom on the screen. This method applies to among the components under the same parent.
		 */
		sendToBack(): null;
		/**
		 * This method is used to cause a Plugin to be displayed one level lower on the screen. This method applies to among the components under the same parent.
		 */
		sendToNext(): null;
		/**
		 * This method is used to give focus to a Plugin.
		 * @param {boolean} bMoveScroll If scrolling is enabled in the parent component, it will determine whether to scroll based on the Plugin.

For "true", the parent component will scroll so that the Plugin will show.
For "false", the parent component will not scroll regardless of the Plugin's position.

The default value is "true".
		 * @param {boolean} bInnerFocus If a Plugin is a container component, this parameter determines whether to move focus to a child component.

For "true", focus will be given to the first child component that can receive focus.
For "false", focus will be given to the Plugin.

The default value is "true" if a Plugin is a container component.
		 * @returns {object} 
		 */
		setFocus(bMoveScroll?: boolean, bInnerFocus?: boolean): object;
		/**
		 * This method is used to specify the bottom position of a Plugin in pixel, based on the parent component's top position.
		 * @param {number} nBottom It is a pixel value representing the bottom position of a Plugin, calculated based on the parent component's top position.
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * This method is used to specify the height of a Plugin in pixel.
		 * @param {number} nHeight It is a pixel value representing the height of a Plugin.
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * This method is used to specify the left position of a Plugin in pixel, based on the parent component's left position.
		 * @param {number} nLeft It is a pixel value representing the left position of a Plugin, calculated based on the parent component's left position.
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * This method is used to specify the right position of a Plugin in pixel, based on the parent component's left position.
		 * @param {number} nRight It is a pixel value representing the right position of a Plugin, calculated based on the parent component's left position.
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * This method is used to specify the top position of a Plugin in pixel, based on the parent component's top position.
		 * @param {number} nTop It is a pixel value representing the top position of a Plugin, calculated based on the parent component's top position.
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * This method is used to specify the width of a Plugin in pixel.
		 * @param {number} nWidth It is a pixel value representing the width of a Plugin.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * This property is used to set the value of a certain property defined in the object linked to a Plugin.
		 * @param {string} strPropID This is a string that represents the name of a property defined in the object linked to the Plugin.
		 * @param {string} varVal This is a value that will be saved to the property defined by the strPropID parameter.
		 */
		setProperty(strPropID: string, varVal: string): null;
		/**
		 * This method is used to display a Plugin on the screen. The Plugin mentioned here refers to the one that is dynamically created through a script.
		 */
		show(): null;
	}
}

