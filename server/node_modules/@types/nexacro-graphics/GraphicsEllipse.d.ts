// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    GraphicsEllipse: nexacro.GraphicsEllipse;
}

    
declare namespace nexacro {
    type GraphicsEllipseOmitKeys = 'id'|'miterlimit'|'strokecap'|'strokejoin';
	
	interface GraphicsEllipse extends Omit<nexacro._GraphicsShape, GraphicsEllipseOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.GraphicsEllipse;
	    /**
		 * This property is used to color the inside area of a GraphicsEllipse.
		 */
		readonly fillstyle?: string;
		/**
		 * This property is used to set the vertical diameter of a GraphicsEllipse.
		 */
		readonly height?: number;
		/**
		 * This property is used to set the opacity of a GraphicsEllipse.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the parent object of a GraphicsEllipse.
		 */
		readonly parent?: object;
		/**
		 * This property is used to set the color and type of the outer line of a GraphicsEllipse.
		 */
		readonly strokepen?: string;
		/**
		 * This property is used to determine whether to make a GraphicsEllipse visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to set the horizontal diameter of a GraphicsEllipse.
		 */
		readonly width?: number;
		/**
		 * This property sets the x-coordinate of the center of a GraphicsEllipse object, calculating the position based on the parent object.
		 */
		readonly x?: number;
		/**
		 * This property sets the y-coordinate of the center of a GraphicsEllipse object, calculating the position based on the parent object.
		 */
		readonly y?: number;
		/**
		 * @param {string} v This property is used to color the inside area of a GraphicsEllipse.
		 * @returns {void} 
		 */
		set_fillstyle(v: string): void;
		/**
		 * @param {number} v This property is used to set the vertical diameter of a GraphicsEllipse.
		 * @returns {void} 
		 */
		set_height(v: number): void;
		/**
		 * @param {number} v This property is used to set the opacity of a GraphicsEllipse.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {string} v This property is used to set the color and type of the outer line of a GraphicsEllipse.
		 * @returns {void} 
		 */
		set_strokepen(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a GraphicsEllipse visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {number} v This property is used to set the horizontal diameter of a GraphicsEllipse.
		 * @returns {void} 
		 */
		set_width(v: number): void;
		/**
		 * @param {number} v This property sets the x-coordinate of the center of a GraphicsEllipse object, calculating the position based on the parent object.
		 * @returns {void} 
		 */
		set_x(v: number): void;
		/**
		 * @param {number} v This property sets the y-coordinate of the center of a GraphicsEllipse object, calculating the position based on the parent object.
		 * @returns {void} 
		 */
		set_y(v: number): void;
		/**
		 * This method is used to completely remove a GraphicsEllipse from a memory.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method returns the area where a GraphicsEllipse is displayed, including the border of the GraphicsEllipse. The area is calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getBoundRect(): object;
		/**
		 * This method returns the next object among those under the same parent as a GraphicsEllipse.
		 * @returns {object} 
		 */
		getNextSibling(): object;
		/**
		 * This method returns the area where a GraphicsEllipse is displayed, including the border of the GraphicsEllipse. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetBoundRect(): object;
		/**
		 * This method returns the area where a GraphicsEllipse is displayed, with the area calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetRect(): object;
		/**
		 * This method returns the area where a GraphicsEllipse is displayed, excluding the border of the GraphicsEllipse. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetRegion(): object;
		/**
		 * This method returns the previous object among those under the same parent as a GraphicsEllipse.
		 * @returns {object} 
		 */
		getPreviousSibling(): object;
		/**
		 * This method returns the area where a GraphicsEllipse is displayed, with the area calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getRect(): object;
		/**
		 * This method returns the area where a GraphicsEllipse is displayed, excluding the border of the GraphicsEllipse. The area is calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getRegion(): object;
		/**
		 * This method returns whether a region is created in a GraphicsEllipse.
		 * @returns {boolean} 
		 */
		isEmptyRect(): boolean;
		/**
		 * This method finds the position marked by the coordinates delivered as arguments and returns whether the position is included in the area of a GraphicsEllipse.
		 * @param {number} nX This is the number of pixels, indicating the x-coordinate of the position whose inclusion is checked by this method.

The value is calculated based on the Graphics component.
		 * @param {number} nY This is the number of pixels, indicating the y-coordinate of the position whose inclusion is checked by this method.

The value is calculated based on the Graphics component.
		 * @returns {boolean} 
		 */
		isHitTest(nX: number, nY: number): boolean;
		/**
		 * This method is used to rotate a GraphicsEllipse.
		 * @param {number} nAngle This is a number indicating the angle at which the GraphicsEllipse rotates.

If the value is a positive number, the GraphicsEllipse will rotate clockwise.
If the value is a negative number, the GraphicsEllipse will rotate counterclockwise.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis of the rotation.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating a y-coordinate that serves as an axis of the rotation.
The value is calculated based on the parent object.

The default value is 0.
		 */
		rotate(nAngle: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to scale a GraphicsEllipse up/down.
		 * @param {number} nScaleX This is a number, indicating the scale in which the width of the GraphicsEllipse is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsEllipse will be scaled up.
If you specify a number smaller than 1.0, the GraphicsEllipse will be scaled down.
		 * @param {number} nScaleY This is a number, indicating the scale in which the height of the GraphicsEllipse is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsEllipse will be scaled up.
If you specify a number smaller than 1.0, the GraphicsEllipse will be scaled down.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for scaling up/down the GraphicsEllipse.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating a y-coordinate that serves as an axis for scaling up/down the GraphicsEllipse.
The value is calculated based on the parent object.

The default value is 0.
		 */
		scale(nScaleX: number, nScaleY: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to set coordinates for clipping a certain region of a GraphicsEllipse.
		 * @param {number} nX This is a number indicating the x-coordinate of a region to clip.

The value is processed based on the assumption that the x property of the GraphicsEllipse holds 0 as its value.
		 * @param {number} nY This is a number indicating the y-coordinate of a region to clip.

The value is processed based on the assumption that the y property of the GraphicsEllipse holds 0 as its value.
		 * @param {number} nWidth This is a number indicating the width of a region to clip.

The value is calculated based on the value of the nX parameter.
		 * @param {number} nHeight This is a number indicating the height of a region to clip.

The value is calculated based on the value of the nY parameter.
		 */
		setClipRect(nX: number, nY: number, nWidth: number, nHeight: number): null;
		/**
		 * This method is used to apply transformational methods to a GraphicsEllipse consecutively based on the original position of the GraphicsEllipse.
		 * @param {string} strMethod This is a string representing a series of transformational methods that will apply to the GraphicsEllipse.

You can use the translate(), scale(), rotate() and shear() methods.
		 */
		setTransform(strMethod: string): null;
		/**
		 * This method is used to shear a GraphicsEllipse.
		 * @param {number} nRadianX This is a radian value at which the GraphicsEllipse will be sheared based on the x-axis.
		 * @param {number} nRadianY This is a radian value at which the GraphicsEllipse will be sheared based on the y-axis.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating an y-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 */
		shear(nRadianX: number, nRadianY: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method returns a string representing the type that constitutes a GraphicsEllipse.
		 * @returns {string} 
		 */
		toString(): string;
		/**
		 * This method is used to apply transformational methods to a GraphicsEllipse.
		 * @param {number} nScaleX This is a number, indicating the scale in which the width of the GraphicsEllipse is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsEllipse will be scaled up.
If you specify a number smaller than 1.0, the GraphicsEllipse will be scaled down.
		 * @param {number} nShearX This is a radian value at which the GraphicsEllipse will be sheared based on the x-axis.
		 * @param {number} nShearY This is a radian value at which the GraphicsEllipse will be sheared based on the y-axis.
		 * @param {number} nScaleY This is a number, indicating the scale in which the height of the GraphicsEllipse is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsEllipse will be scaled up.
If you specify a number smaller than 1.0, the GraphicsEllipse will be scaled down.
		 * @param {number} nTransX This is the number of pixels, indicating the distance at which the GraphicsEllipse will be moved in the direction of the x-axis.
		 * @param {number} nTransY This is the number of pixels, indicating the distance at which the GraphicsEllipse will be moved in the direction of the y-axis.
		 */
		transform(nScaleX: number, nShearX: number, nShearY: number, nScaleY: number, nTransX: number, nTransY: number): null;
		/**
		 * This method is used to move the position of a GraphicsEllipse.
		 * @param {number} nTransX This is the number of pixels, indicating the distance at which the GraphicsEllipse will be moved in the direction of the x-axis.
		 * @param {number} nTransY This is the number of pixels, indicating the distance at which the GraphicsEllipse will be moved in the direction of the y-axis.
		 */
		translate(nTransX: number, nTransY: number): null;
	}
}

