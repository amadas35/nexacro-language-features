// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    GraphicsLine: nexacro.GraphicsLine;
}

    
declare namespace nexacro {
    type GraphicsLineOmitKeys = 'fillstyle'|'id'|'miterlimit'|'strokejoin'|'hasSegments';
	
	interface GraphicsLine extends Omit<nexacro._GraphicsObject, GraphicsLineOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.GraphicsLine;
	    /**
		 * This property is used to set the opacity of a GraphicsLine.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the parent object of a GraphicsLine.
		 */
		readonly parent?: object;
		/**
		 * This property is used to set the cap of a straight line displayed in a GraphicsLine.
		 */
		readonly strokecap?: nexacro.Enum.StrokeCap;
		/**
		 * This property is used to set the color and type of the straight line of a GraphicsEllipse.
		 */
		readonly strokepen?: string;
		/**
		 * This property is used to determine whether to make a GraphicsLine visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to set the x-coordinate of a position where a GraphicsLine is displayed. The coordinate is calculated based on the position of the parent object.
		 */
		readonly x?: number;
		/**
		 * This property is used to set the x-coordinate of a position where a straight line begins.
		 */
		readonly x1?: number;
		/**
		 * This property is used to set the x-coordinate of a position where a straight line ends.
		 */
		readonly x2?: number;
		/**
		 * This property is used to set the y-coordinate of a position where a GraphicsLine is displayed. The coordinate is calculated based on the position of the parent object.
		 */
		readonly y?: number;
		/**
		 * This property is used to set the y-coordinate of a position where a straight line begins.
		 */
		readonly y1?: number;
		/**
		 * This property is used to set the y-coordinate of a position where a straight line ends.
		 */
		readonly y2?: number;
		/**
		 * @param {number} v This property is used to set the opacity of a GraphicsLine.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {nexacro.Enum.StrokeCap} v This property is used to set the cap of a straight line displayed in a GraphicsLine.
		 * @returns {void} 
		 */
		set_strokecap(v: nexacro.Enum.StrokeCap): void;
		/**
		 * @param {string} v This property is used to set the color and type of the straight line of a GraphicsEllipse.
		 * @returns {void} 
		 */
		set_strokepen(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a GraphicsLine visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {number} v This property is used to set the x-coordinate of a position where a GraphicsLine is displayed. The coordinate is calculated based on the position of the parent object.
		 * @returns {void} 
		 */
		set_x(v: number): void;
		/**
		 * @param {number} v This property is used to set the x-coordinate of a position where a straight line begins.
		 * @returns {void} 
		 */
		set_x1(v: number): void;
		/**
		 * @param {number} v This property is used to set the x-coordinate of a position where a straight line ends.
		 * @returns {void} 
		 */
		set_x2(v: number): void;
		/**
		 * @param {number} v This property is used to set the y-coordinate of a position where a GraphicsLine is displayed. The coordinate is calculated based on the position of the parent object.
		 * @returns {void} 
		 */
		set_y(v: number): void;
		/**
		 * @param {number} v This property is used to set the y-coordinate of a position where a straight line begins.
		 * @returns {void} 
		 */
		set_y1(v: number): void;
		/**
		 * @param {number} v This property is used to set the y-coordinate of a position where a straight line ends.
		 * @returns {void} 
		 */
		set_y2(v: number): void;
		/**
		 * This method is used to completely remove a GraphicsLine from a memory.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method returns the area where a GraphicsLine is displayed, including the border of the GraphicsLine. The area is calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getBoundRect(): object;
		/**
		 * This method returns the next object among those under the same parent as a GraphicsLine.
		 * @returns {object} 
		 */
		getNextSibling(): object;
		/**
		 * This method returns the area where a GraphicsLine is displayed, including the border of the GraphicsLine. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetBoundRect(): object;
		/**
		 * This method returns the area where a GraphicsLine is displayed, with the area calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetRect(): object;
		/**
		 * This method returns the area where a GraphicsLine is displayed, excluding the border of the GraphicsLine. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetRegion(): object;
		/**
		 * This method returns the previous object among those under the same parent as a GraphicsLine.
		 * @returns {object} 
		 */
		getPreviousSibling(): object;
		/**
		 * This method returns the area where a GraphicsLine is displayed, with the area calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getRect(): object;
		/**
		 * This method returns the area where a GraphicsLine is displayed, excluding the border of the GraphicsLine. The area is calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getRegion(): object;
		/**
		 * This method finds the position marked by the coordinates delivered as arguments and returns whether the position is included in the area of a GraphicsLine.
		 * @param {number} nX This is the number of pixels, indicating the x-coordinate of the position whose inclusion is checked by this method.

The value is calculated based on the Graphics component.
		 * @param {number} nY This is the number of pixels, indicating the y-coordinate of the position whose inclusion is checked by this method.

The value is calculated based on the Graphics component.
		 * @returns {boolean} 
		 */
		isHitTest(nX: number, nY: number): boolean;
		/**
		 * This method returns whether the position of a certain point is included in the area of a GraphicsLine.
		 * @param {object} objPoint This is a Point--an object of Nexacro Platform--to check for whether it is included in the area of the GraphicsLine.

The Point is calculated based on the Graphics component.
		 * @param {number} nTolerance This is a number, indicating the maximum distance by which this method determines whether the position defined by objPoint is included in the area of the GraphicsLine.

That is to say, the position will be determined to be included in the area of the GraphicsLine if this value is larger than the distance between the position and the area of the GraphicsLine.
		 * @returns {boolean} 
		 */
		isPointInPath(objPoint: object, nTolerance?: number): boolean;
		/**
		 * This method is used to rotate a GraphicsLine.
		 * @param {number} nAngle This is a number indicating the angle at which the GraphicsLine rotates.

If the value is a positive number, the GraphicsLine will rotate clockwise.
If the value is a negative number, the GraphicsLine will rotate counterclockwise.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis of the rotation.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating a y-coordinate that serves as an axis of the rotation.
The value is calculated based on the parent object.

The default value is 0.
		 */
		rotate(nAngle: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to scale a GraphicsLine up/down.
		 * @param {number} nScaleX This is a number, indicating the scale in which the width of the GraphicsLine is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsLine will be scaled up.
If you specify a number smaller than 1.0, the GraphicsLine will be scaled down.
		 * @param {number} nScaleY This is a number, indicating the scale in which the height of the GraphicsLine is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsLine will be scaled up.
If you specify a number smaller than 1.0, the GraphicsLine will be scaled down.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for scaling up/down the GraphicsLine.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating a y-coordinate that serves as an axis for scaling up/down the GraphicsLine.
The value is calculated based on the parent object.

The default value is 0.
		 */
		scale(nScaleX: number, nScaleY: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to set coordinates for clipping a certain region of a GraphicsLine.
		 * @param {number} nX This is a number indicating the x-coordinate of a region to clip.

The value is processed based on the assumption that the x property of the GraphicsLine holds 0 as its value.
		 * @param {number} nY This is a number indicating the y-coordinate of a region to clip.

The value is processed based on the assumption that the y property of the GraphicsLine holds 0 as its value.
		 * @param {number} nWidth This is a number indicating the width of a region to clip.

The value is calculated based on the value of the nX parameter.
		 * @param {number} nHeight This is a number indicating the height of a region to clip.

The value is calculated based on the value of the nY parameter.
		 */
		setClipRect(nX: number, nY: number, nWidth: number, nHeight: number): null;
		/**
		 * This method is used to apply transformational methods to a GraphicsLine consecutively based on the original position of the GraphicsLine.
		 * @param {string} strMethod This is a string representing a series of transformational methods that will apply to the GraphicsLine.

You can use the translate(), scale(), rotate() and shear() methods.
		 */
		setTransform(strMethod: string): null;
		/**
		 * This method is used to shear a GraphicsLine.
		 * @param {number} nRadianX This is a radian value at which the GraphicsLine will be sheared based on the x-axis.
		 * @param {number} nRadianY This is a radian value at which the GraphicsLine will be sheared based on the y-axis.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating an y-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 */
		shear(nRadianX: number, nRadianY: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method returns a string representing the type that constitutes a GraphicsLine.
		 * @returns {string} 
		 */
		toString(): string;
		/**
		 * This method is used to apply transformational methods to a GraphicsLine.
		 * @param {number} nScaleX This is a number, indicating the scale in which the width of the GraphicsLine is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsLine will be scaled up.
If you specify a number smaller than 1.0, the GraphicsLine will be scaled down.
		 * @param {number} nShearX This is a radian value at which the GraphicsLine will be sheared based on the x-axis.
		 * @param {number} nShearY This is a radian value at which the GraphicsLine will be sheared based on the y-axis.
		 * @param {number} nScaleY This is a number, indicating the scale in which the height of the GraphicsLine is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsLine will be scaled up.
If you specify a number smaller than 1.0, the GraphicsLine will be scaled down.
		 * @param {number} nTransX This is the number of pixels, indicating the distance at which the GraphicsLine will be moved in the direction of the x-axis.
		 * @param {number} nTransY This is the number of pixels, indicating the distance at which the GraphicsLine will be moved in the direction of the y-axis.
		 */
		transform(nScaleX: number, nShearX: number, nShearY: number, nScaleY: number, nTransX: number, nTransY: number): null;
		/**
		 * This method is used to move the position of a GraphicsLine.
		 * @param {number} nTransX This is the number of pixels, indicating the distance at which the GraphicsLine will be moved in the direction of the x-axis.
		 * @param {number} nTransY This is the number of pixels, indicating the distance at which the GraphicsLine will be moved in the direction of the y-axis.
		 */
		translate(nTransX: number, nTransY: number): null;
	}
}

