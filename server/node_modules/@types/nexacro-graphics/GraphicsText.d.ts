// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    GraphicsText: nexacro.GraphicsText;
}

    
declare namespace nexacro {
    type GraphicsTextOmitKeys = 'fillstyle'|'height'|'id'|'miterlimit'|'strokecap'|'strokejoin'|'strokepen'|'width';
	
	interface GraphicsText extends Omit<nexacro._GraphicsShape, GraphicsTextOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.GraphicsText;
	    /**
		 * This property is used to set the color of the text displayed in a GraphicsText.
		 */
		readonly color?: string;
		/**
		 * This property sets a font used for a GraphicsText.
		 */
		readonly font?: string;
		/**
		 * This property is used to set the opacity of a GraphicsText.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the parent object of a GraphicsText.
		 */
		readonly parent?: object;
		/**
		 * This property is used to specify the text to display on a GraphicsText.
		 */
		readonly text?: string;
		/**
		 * This property is used to determine the horizontal position where text is displayed, based on the value of the x property of a GraphicsText.
		 */
		readonly textAlign?: nexacro.Enum.HorizontalAlign;
		/**
		 * This property is used to set the length of the area in a GraphicsText where text is displayed. This property is applicable only when the wordWrap property is set to"char".
		 */
		readonly textwidth?: nexacro.Unit.Size;
		/**
		 * This property is used to determine the vertical position where text is displayed, based on the value of the y property of a GraphicsText.
		 */
		readonly verticalAlign?: nexacro.Enum.VerticalAlign;
		/**
		 * This property is used to determine whether to make a GraphicsText visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to set line wrap, conducted when the length of text in a GraphicsText exceeds the value of the textwidth property.
		 */
		readonly wordWrap?: nexacro.Enum.WordWrapType;
		/**
		 * This property is used to specify the distance of the x-coordinate of a position where a GraphicsText object will be written. The distance is calculated based on the position of the parent object.
		 */
		readonly x?: number;
		/**
		 * This property is used to specify the distance of the y-coordinate of a position where a GraphicsText object will be written. The distance is calculated based on the position of the parent object.
		 */
		readonly y?: number;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a GraphicsText.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property sets a font used for a GraphicsText.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {number} v This property is used to set the opacity of a GraphicsText.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {string} v This property is used to specify the text to display on a GraphicsText.
		 * @returns {void} 
		 */
		set_text(v: string): void;
		/**
		 * @param {nexacro.Enum.HorizontalAlign} v This property is used to determine the horizontal position where text is displayed, based on the value of the x property of a GraphicsText.
		 * @returns {void} 
		 */
		set_textAlign(v: nexacro.Enum.HorizontalAlign): void;
		/**
		 * @param {(number|nexacro.Unit.Size)} v This property is used to set the length of the area in a GraphicsText where text is displayed. This property is applicable only when the wordWrap property is set to"char".
		 * @returns {void} 
		 */
		set_textwidth(v: number|nexacro.Unit.Size): void;
		/**
		 * @param {nexacro.Enum.VerticalAlign} v This property is used to determine the vertical position where text is displayed, based on the value of the y property of a GraphicsText.
		 * @returns {void} 
		 */
		set_verticalAlign(v: nexacro.Enum.VerticalAlign): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a GraphicsText visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {nexacro.Enum.WordWrapType} v This property is used to set line wrap, conducted when the length of text in a GraphicsText exceeds the value of the textwidth property.
		 * @returns {void} 
		 */
		set_wordWrap(v: nexacro.Enum.WordWrapType): void;
		/**
		 * @param {number} v This property is used to specify the distance of the x-coordinate of a position where a GraphicsText object will be written. The distance is calculated based on the position of the parent object.
		 * @returns {void} 
		 */
		set_x(v: number): void;
		/**
		 * @param {number} v This property is used to specify the distance of the y-coordinate of a position where a GraphicsText object will be written. The distance is calculated based on the position of the parent object.
		 * @returns {void} 
		 */
		set_y(v: number): void;
		/**
		 * This method is used to completely remove a GraphicsText from a memory.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method returns the area where a GraphicsText is displayed, including the border of the GraphicsText. The area is calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getBoundRect(): object;
		/**
		 * This method returns the next object among those under the same parent as a GraphicsText.
		 * @returns {object} 
		 */
		getNextSibling(): object;
		/**
		 * This method returns the area where a GraphicsText is displayed, including the border of the GraphicsText. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetBoundRect(): object;
		/**
		 * This method returns the area where a GraphicsText is displayed, with the area calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetRect(): object;
		/**
		 * This method returns the area where a GraphicsText is displayed, excluding the border of the GraphicsText. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetRegion(): object;
		/**
		 * This method returns the previous object among those under the same parent as a GraphicsText.
		 * @returns {object} 
		 */
		getPreviousSibling(): object;
		/**
		 * This method returns the area where a GraphicsText is displayed, with the area calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getRect(): object;
		/**
		 * This method returns the area where a GraphicsText is displayed, excluding the border of the GraphicsText. The area is calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getRegion(): object;
		/**
		 * This method returns whether a GraphicsText holds text.
		 * @returns {boolean} 
		 */
		isEmptyRect(): boolean;
		/**
		 * This method finds the position marked by the coordinates delivered as arguments and returns whether the position is included in the area of a GraphicsText.
		 * @param {number} nX This is the number of pixels, indicating the x-coordinate of the position whose inclusion is checked by this method.

The value is calculated based on the Graphics component.
		 * @param {number} nY This is the number of pixels, indicating the y-coordinate of the position whose inclusion is checked by this method.

The value is calculated based on the Graphics component.
		 * @returns {boolean} 
		 */
		isHitTest(nX: number, nY: number): boolean;
		/**
		 * This method is used to rotate a GraphicsText.
		 * @param {number} nAngle This is a number indicating the angle at which the GraphicsText rotates.

If the value is a positive number, the GraphicsText will rotate clockwise.
If the value is a negative number, the GraphicsText will rotate counterclockwise.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis of the rotation.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating a y-coordinate that serves as an axis of the rotation.
The value is calculated based on the parent object.

The default value is 0.
		 */
		rotate(nAngle: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to scale a GraphicsText up/down.
		 * @param {number} nScaleX This is a number, indicating the scale in which the width of the GraphicsText is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsText will be scaled up.
If you specify a number smaller than 1.0, the GraphicsText will be scaled down.
		 * @param {number} nScaleY This is a number, indicating the scale in which the height of the GraphicsText is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsText will be scaled up.
If you specify a number smaller than 1.0, the GraphicsText will be scaled down.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for scaling up/down the GraphicsText.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating a y-coordinate that serves as an axis for scaling up/down the GraphicsText.
The value is calculated based on the parent object.

The default value is 0.
		 */
		scale(nScaleX: number, nScaleY: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to set coordinates for clipping a certain region of a GraphicsText.
		 * @param {number} nX This is a number indicating the x-coordinate of a region to clip.

The value is processed based on the assumption that the x property of the GraphicsText holds 0 as its value.
		 * @param {number} nY This is a number indicating the y-coordinate of a region to clip.

The value is processed based on the assumption that the y property of the GraphicsText holds 0 as its value.
		 * @param {number} nWidth This is a number indicating the width of a region to clip.

The value is calculated based on the value of the nX parameter.
		 * @param {number} nHeight This is a number indicating the height of a region to clip.

The value is calculated based on the value of the nY parameter.
		 */
		setClipRect(nX: number, nY: number, nWidth: number, nHeight: number): null;
		/**
		 * This method is used to apply transformational methods to a GraphicsText consecutively based on the original position of the GraphicsText.
		 * @param {string} strMethod This is a string representing a series of transformational methods that will apply to the GraphicsText.

You can use the translate(), scale(), rotate() and shear() methods.
		 */
		setTransform(strMethod: string): null;
		/**
		 * This method is used to shear a GraphicsText.
		 * @param {number} nRadianX This is a radian value at which the GraphicsText will be sheared based on the x-axis.
		 * @param {number} nRadianY This is a radian value at which the GraphicsText will be sheared based on the y-axis.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating an y-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 */
		shear(nRadianX: number, nRadianY: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method returns a string representing the type that constitutes a GraphicsText.
		 * @returns {string} 
		 */
		toString(): string;
		/**
		 * This method is used to apply transformational methods to a GraphicsText.
		 * @param {number} nScaleX This is a number, indicating the scale in which the width of the GraphicsText is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsText will be scaled up.
If you specify a number smaller than 1.0, the GraphicsText will be scaled down.
		 * @param {number} nShearX This is a radian value at which the GraphicsText will be sheared based on the x-axis.
		 * @param {number} nShearY This is a radian value at which the GraphicsText will be sheared based on the y-axis.
		 * @param {number} nScaleY This is a number, indicating the scale in which the height of the GraphicsText is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsText will be scaled up.
If you specify a number smaller than 1.0, the GraphicsText will be scaled down.
		 * @param {number} nTransX This is the number of pixels, indicating the distance at which the GraphicsText will be moved in the direction of the x-axis.
		 * @param {number} nTransY This is the number of pixels, indicating the distance at which the GraphicsText will be moved in the direction of the y-axis.
		 */
		transform(nScaleX: number, nShearX: number, nShearY: number, nScaleY: number, nTransX: number, nTransY: number): null;
		/**
		 * This method is used to move the position of a GraphicsText.
		 * @param {number} nTransX This is the number of pixels, indicating the distance at which the GraphicsText will be moved in the direction of the x-axis.
		 * @param {number} nTransY This is the number of pixels, indicating the distance at which the GraphicsText will be moved in the direction of the y-axis.
		 */
		translate(nTransX: number, nTransY: number): null;
	}
}

