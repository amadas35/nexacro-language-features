// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    GraphicsPath: nexacro.GraphicsPath;
}

    
declare namespace nexacro {
    type GraphicsPathOmitKeys = 'id';
	
	interface GraphicsPath extends Omit<nexacro._GraphicsObject, GraphicsPathOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.GraphicsPath;
	    /**
		 * This property is used to color the inside area of a GraphicsPath.
		 */
		readonly fillstyle?: string;
		/**
		 * This property sets a value used to determine whether the corner of a GraphicsPath becomes a beveled join even if the strokejoin property is set to "miter".
		 */
		readonly miterlimit?: number;
		/**
		 * This property is used to set the opacity of a GraphicsPath.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the parent object of a GraphicsPath.
		 */
		readonly parent?: object;
		/**
		 * This property is used to set the cap of the path displayed in a GraphicsPath.
		 */
		readonly strokecap?: nexacro.Enum.StrokeCap;
		/**
		 * This property determines the shape of joins in a GraphicsPath object.
		 */
		readonly strokejoin?: nexacro.Enum.StrokeJoin;
		/**
		 * This property is used to set the style and color of a path in a GraphicsPath.
		 */
		readonly strokepen?: string;
		/**
		 * This property is used to determine whether to make a GraphicsPath visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to set the x-coordinate of a position where a GraphicsPath is displayed. The coordinate is calculated based on the position of the parent object.
		 */
		readonly x?: number;
		/**
		 * This property is used to set the y-coordinate of a position where a GraphicsPath is displayed. The coordinate is calculated based on the position of the parent object.
		 */
		readonly y?: number;
		/**
		 * @param {string} v This property is used to color the inside area of a GraphicsPath.
		 * @returns {void} 
		 */
		set_fillstyle(v: string): void;
		/**
		 * @param {number} v This property sets a value used to determine whether the corner of a GraphicsPath becomes a beveled join even if the strokejoin property is set to "miter".
		 * @returns {void} 
		 */
		set_miterlimit(v: number): void;
		/**
		 * @param {number} v This property is used to set the opacity of a GraphicsPath.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {nexacro.Enum.StrokeCap} v This property is used to set the cap of the path displayed in a GraphicsPath.
		 * @returns {void} 
		 */
		set_strokecap(v: nexacro.Enum.StrokeCap): void;
		/**
		 * @param {nexacro.Enum.StrokeJoin} v This property determines the shape of joins in a GraphicsPath object.
		 * @returns {void} 
		 */
		set_strokejoin(v: nexacro.Enum.StrokeJoin): void;
		/**
		 * @param {string} v This property is used to set the style and color of a path in a GraphicsPath.
		 * @returns {void} 
		 */
		set_strokepen(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a GraphicsPath visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {number} v This property is used to set the x-coordinate of a position where a GraphicsPath is displayed. The coordinate is calculated based on the position of the parent object.
		 * @returns {void} 
		 */
		set_x(v: number): void;
		/**
		 * @param {number} v This property is used to set the y-coordinate of a position where a GraphicsPath is displayed. The coordinate is calculated based on the position of the parent object.
		 * @returns {void} 
		 */
		set_y(v: number): void;
		/**
		 * This method is used to add a path of an elliptical arc to a GraphicsPath. The arc stretches from the current position to the position delivered as arguments.
		 * @param {number} nX It specifies a pixel to designate the x-coordinate of a point to add to the path.
		 * @param {number} nY It specifies a pixel to designate the y-coordinate of a point to add to the path.
		 * @param {number} nRadiusX It specifies the horizontal radius of an elliptical arc in pixel.
		 * @param {number} nRadiusY It specifies the vertical radius of an elliptical arc in pixel.
		 * @param {number} nRotation It specifies an angle at which the x-axis will rotate to draw an elliptical arc.

If you specify a 180 degree, the result will be the same as a 0 degree.
		 * @param {boolean} bClockwise It specifies the direction of drawing elliptical arcs.

For "true", the GraphicsControl will draw arcs clockwise, based on the straight line from the current position to the position represent by the values of nX and nY.
For "false", the GraphicsControl will draw arcs counterclockwise, based on the straight line from the current position to the position represent by the values of nX and nY.
		 * @param {boolean} bLarge It chooses between the bigger arc and smaller arc.

For "true", the GraphicsControl will display the bigger arc in the direction indicated by bClockwise.
For "false", the GraphicsControl will display the smaller arc in the direction indicated by bClockwise.
		 */
		arcTo(nX: number, nY: number, nRadiusX: number, nRadiusY: number, nRotation: number, bClockwise: boolean, bLarge: boolean): null;
		/**
		 * This method is used to add a path of a cubic Bezier curve to a GraphicsPath. The curve stretches from the current position to the position delivered as arguments.
		 * @param {number} nCBeginX It specifies a pixel to designate the x-coordinate of a beginning control point, which is used to manipulate the curve.
		 * @param {number} nCBeginY It specifies a pixel to designate the y-coordinate of a beginning control point, which is used to manipulate the curve.
		 * @param {number} nCEndX It specifies a pixel to designate the x-coordinate of an ending control point, which is used to manipulate the curve.
		 * @param {number} nCEndY It specifies a pixel to designate the y-coordinate of an ending control point, which is used to manipulate the curve.
		 * @param {number} nX It specifies a pixel to designate the x-coordinate of a point to add to the path.
		 * @param {number} nY It specifies a pixel to designate the y-coordinate of a point to add to the path.
		 */
		bezierCurveTo(nCBeginX: number, nCBeginY: number, nCEndX: number, nCEndY: number, nX: number, nY: number): null;
		/**
		 * This method is used to remove all the paths set on a GraphicsPath.
		 */
		clear(): null;
		/**
		 * This method is used to draw a straight line between a beginning and ending points specified in a GraphicsPath object.
		 */
		closePath(): null;
		/**
		 * This method is used to completely remove a GraphicsPath from a memory.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method returns the area where a GraphicsPath is displayed, including the border of the GraphicsPath. The area is calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getBoundRect(): object;
		/**
		 * This method returns the next object among those under the same parent as a GraphicsPath.
		 * @returns {object} 
		 */
		getNextSibling(): object;
		/**
		 * This method returns the area where a GraphicsPath is displayed, including the border of the GraphicsPath. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetBoundRect(): object;
		/**
		 * This method returns the area where a GraphicsPath is displayed, including the border of the GraphicsPath. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetRect(): object;
		/**
		 * This method returns the area where a GraphicsPath is displayed, excluding the border of the GraphicsPath. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetRegion(): object;
		/**
		 * This method returns the data on the path set in a GraphicsPath with the returned data in the form of a SVG string.
		 * @returns {string} 
		 */
		getPathData(): string;
		/**
		 * This method returns the previous object among those under the same parent as a GraphicsPath.
		 * @returns {object} 
		 */
		getPreviousSibling(): object;
		/**
		 * This method returns the area where a GraphicsPath is displayed, with the area calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getRect(): object;
		/**
		 * This method returns the area where a GraphicsPath is displayed, excluding the border of the GraphicsPath. The area is calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getRegion(): object;
		/**
		 * This method returns whether a GraphicsPath has a path.
		 * @returns {boolean} 
		 */
		hasSegments(): boolean;
		/**
		 * This method finds the position marked by the coordinates delivered as arguments and returns whether the position is included in the area of a GraphicsPath.
		 * @param {number} nX This is the number of pixels, indicating the x-coordinate of the position whose inclusion is checked by this method.

The value is calculated based on the Graphics component.
		 * @param {number} nY This is the number of pixels, indicating the y-coordinate of the position whose inclusion is checked by this method.

The value is calculated based on the Graphics component.
		 * @returns {boolean} 
		 */
		isHitTest(nX: number, nY: number): boolean;
		/**
		 * This method returns whether the position of a certain point is included in the area of a GraphicsPath.
		 * @param {object} objPoint This is a Point--an object of Nexacro Platform--to check for whether it is included in the area of the GraphicsPath.

The Point is calculated based on the Graphics component.
		 * @param {number} nTolerance This is a number, indicating the maximum distance by which this method determines whether the position defined by objPoint is included in the area of the GraphicsPath.

That is to say, the position will be determined to be included in the area of the GraphicsPath if this value is larger than the distance between the position and the area of the GraphicsPath.
		 * @returns {boolean} 
		 */
		isPointInPath(objPoint: object, nTolerance?: number): boolean;
		/**
		 * This method is used to add a straight line between the current position and a position delivered as arguments to a GraphicsPath object.
		 * @param {number} nX It specifies the x-coordinate of a target position in pixel.
		 * @param {number} nY It specifies the y-coordinate of a target position in pixel.
		 */
		lineTo(nX: number, nY: number): null;
		/**
		 * This method is used to move the beginning point of a GraphicsPath.
		 * @param {number} nX This is the number of pixels, indicating the distance by which the x-coordinate of the beginning point moves.

This value is processed based on the current x-coordinate.
		 * @param {number} nY This is the number of pixels, indicating the distance by which the y-coordinate of the beginning point moves.

This value is processed based on the current y-coordinate.
		 */
		moveBy(nX: number, nY: number): null;
		/**
		 * This method is used to set the beginning point of a GraphicsPath object.
		 * @param {number} nX It is the x-coordinate of the beginning point of a GraphicsPath object, specified in pixel.
		 * @param {number} nY It is the y-coordinate of the beginning point of a GraphicsPath object, specified in pixel.
		 */
		moveTo(nX: number, nY: number): null;
		/**
		 * This method is used to add a path of a quadratic Bezier curve to a GraphicsPath. The curve stretches from the current position to the position delivered as arguments.
		 * @param {number} nControlX It specifies a pixel to designate the x-coordinate of a control point, which is used to manipulate the curve.
		 * @param {number} nControlY It specifies a pixel to designate the y-coordinate of a control point, which is used to manipulate the curve.
		 * @param {number} nX It specifies a pixel to designate the x-coordinate of a point to add to the path.
		 * @param {number} nY It specifies a pixel to designate the y-coordinate of a point to add to the path.
		 */
		quadraticCurveTo(nControlX: number, nControlY: number, nX: number, nY: number): null;
		/**
		 * This method is used to rotate a GraphicsPath.
		 * @param {number} nAngle This is a number indicating the angle at which the GraphicsPath rotates.

If the value is a positive number, the GraphicsPath will rotate clockwise.
If the value is a negative number, the GraphicsPath will rotate counterclockwise.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis of the rotation.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating a y-coordinate that serves as an axis of the rotation.
The value is calculated based on the parent object.

The default value is 0.
		 */
		rotate(nAngle: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to scale a GraphicsPath up/down.
		 * @param {number} nScaleX This is a number, indicating the scale in which the width of the GraphicsPath is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsPath will be scaled up.
If you specify a number smaller than 1.0, the GraphicsPath will be scaled down.
		 * @param {number} nScaleY This is a number, indicating the scale in which the height of the GraphicsPath is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsPath will be scaled up.
If you specify a number smaller than 1.0, the GraphicsPath will be scaled down.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for scaling up/down the GraphicsPath.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating a y-coordinate that serves as an axis for scaling up/down the GraphicsPath.
The value is calculated based on the parent object.

The default value is 0.
		 */
		scale(nScaleX: number, nScaleY: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to set coordinates for clipping a certain region of a GraphicsPath.
		 * @param {number} nX This is a number indicating the x-coordinate of a region to clip.

The value is processed based on the assumption that the x property of the GraphicsPath holds 0 as its value.
		 * @param {number} nY This is a number indicating the y-coordinate of a region to clip.

The value is processed based on the assumption that the y property of the GraphicsPath holds 0 as its value.
		 * @param {number} nWidth This is a number indicating the width of a region to clip.

The value is calculated based on the value of the nX parameter.
		 * @param {number} nHeight This is a number indicating the height of a region to clip.

The value is calculated based on the value of the nY parameter.
		 */
		setClipRect(nX: number, nY: number, nWidth: number, nHeight: number): null;
		/**
		 * This method is used to set a path in a GraphicsPath by specifying the path data in the form of SVG sting.
		 * @param {string} strPath - You can specify data on a path in the form of SVG sting.

The below is a list of the applicable SVG string formats
- "M x,y": a beginning point is set in the position indicated by the x and y coordinates.
- "L x,y": a line is drawn from the current position to the point indicated by the x and y coordinates.
- "H x": a horizontal line is drawn from the current position to the point indicated by the x coordinate.
- "V y": a vertical line is drawn from the current position to the point indicated by the y coordinate.
- "Z": a line is drawn from the current position to the beginning point.
- "C x1,y1 x2,y2 x,y": a cubic Bezier curve is drawn from the current position to the point indicated by the x and y coordinates.
- "S x2,y2 x,y": a cubic Bezier curve is drawn from the current position to the point indicated by the x and y coordinates.
- "Q x1,y1 x,y": a quadratic Bezier curve is drawn from the current position to the point indicated by the x and y coordinates.
- "T x,y": a quadratic Bezier curve is drawn from the current position to the point indicated by the x and y coordinates.
- "A rx,ry rotation large clockwise x,y": an elliptical arc is drawn from the current position to the point indicated by the x and y coordinates.
		 */
		setPathData(strPath: string): null;
		/**
		 * This method is used to apply transformational methods to a GraphicsPath consecutively based on the original position of the GraphicsPath.
		 * @param {string} strMethod This is a string representing a series of transformational methods that will apply to the GraphicsPath.

You can use the translate(), scale(), rotate() and shear() methods.
		 */
		setTransform(strMethod: string): null;
		/**
		 * This method is used to shear a GraphicsPath.
		 * @param {number} nRadianX This is a radian value at which the GraphicsPath will be sheared based on the x-axis.
		 * @param {number} nRadianY This is a radian value at which the GraphicsPath will be sheared based on the y-axis.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating an y-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 */
		shear(nRadianX: number, nRadianY: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method returns a string representing the type that constitutes a GraphicsPath.
		 * @returns {string} 
		 */
		toString(): string;
		/**
		 * This method is used to apply transformational methods to a GraphicsPath.
		 * @param {number} nScaleX This is a number, indicating the scale in which the width of the GraphicsPath is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsPath will be scaled up.
If you specify a number smaller than 1.0, the GraphicsPath will be scaled down.
		 * @param {number} nShearX This is a radian value at which the GraphicsPath will be sheared based on the x-axis.
		 * @param {number} nShearY This is a radian value at which the GraphicsPath will be sheared based on the y-axis.
		 * @param {number} nScaleY This is a number, indicating the scale in which the height of the GraphicsPath is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsPath will be scaled up.
If you specify a number smaller than 1.0, the GraphicsPath will be scaled down.
		 * @param {number} nTransX This is the number of pixels, indicating the distance at which the GraphicsPath will be moved in the direction of the x-axis.
		 * @param {number} nTransY This is the number of pixels, indicating the distance at which the GraphicsPath will be moved in the direction of the y-axis.
		 */
		transform(nScaleX: number, nShearX: number, nShearY: number, nScaleY: number, nTransX: number, nTransY: number): null;
		/**
		 * This method is used to move the position of a GraphicsPath.
		 * @param {number} nTransX This is the number of pixels, indicating the distance at which the GraphicsPath will be moved in the direction of the x-axis.
		 * @param {number} nTransY This is the number of pixels, indicating the distance at which the GraphicsPath will be moved in the direction of the y-axis.
		 */
		translate(nTransX: number, nTransY: number): null;
	}
}

