// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    GraphicsGroup: nexacro.GraphicsGroup;
}

    
declare namespace nexacro {
    type GraphicsGroupOmitKeys = 'fillstyle'|'id'|'miterlimit'|'opacity'|'strokecap'|'strokejoin'|'strokepen';
	
	interface GraphicsGroup extends Omit<nexacro._GraphicsObject, GraphicsGroupOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.GraphicsGroup;
	    /**
		 * This read-only property holds the parent object of a GraphicsGroup.
		 */
		readonly parent?: object;
		/**
		 * This property is used to determine whether to make a GraphicsGroup visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to set the x-coordinate of a position where a GraphicsGroup is displayed. The coordinate is calculated based on the position of the parent object.
		 */
		readonly x?: number;
		/**
		 * This property is used to set the y-coordinate of a position where a GraphicsGroup is displayed. The coordinate is calculated based on the position of the parent object.
		 */
		readonly y?: number;
		/**
		 * @param {boolean} v This property is used to determine whether to make a GraphicsGroup visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {number} v This property is used to set the x-coordinate of a position where a GraphicsGroup is displayed. The coordinate is calculated based on the position of the parent object.
		 * @returns {void} 
		 */
		set_x(v: number): void;
		/**
		 * @param {number} v This property is used to set the y-coordinate of a position where a GraphicsGroup is displayed. The coordinate is calculated based on the position of the parent object.
		 * @returns {void} 
		 */
		set_y(v: number): void;
		/**
		 * This method is used to add a Graphics object as a child to a GraphicsGroup.
		 * @param {string} strID It specifies the unique ID of a Graphics object to add.
		 * @param {object} objGObject It specifies a Graphics object to be added as a child.
		 * @returns {number} 
		 */
		addChild(strID: string, objGObject: object): number;
		/**
		 * This method is used to remove an object added to a GraphicsGroup completely from a memory.
		 */
		clear(): null;
		/**
		 * This method is used to completely remove a GraphicsGroup from a memory.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method returns the area where a GraphicsGroup is displayed, including the border of the GraphicsGroup. The area is calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getBoundRect(): object;
		/**
		 * This method returns the first object among those that have been added to a GraphicsGroup.
		 * @returns {object} 
		 */
		getFirstChild(): object;
		/**
		 * This method returns the last object among those that have been added to a GraphicsGroup.
		 * @returns {object} 
		 */
		getLastChild(): object;
		/**
		 * This method returns the next object among those under the same parent as a GraphicsGroup.
		 * @returns {object} 
		 */
		getNextSibling(): object;
		/**
		 * This method searches the objects added to a GraphicsGroup and returns the object of a certain ID among them.
		 * @param {string} strID This is a string that represents the ID of an object to obtain.
		 * @returns {object} 
		 */
		getObjectByID(strID: string): object;
		/**
		 * This method returns an array containing the objects added to a GraphicsGroup.
		 * @returns {any[]} 
		 */
		getObjects(): any[];
		/**
		 * This method returns the area where a GraphicsGroup is displayed, including the border of the GraphicsGroup. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetBoundRect(): object;
		/**
		 * This method returns the area where a GraphicsGroup is displayed, with the area calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetRect(): object;
		/**
		 * This method returns the area where a GraphicsGroup is displayed, excluding the border of the GraphicsGroup. The area is calculated based on the parent object.
		 * @returns {object} 
		 */
		getOffsetRegion(): object;
		/**
		 * This method returns the previous object among those under the same parent as a GraphicsGroup.
		 * @returns {object} 
		 */
		getPreviousSibling(): object;
		/**
		 * This method returns the area where a GraphicsGroup is displayed, with the area calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getRect(): object;
		/**
		 * This method returns the area where a GraphicsGroup is displayed, excluding the border of the GraphicsGroup. The area is calculated based on the Graphics component.
		 * @returns {object} 
		 */
		getRegion(): object;
		/**
		 * This method returns whether a GraphicsGroup has any Graphics object.
		 * @returns {boolean} 
		 */
		hasChild(): boolean;
		/**
		 * This method finds the object of a certain ID among the objects added to a GraphicsGroup and then returns the index number of the found object.
		 * @param {string} strID This is a string that represents the ID of an object whose index number you want to obtain.
		 * @returns {number} 
		 */
		indexOf(strID: string): number;
		/**
		 * This method is used to add a Graphics object as a child to a certain position in a GraphicsGroup.
		 * @param {number} nIdx This is the index number of the position where a Graphics object will be inserted.
		 * @param {string} strID This is a string representing the ID of a Graphics object that will be inserted.
		 * @param {any} objGObject 
		 * @returns {number} 
		 */
		insertChild(nIdx: number, strID: string, objGObject: any): number;
		/**
		 * This method finds the position marked by the coordinates delivered as arguments and returns whether the position is included in the area of a GraphicsGroup.
		 * @param {number} nX This is the number of pixels, indicating the x-coordinate of the position whose inclusion is checked by this method.

The value is calculated based on the Graphics component.
		 * @param {number} nY This is the number of pixels, indicating the y-coordinate of the position whose inclusion is checked by this method.

The value is calculated based on the Graphics component.
		 * @returns {boolean} 
		 */
		isHitTest(nX: number, nY: number): boolean;
		/**
		 * This method is used to remove a Graphics object of a certain ID among the children of a GraphicsGroup.
		 * @param {string} strID This is a string that represents the ID of a Graphics object to remove.
		 * @returns {object} 
		 */
		removeChild(strID: string): object;
		/**
		 * This method is used to rotate a GraphicsGroup.
		 * @param {number} nAngle This is a number indicating the angle at which the GraphicsGroup rotates.

If the value is a positive number, the GraphicsGroup will rotate clockwise.
If the value is a negative number, the GraphicsGroup will rotate counterclockwise.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis of the rotation.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating a y-coordinate that serves as an axis of the rotation.
The value is calculated based on the parent object.

The default value is 0.
		 */
		rotate(nAngle: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to scale a GraphicsGroup up/down.
		 * @param {number} nScaleX This is a number, indicating the scale in which the width of the GraphicsGroup is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsGroup will be scaled up.
If you specify a number smaller than 1.0, the GraphicsGroup will be scaled down.
		 * @param {number} nScaleY This is a number, indicating the scale in which the height of the GraphicsGroup is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsGroup will be scaled up.
If you specify a number smaller than 1.0, the GraphicsGroup will be scaled down.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for scaling up/down the GraphicsGroup.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating a y-coordinate that serves as an axis for scaling up/down the GraphicsGroup.
The value is calculated based on the parent object.

The default value is 0.
		 */
		scale(nScaleX: number, nScaleY: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to set coordinates for clipping a certain region of a GraphicsGroup.
		 * @param {number} nX This is a number indicating the x-coordinate of a region to clip.

The value is processed based on the assumption that the x property of the GraphicsGroup holds 0 as its value.
		 * @param {number} nY This is a number indicating the y-coordinate of a region to clip.

The value is processed based on the assumption that the y property of the GraphicsGroup holds 0 as its value.
		 * @param {number} nWidth This is a number indicating the width of a region to clip.

The value is calculated based on the value of the nX parameter.
		 * @param {number} nHeight This is a number indicating the height of a region to clip.

The value is calculated based on the value of the nY parameter.
		 */
		setClipRect(nX: number, nY: number, nWidth: number, nHeight: number): null;
		/**
		 * This method is used to apply transformational methods to a GraphicsGroup consecutively based on the original position of the GraphicsGroup.
		 * @param {string} strMethod This is a string representing a series of transformational methods that will apply to the GraphicsGroup.

You can use the translate(), scale(), rotate() and shear() methods.
		 */
		setTransform(strMethod: string): null;
		/**
		 * This method is used to shear a GraphicsGroup.
		 * @param {number} nRadianX This is a radian value at which the GraphicsGroup will be sheared based on the x-axis.
		 * @param {number} nRadianY This is a radian value at which the GraphicsGroup will be sheared based on the y-axis.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating an y-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 */
		shear(nRadianX: number, nRadianY: number, nCenterX?: number, nCenterY?: number): null;
		/**
		 * This method is used to shear a GraphicsGroup.
		 * @param {number} nCenterX This is a number indicating an x-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nCenterY This is a number indicating an y-coordinate that serves as an axis for shearing.
The value is calculated based on the parent object.

The default value is 0.
		 * @param {number} nRadianX This is a radian value at which the GraphicsGroup will be sheared based on the x-axis.
		 * @param {number} nRadianY This is a radian value at which the GraphicsGroup will be sheared based on the y-axis.
		 */
		toString(nCenterX: number, nCenterY: number, nRadianX: number, nRadianY: number): null;
		/**
		 * This method is used to apply transformational methods to a GraphicsGroup.
		 * @param {number} nScaleX This is a number, indicating the scale in which the width of the GraphicsGroup is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsGroup will be scaled up.
If you specify a number smaller than 1.0, the GraphicsGroup will be scaled down.
		 * @param {number} nShearX This is a radian value at which the GraphicsGroup will be sheared based on the x-axis.
		 * @param {number} nShearY This is a radian value at which the GraphicsGroup will be sheared based on the y-axis.
		 * @param {number} nScaleY This is a number, indicating the scale in which the height of the GraphicsGroup is scaled up/down.

If you specify a number bigger than 1.0, the GraphicsGroup will be scaled up.
If you specify a number smaller than 1.0, the GraphicsGroup will be scaled down.
		 * @param {number} nTransX This is the number of pixels, indicating the distance at which the GraphicsGroup will be moved in the direction of the x-axis.
		 * @param {number} nTransY This is the number of pixels, indicating the distance at which the GraphicsGroup will be moved in the direction of the y-axis.
		 */
		transform(nScaleX: number, nShearX: number, nShearY: number, nScaleY: number, nTransX: number, nTransY: number): null;
		/**
		 * This method is used to move the position of a GraphicsGroup.
		 * @param {number} nTransX This is the number of pixels, indicating the distance at which the GraphicsGroup will be moved in the direction of the x-axis.
		 * @param {number} nTransY This is the number of pixels, indicating the distance at which the GraphicsGroup will be moved in the direction of the y-axis.
		 */
		translate(nTransX: number, nTransY: number): null;
	}
}

