// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    Grid: nexacro.Grid;
}

    
declare namespace nexacro {
    type GridOmitKeys = 'boxShadow'|'createcellasync'|'expr'|'hotkey'|'id'|'padding'|'textAlign'|'textDecoration'|'verticalAlign'|'wordWrap'|'text'|'getDisplayText'|'getFocus'|'ondblclick';
	
	interface Grid extends Omit<nexacro.Component, GridOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.Grid;
	    /**
		 * This property is used to specify the action printed as an accessibility feature when a selection box moves to a Grid.
		 */
		readonly accessibilityaction?: string;
		/**
		 * This property is used to determine whether to print accessibility features of the children when a selection box moves to a Grid.
		 */
		readonly accessibilitydesclevel?: nexacro.Enum.DescLevel;
		/**
		 * This property is used to specify the description printed as an accessibility feature when a selection box moves to a Grid.
		 */
		readonly accessibilitydescription?: string;
		/**
		 * This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a Grid.
		 */
		readonly accessibilityenable?: boolean;
		/**
		 * This property is used to specify the label printed as an accessibility feature when a selection box moves to a Grid.
		 */
		readonly accessibilitylabel?: string;
		/**
		 * This property is used to set the role of a Grid. The role is printed as accessibility functionality when a selection box moves to the component.
		 */
		readonly accessibilityrole?: nexacro.Enum.Role;
		/**
		 * This property is used to define how the editable control of a Grid cell becomes activated when the cell is selected.
		 */
		readonly autoenter?: nexacro.Enum.GridAutoEnterType;
		/**
		 * This method determines whether to adjust the column widths of a Grid automatically so that the entire Grid columns will be seen without scrolling the Grid.
		 */
		readonly autofittype?: nexacro.Enum.GridAutoFitType;
		/**
		 * This property determines in which bands rows or columns are resized automatically by the autosizingtype property.
		 */
		readonly autosizebandtype?: nexacro.Enum.GridAutoSizeBandType;
		/**
		 * This method determines how to resize the rows and columns of a Grid automatically so that all the data will be displayed.
		 */
		readonly autosizingtype?: nexacro.Enum.GridAutoSizingType;
		/**
		 * This property is used to set the timing of applying a selected value when the Grid cell is the Combo or Calendar type.
		 */
		readonly autoupdatetype?: nexacro.Enum.GridAutoUpdateType;
		/**
		 * This property is used to set the background of a Grid.
		 */
		readonly background?: string;
		/**
		 * This property is used to set the ID of a Dataset bound to the whole cells of a Grid.
		 */
		readonly binddataset?: string;
		/**
		 * This read-only property holds the body band object of a Grid.
		 */
		readonly body?: object;
		/**
		 * This property is used to set the shape of the corners of a Grid.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Grid's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to size the drop-down button of a cell whose type is Calendar.
		 */
		readonly cellcalendarbuttonsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to size a calendar that pops up from a Grid cell whose type is Calendar.
		 */
		readonly cellcalendarpopupsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to determine how to display a pop-up calendar (a date picker) when a Grid cell is calendar type.
		 */
		readonly cellcalendarpopuptype?: nexacro.Enum.CalendarPopupType;
		/**
		 * This property is used to size the checkbox in a cell when the type of the cell is a checkbox.
		 */
		readonly cellcheckboxsize?: number;
		/**
		 * This property is used to determine which area you need to click to change the value of a Grid cell whose form is a checkbox.
		 */
		readonly cellclickbound?: nexacro.Enum.GridCellClickBound;
		/**
		 * This property is used to size the drop-down button of a cell whose type is Combo.
		 */
		readonly cellcombobuttonsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to size an item list that pops up from a Grid cell whose type is Calendar.
		 */
		readonly cellcombopopupsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to determine how to display an item list when a Grid cell is the Combo type.
		 */
		readonly cellcombopopuptype?: nexacro.Enum.PopupType;
		/**
		 * This property is used to specify the width of the scrollbar displayed in a Grid cell whose type is Combo. The scrollbar is included in the item list of the Combo.
		 */
		readonly cellcomboscrollbarsize?: number;
		/**
		 * This property is used to determine whether to update the expression values of other rows and cells when the expression value of the relevant cell is updated.
		 */
		readonly cellexprupdatecondition?: nexacro.Enum.GridCellExprCond;
		/**
		 * This property is used to allow to change the order of columns in a Grid by dragging a column from the head band.
		 */
		readonly cellmovingtype?: nexacro.Enum.GridMoveCellType;
		/**
		 * This property determines in which bands rows or columns can be resized.
		 */
		readonly cellsizebandtype?: nexacro.Enum.GridCellSizeBandType;
		/**
		 * This property is used to determine how to resize columns and rows of a Grid by using a mouse.
		 */
		readonly cellsizingtype?: nexacro.Enum.GridCellSizingType;
		/**
		 * This property is used to size the scrollbar displayed in a Grid cell whose type is TextArea.
		 */
		readonly celltextareascrollbarsize?: number;
		/**
		 * This property is used to set the color of the text displayed in a Grid.
		 */
		readonly color?: string;
		/**
		 * This property is used to set the style of a Grid by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This read-only property holds the index number of the currently-selected cell of a Grid.
		 */
		readonly currentcell?: number;
		/**
		 * This read-only property holds the column index number of a currently-selected cell.
		 */
		readonly currentcol?: number;
		/**
		 * This read-only property holds the index number of the currently-selected row of a Grid.
		 */
		readonly currentrow?: number;
		/**
		 * This read-only property holds the sub-row index number of a currently-selected cell.
		 */
		readonly currentsubrow?: number;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a Grid.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to determine whether to enable a Grid.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a Grid.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property is used to redraw the screen automatically when a Grid is changed.
		 */
		readonly enableredraw?: boolean;
		/**
		 * This property determines whether to automatically adjust row heights together or individually. The adjustment here is conducted by the autosizingtype property.
		 */
		readonly extendsizetype?: nexacro.Enum.GridExSizeType;
		/**
		 * This property is used to specify the position of a row that pops up while you scroll the Grid vertically.
		 */
		readonly fastvscrolltype?: nexacro.Enum.Grid_FastVScrollType;
		/**
		 * This property determines how to display fields without data in a Grid.
		 */
		readonly fillareatype?: nexacro.Enum.GridFillAreaType;
		/**
		 * This property sets a font used for a Grid.
		 */
		readonly font?: string;
		/**
		 * This property is used to specify the ID of a format that will be displayed on the Grid. The format is one of those defined by the formats property.
		 */
		readonly formatid?: string;
		/**
		 * This property holds the information on all the formats of a Grid.
		 */
		readonly formats?: string;
		/**
		 * This read-only property holds the head band object of a Grid.
		 */
		readonly head?: object;
		/**
		 * This property is used to specify the height of a Grid.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This read-only property holds the horizontal scrollbar sub-control of a Grid.
		 */
		readonly hscrollbar?: object;
		/**
		 * This property is used to set the ID of an InitValue to be applied to an Grid.
		 */
		readonly initvalueid?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Grid's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between characters (kerning) displayed in a Grid.
		 */
		readonly letterSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This property is used to set a locale applied to a Grid.
		 */
		readonly locale?: nexacro.Enum.LocaleCode;
		/**
		 * This property is used to set the maximum height of a Grid for the component to be displayed on the screen.
		 */
		readonly maxheight?: number;
		/**
		 * This property is used to set the maximum width of a Grid for the component to be displayed on the screen.
		 */
		readonly maxwidth?: number;
		/**
		 * This property is used to set the minimum height of a Grid for the component to be displayed on the screen.
		 */
		readonly minheight?: number;
		/**
		 * This property is used to set the minimum width of a Grid for the component to be displayed on the screen.
		 */
		readonly minwidth?: number;
		/**
		 * This property determines the area where the mouseover pseudo-class is applied when a mouse cursor hovers over a Grid.
		 */
		readonly mouseovertype?: nexacro.Enum.MouseOverType;
		/**
		 * This property is used to specify the name of a Grid.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a Grid.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a Grid.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the location of an image that is printed when a Grid has no data to display.
		 */
		readonly nodataimage?: string;
		/**
		 * This property is used to define the text that will be printed when the Grid has no data to display.
		 */
		readonly nodatatext?: string;
		/**
		 * This property is used to set the opacity of a Grid.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the number of Grid rows that can be seen on the screen without scrolling.
		 */
		readonly pagerowcount?: number;
		/**
		 * This read-only property holds the parent object of a Grid.
		 */
		readonly parent?: object;
		/**
		 * This property is used to specify the index number of a step page where a Grid is displayed if the parent object uses the step feature.
		 */
		readonly positionstep?: number;
		/**
		 * This property determines whether a Grid is editable.
		 */
		readonly readonly?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Grid's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This read-only property holds the number of entire rows in a Grid.
		 */
		readonly rowcount?: number;
		/**
		 * This property is used to define the direction of printing internal contents or components in a Grid.
		 */
		readonly rtl?: boolean;
		/**
		 * This property is used to set the minimum size of the TrackBar control featured by the scrollbar of a Grid.
		 */
		readonly scrollbarbarminsize?: number;
		/**
		 * This property is used to set the base size of a scrollbar where its TrackBar control will disappear if the Grid becomes smaller than the specified size.
		 */
		readonly scrollbarbaroutsize?: number;
		/**
		 * This property is used to size the decreasing button (DecButton control) of the scrollbar fitted to a Grid.
		 */
		readonly scrollbardecbuttonsize?: number;
		/**
		 * This property is used to specify the size of the increase button (IncButton control) of a scrollbar displayed in a Grid.
		 */
		readonly scrollbarincbuttonsize?: number;
		/**
		 * This property is used to size the scrollbar displayed in a Grid component.
		 */
		readonly scrollbarsize?: number;
		/**
		 * This property is used to size the TrackBar control of a scrollbar displayed in a Grid.
		 */
		readonly scrollbartrackbarsize?: number;
		/**
		 * This property determines how scrollbars work in a Grid.
		 */
		readonly scrollbartype?: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`;
		/**
		 * This property determines how to refresh the screen when a Grid is scrolled in Internet Explorer.
		 */
		readonly scrolldisplaymode?: nexacro.Enum.Grid_ScrollDPMode;
		/**
		 * This property is used to set the size of the scroll indicator bars displayed in a Grid.
		 */
		readonly scrollindicatorsize?: number;
		/**
		 * This property is used to specify a unit for scrolling a Grid.
		 */
		readonly scrollpixel?: nexacro.Enum.GridScrollPixel;
		/**
		 * This property is used to set the types of scrolling applied to a Grid.
		 */
		readonly scrolltype?: nexacro.Enum.ScrollType;
		/**
		 * This property is used to determine the point when selection is made. This property is applicable when you click a row or cell in a Grid to make the selection.
		 */
		readonly selectchangetype?: nexacro.Enum.GridSelectChangeType;
		/**
		 * This read-only property holds the column index numbers of the cells that constitute the ending of selected areas in a Grid.
		 */
		readonly selectendcol?: number;
		/**
		 * This read-only property holds the row index numbers of the cells that constitute the ending of selected areas in a Grid.
		 */
		readonly selectendrow?: number;
		/**
		 * This read-only property holds the sub-row index number of the cell that constitutes the ending of a selected area in a Grid.
		 */
		readonly selectendsubrow?: number;
		/**
		 * This property determines the action taken as a result of a dragging operation in a Grid.
		 */
		readonly selectscrollmode?: nexacro.Enum.SelectScrollMode;
		/**
		 * This read-only property holds the column index numbers of the cells that constitute the beginning of selected areas in a Grid.
		 */
		readonly selectstartcol?: number;
		/**
		 * This read-only property holds the row index numbers of the cells that constitute the beginning of selected areas in a Grid.
		 */
		readonly selectstartrow?: number;
		/**
		 * This read-only property holds the sub-row index number of the cell that constitutes the beginning of a selected area in a Grid.
		 */
		readonly selectstartsubrow?: number;
		/**
		 * This property is used to determine the range of selection that you make in a Grid.
		 */
		readonly selecttype?: nexacro.Enum.GridSelectType;
		/**
		 * This property determines whether to display the border of a selected Grid cell in the body band.
		 */
		readonly showselection?: boolean;
		/**
		 * This read-only property holds the summary band object of a Grid.
		 */
		readonly summary?: object;
		/**
		 * This property is used to determine the position of the summary band in a Grid.
		 */
		readonly summarytype?: nexacro.Enum.GridSummaryType;
		/**
		 * This property determines which band will display the value solely when succeeding columns has the same value in a Grid.
		 */
		readonly suppresshorzcell?: nexacro.Enum.GridSuppressHorz;
		/**
		 * This method determines how a Grid functions for cells whose suppress properties' values are the same.
		 */
		readonly suppresslevel?: nexacro.Enum.GridSuppLevel;
		/**
		 * This property is used to define the tab order number of a Grid. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 */
		readonly taborder?: number;
		/**
		 * This property determines whether a Grid receives focus when you move the focus between components by pressing the tab key.
		 */
		readonly tabstop?: boolean;
		/**
		 * This property is used to specify the text of a tooltip that apeears when a mouse pointer hovers over a Grid component.
		 */
		readonly tooltiptext?: string;
		/**
		 * This property is used to specify the position and type of a tooltip that appears in a Grid.
		 */
		readonly tooltiptype?: nexacro.Enum.TooltipType;
		/**
		 * This property is used to specify the value of the point that indicates the position of a Grid's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property determines whether to refresh a screen in the asynchronous manner when a Grid cell tree collapses/expands.
		 */
		readonly treeasynctoggle?: boolean;
		/**
		 * This property is used to set the initial state of a Grid cell that takes the form of a tree.
		 */
		readonly treeinitstatus?: nexacro.Enum.GridTreeInitStatus;
		/**
		 * This property determines the use of a Collapse/Expand button when the Grid cell is the tree type.
		 */
		readonly treeusebutton?: nexacro.Enum.GridTreeUseButton;
		/**
		 * This property determines the use of a checkbox when the Grid cell is the tree type.
		 */
		readonly treeusecheckbox?: boolean;
		/**
		 * This property determines whether to use the left and right arrow keys of a keyboard to collapse or expand a Grid tree cell.
		 */
		readonly treeuseexpandkey?: boolean;
		/**
		 * This property determines whether to use images that indicate the tree states of Grid cells.
		 */
		readonly treeuseimage?: boolean;
		/**
		 * This property determines whether the lines are drawn between the root and leaves when Grid cells are tree type.
		 */
		readonly treeuseline?: boolean;
		/**
		 * This property is used to determine whether to apply selection-related pseudo-classes when a cell or row of the Grid is selected. Those pseudo-classes are defined by an XCSS file.
		 */
		readonly useselcolor?: boolean;
		/**
		 * This property is used to determine whether to open a virtual keyboard when a Grid cell receives focus and thus becomes editable.
		 */
		readonly usesoftkeyboard?: boolean;
		/**
		 * This property is used to determine whether to make a Grid visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This read-only property holds the vertical scrollbar sub-control of a Grid.
		 */
		readonly vscrollbar?: object;
		/**
		 * This property is used to determine the number of Grid rows that are scrolled at a time when the scrolling is done with a mouse wheel.
		 */
		readonly wheelscrollrow?: number;
		/**
		 * This property is used to set the width of a Grid.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between words displayed in a Grid.
		 */
		readonly wordSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This event occurs when a Grid is the tree type and the state of a Grid cell is changed.
		 */
		readonly cantreestatuschange?: nexacro.EventObject<nexacro.Grid, nexacro.GridTreeStatusEventInfo>;
		/**
		 * This event occurs when you click a cell in the body area of a Grid.
		 */
		readonly oncellclick?: nexacro.EventObject<nexacro.Grid, nexacro.GridClickEventInfo>;
		/**
		 * This event occurs when you double-click a cell in the body area of a Grid.
		 */
		readonly oncelldblclick?: nexacro.EventObject<nexacro.Grid, nexacro.GridClickEventInfo>;
		readonly oncellimeaction?: nexacro.EventObject<nexacro.Grid, nexacro.GridKeyEventInfo>;
		/**
		 * This event occurs after the change in the selected cells of a Grid.
		 */
		readonly oncellposchanged?: nexacro.EventObject<nexacro.Grid, nexacro.GridSelectEventInfo>;
		/**
		 * This event occurs when the left button of a mouse is clicked in the area of a Grid whose format is undefined.
		 */
		readonly onclick?: nexacro.EventObject<nexacro.Grid, nexacro.GridClickEventInfo>;
		/**
		 * This event occurs when a Combo item list or pop-up calendar is closed in a Grid.
		 */
		readonly oncloseup?: nexacro.EventObject<nexacro.Grid, nexacro.GridEditEventInfo>;
		/**
		 * This event occurs after the width of a Grid column changes.
		 */
		readonly oncolresized?: nexacro.EventObject<nexacro.Grid, nexacro.GridSizeChangedEventInfo>;
		/**
		 * This event occurs when you right-click a Grid or touch a Grid for a certain duration.
		 */
		readonly oncontextmenu?: nexacro.EventObject<nexacro.Grid, nexacro.GridContextMenuEventInfo>;
		readonly ondevicebuttonup?: nexacro.EventObject<nexacro.Grid, nexacro.DeviceButtonEventInfo>;
		/**
		 * This event occurs when you conduct a dragging action by pressing the left button of a mousewithin a Grid.
		 */
		readonly ondrag?: nexacro.EventObject<nexacro.Grid, nexacro.GridDragEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a Grid while the pointer is dragging an object.
		 */
		readonly ondragenter?: nexacro.EventObject<nexacro.Grid, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a Grid while the pointer is dragging an object.
		 */
		readonly ondragleave?: nexacro.EventObject<nexacro.Grid, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves while the pointer is dragging an object within a Grid.
		 */
		readonly ondragmove?: nexacro.EventObject<nexacro.Grid, nexacro.GridDragEventInfo>;
		/**
		 * This event occurs when you release a mouse button within the area of a Grid after you have pressed the button to drag an object.
		 */
		readonly ondrop?: nexacro.EventObject<nexacro.Grid, nexacro.GridDragEventInfo>;
		/**
		 * This event occurs when a Combo item list or pop-up calendar is opened from a Grid cell.
		 */
		readonly ondropdown?: nexacro.EventObject<nexacro.Grid, nexacro.GridEditEventInfo>;
		/**
		 * This event occurs when you press the enter key while the editable control of a Grid cell is activated.
		 */
		readonly onenterdown?: nexacro.EventObject<nexacro.Grid, nexacro.GridEditEventInfo>;
		/**
		 * This event occurs when you press the left button of a mouse over the expand button fitted onto a Grid cell.
		 */
		readonly onexpanddown?: nexacro.EventObject<nexacro.Grid, nexacro.GridMouseEventInfo>;
		/**
		 * This event occurs when you release the left button of a mouse over the expand button fitted onto a Grid cell.
		 */
		readonly onexpandup?: nexacro.EventObject<nexacro.Grid, nexacro.GridMouseEventInfo>;
		/**
		 * This event occurs when you click a cell in the head area of a Grid.
		 */
		readonly onheadclick?: nexacro.EventObject<nexacro.Grid, nexacro.GridClickEventInfo>;
		/**
		 * This event occurs when you double-click a cell in the head area of a Grid.
		 */
		readonly onheaddblclick?: nexacro.EventObject<nexacro.Grid, nexacro.GridClickEventInfo>;
		/**
		 * This event occurs when you move the horizontal scrollbar of a Grid.
		 */
		readonly onhscroll?: nexacro.EventObject<nexacro.Grid, nexacro.ScrollEventInfo>;
		/**
		 * This event occurs when you attempt to enter a value to a Grid.
		 */
		readonly oninput?: nexacro.EventObject<nexacro.Grid, nexacro.InputEventInfo>;
		/**
		 * This event occurs when you press a key with a Grid focused.
		 */
		readonly onkeydown?: nexacro.EventObject<nexacro.Grid, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when you release a key with a Grid focused.
		 */
		readonly onkeyup?: nexacro.EventObject<nexacro.Grid, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when focus moves out of a Grid.
		 */
		readonly onkillfocus?: nexacro.EventObject<nexacro.Grid, nexacro.KillFocusEventInfo>;
		/**
		 * This event occurs when you press the left button of a mouse within the area of a Grid.
		 */
		readonly onlbuttondown?: nexacro.EventObject<nexacro.Grid, nexacro.GridMouseEventInfo>;
		/**
		 * This event occurs when you release the left button of a mouse within the area of a Grid.
		 */
		readonly onlbuttonup?: nexacro.EventObject<nexacro.Grid, nexacro.GridMouseEventInfo>;
		/**
		 * This event occurs when you press a button other than the left and right buttons of a mouse within the area of a Grid.
		 */
		readonly onmousedown?: nexacro.EventObject<nexacro.Grid, nexacro.GridMouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a Grid.
		 */
		readonly onmouseenter?: nexacro.EventObject<nexacro.Grid, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a Grid.
		 */
		readonly onmouseleave?: nexacro.EventObject<nexacro.Grid, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves within a Grid.
		 */
		readonly onmousemove?: nexacro.EventObject<nexacro.Grid, nexacro.GridMouseEventInfo>;
		/**
		 * This event occurs when you release a button other than the left and right buttons of a mouse.
		 */
		readonly onmouseup?: nexacro.EventObject<nexacro.Grid, nexacro.GridMouseEventInfo>;
		/**
		 * This event occurs when you rotates your mouse wheel within a Grid.
		 */
		readonly onmousewheel?: nexacro.EventObject<nexacro.Grid, nexacro.MouseWheelEventInfo>;
		/**
		 * This event occurs when the position of a Grid changes.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.Grid, nexacro.MoveEventInfo>;
		/**
		 * It occurs when you click an area which doesn't have a cell in a Grid.
		 */
		readonly onnodataareaclick?: nexacro.EventObject<nexacro.Grid, nexacro.MouseEventInfo>;
		/**
		 * It occurs when you double-click an area which doesn't have a cell in a Grid.
		 */
		readonly onnodataareadblclick?: nexacro.EventObject<nexacro.Grid, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you press the right button of a mouse within the area of a Grid.
		 */
		readonly onrbuttondown?: nexacro.EventObject<nexacro.Grid, nexacro.GridMouseEventInfo>;
		/**
		 * This event occurs when you release the right button of a mouse within the area of a Grid.
		 */
		readonly onrbuttonup?: nexacro.EventObject<nexacro.Grid, nexacro.GridMouseEventInfo>;
		/**
		 * This event occurs after the height of a Grid row changes.
		 */
		readonly onrowresized?: nexacro.EventObject<nexacro.Grid, nexacro.GridSizeChangedEventInfo>;
		/**
		 * This event occurs after a change in the selection made in a Grid.
		 */
		readonly onselectchanged?: nexacro.EventObject<nexacro.Grid, nexacro.GridSelectEventInfo>;
		/**
		 * This event occurs when focus comes into a Grid.
		 */
		readonly onsetfocus?: nexacro.EventObject<nexacro.Grid, nexacro.SetFocusEventInfo>;
		/**
		 * This event occurs when the size of a Grid changes.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.Grid, nexacro.SizeEventInfo>;
		/**
		 * This event occurs when you click a cell in the summary area of a Grid.
		 */
		readonly onsummaryclick?: nexacro.EventObject<nexacro.Grid, nexacro.GridClickEventInfo>;
		/**
		 * This event occurs when you double-click a cell in the summary area of a Grid.
		 */
		readonly onsummarydblclick?: nexacro.EventObject<nexacro.Grid, nexacro.GridClickEventInfo>;
		/**
		 * This event occurs when you touch and release the screen within the area of a Grid.
		 */
		readonly ontouchend?: nexacro.EventObject<nexacro.Grid, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is moved along the touch surface within a Grid.
		 */
		readonly ontouchmove?: nexacro.EventObject<nexacro.Grid, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is placed on the touch surface within a Grid.
		 */
		readonly ontouchstart?: nexacro.EventObject<nexacro.Grid, nexacro.TouchEventInfo>;
		/**
		 * This event occurs after a Grid is the tree type and the state of a Grid cell has been changed.
		 */
		readonly ontreestatuschanged?: nexacro.EventObject<nexacro.Grid, nexacro.GridTreeStatusEventInfo>;
		/**
		 * This event occurs when you move the vertical scrollbar of a Grid.
		 */
		readonly onvscroll?: nexacro.EventObject<nexacro.Grid, nexacro.ScrollEventInfo>;
		/**
		 * @param {string} v This property is used to specify the action printed as an accessibility feature when a selection box moves to a Grid.
		 * @returns {void} 
		 */
		set_accessibilityaction(v: string): void;
		/**
		 * @param {nexacro.Enum.DescLevel} v This property is used to determine whether to print accessibility features of the children when a selection box moves to a Grid.
		 * @returns {void} 
		 */
		set_accessibilitydesclevel(v: nexacro.Enum.DescLevel): void;
		/**
		 * @param {string} v This property is used to specify the description printed as an accessibility feature when a selection box moves to a Grid.
		 * @returns {void} 
		 */
		set_accessibilitydescription(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a Grid.
		 * @returns {void} 
		 */
		set_accessibilityenable(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the label printed as an accessibility feature when a selection box moves to a Grid.
		 * @returns {void} 
		 */
		set_accessibilitylabel(v: string): void;
		/**
		 * @param {nexacro.Enum.Role} v This property is used to set the role of a Grid. The role is printed as accessibility functionality when a selection box moves to the component.
		 * @returns {void} 
		 */
		set_accessibilityrole(v: nexacro.Enum.Role): void;
		/**
		 * @param {nexacro.Enum.GridAutoEnterType} v This property is used to define how the editable control of a Grid cell becomes activated when the cell is selected.
		 * @returns {void} 
		 */
		set_autoenter(v: nexacro.Enum.GridAutoEnterType): void;
		/**
		 * @param {nexacro.Enum.GridAutoFitType} v This method determines whether to adjust the column widths of a Grid automatically so that the entire Grid columns will be seen without scrolling the Grid.
		 * @returns {void} 
		 */
		set_autofittype(v: nexacro.Enum.GridAutoFitType): void;
		/**
		 * @param {nexacro.Enum.GridAutoSizeBandType} v This property determines in which bands rows or columns are resized automatically by the autosizingtype property.
		 * @returns {void} 
		 */
		set_autosizebandtype(v: nexacro.Enum.GridAutoSizeBandType): void;
		/**
		 * @param {nexacro.Enum.GridAutoSizingType} v This method determines how to resize the rows and columns of a Grid automatically so that all the data will be displayed.
		 * @returns {void} 
		 */
		set_autosizingtype(v: nexacro.Enum.GridAutoSizingType): void;
		/**
		 * @param {nexacro.Enum.GridAutoUpdateType} v This property is used to set the timing of applying a selected value when the Grid cell is the Combo or Calendar type.
		 * @returns {void} 
		 */
		set_autoupdatetype(v: nexacro.Enum.GridAutoUpdateType): void;
		/**
		 * @param {string} v This property is used to set the background of a Grid.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {string} v This property is used to set the ID of a Dataset bound to the whole cells of a Grid.
		 * @returns {void} 
		 */
		set_binddataset(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a Grid.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Grid's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size the drop-down button of a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_cellcalendarbuttonsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size a calendar that pops up from a Grid cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_cellcalendarpopupsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {nexacro.Enum.CalendarPopupType} v This property is used to determine how to display a pop-up calendar (a date picker) when a Grid cell is calendar type.
		 * @returns {void} 
		 */
		set_cellcalendarpopuptype(v: nexacro.Enum.CalendarPopupType): void;
		/**
		 * @param {number} v This property is used to size the checkbox in a cell when the type of the cell is a checkbox.
		 * @returns {void} 
		 */
		set_cellcheckboxsize(v: number): void;
		/**
		 * @param {nexacro.Enum.GridCellClickBound} v This property is used to determine which area you need to click to change the value of a Grid cell whose form is a checkbox.
		 * @returns {void} 
		 */
		set_cellclickbound(v: nexacro.Enum.GridCellClickBound): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size the drop-down button of a cell whose type is Combo.
		 * @returns {void} 
		 */
		set_cellcombobuttonsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size an item list that pops up from a Grid cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_cellcombopopupsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {nexacro.Enum.PopupType} v This property is used to determine how to display an item list when a Grid cell is the Combo type.
		 * @returns {void} 
		 */
		set_cellcombopopuptype(v: nexacro.Enum.PopupType): void;
		/**
		 * @param {number} v This property is used to specify the width of the scrollbar displayed in a Grid cell whose type is Combo. The scrollbar is included in the item list of the Combo.
		 * @returns {void} 
		 */
		set_cellcomboscrollbarsize(v: number): void;
		/**
		 * @param {nexacro.Enum.GridCellExprCond} v This property is used to determine whether to update the expression values of other rows and cells when the expression value of the relevant cell is updated.
		 * @returns {void} 
		 */
		set_cellexprupdatecondition(v: nexacro.Enum.GridCellExprCond): void;
		/**
		 * @param {nexacro.Enum.GridMoveCellType} v This property is used to allow to change the order of columns in a Grid by dragging a column from the head band.
		 * @returns {void} 
		 */
		set_cellmovingtype(v: nexacro.Enum.GridMoveCellType): void;
		/**
		 * @param {nexacro.Enum.GridCellSizeBandType} v This property determines in which bands rows or columns can be resized.
		 * @returns {void} 
		 */
		set_cellsizebandtype(v: nexacro.Enum.GridCellSizeBandType): void;
		/**
		 * @param {nexacro.Enum.GridCellSizingType} v This property is used to determine how to resize columns and rows of a Grid by using a mouse.
		 * @returns {void} 
		 */
		set_cellsizingtype(v: nexacro.Enum.GridCellSizingType): void;
		/**
		 * @param {number} v This property is used to size the scrollbar displayed in a Grid cell whose type is TextArea.
		 * @returns {void} 
		 */
		set_celltextareascrollbarsize(v: number): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a Grid.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property is used to set the style of a Grid by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a Grid.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a Grid.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a Grid.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to redraw the screen automatically when a Grid is changed.
		 * @returns {void} 
		 */
		set_enableredraw(v: boolean): void;
		/**
		 * @param {nexacro.Enum.GridExSizeType} v This property determines whether to automatically adjust row heights together or individually. The adjustment here is conducted by the autosizingtype property.
		 * @returns {void} 
		 */
		set_extendsizetype(v: nexacro.Enum.GridExSizeType): void;
		/**
		 * @param {nexacro.Enum.Grid_FastVScrollType} v This property is used to specify the position of a row that pops up while you scroll the Grid vertically.
		 * @returns {void} 
		 */
		set_fastvscrolltype(v: nexacro.Enum.Grid_FastVScrollType): void;
		/**
		 * @param {nexacro.Enum.GridFillAreaType} v This property determines how to display fields without data in a Grid.
		 * @returns {void} 
		 */
		set_fillareatype(v: nexacro.Enum.GridFillAreaType): void;
		/**
		 * @param {string} v This property sets a font used for a Grid.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {string} v This property is used to specify the ID of a format that will be displayed on the Grid. The format is one of those defined by the formats property.
		 * @returns {void} 
		 */
		set_formatid(v: string): void;
		/**
		 * @param {string} v This property holds the information on all the formats of a Grid.
		 * @returns {void} 
		 */
		set_formats(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the height of a Grid.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Grid's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between characters (kerning) displayed in a Grid.
		 * @returns {void} 
		 */
		set_letterSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * @param {nexacro.Enum.LocaleCode} v This property is used to set a locale applied to a Grid.
		 * @returns {void} 
		 */
		set_locale(v: nexacro.Enum.LocaleCode): void;
		/**
		 * @param {number} v This property is used to set the maximum height of a Grid for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the maximum width of a Grid for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxwidth(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum height of a Grid for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum width of a Grid for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minwidth(v: number): void;
		/**
		 * @param {nexacro.Enum.MouseOverType} v This property determines the area where the mouseover pseudo-class is applied when a mouse cursor hovers over a Grid.
		 * @returns {void} 
		 */
		set_mouseovertype(v: nexacro.Enum.MouseOverType): void;
		/**
		 * @param {string} v This property is used to specify the name of a Grid.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a Grid.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a Grid.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {string} v This property is used to set the location of an image that is printed when a Grid has no data to display.
		 * @returns {void} 
		 */
		set_nodataimage(v: string): void;
		/**
		 * @param {string} v This property is used to define the text that will be printed when the Grid has no data to display.
		 * @returns {void} 
		 */
		set_nodatatext(v: string): void;
		/**
		 * @param {number} v This property is used to set the opacity of a Grid.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {number} v This property is used to specify the index number of a step page where a Grid is displayed if the parent object uses the step feature.
		 * @returns {void} 
		 */
		set_positionstep(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a Grid is editable.
		 * @returns {void} 
		 */
		set_readonly(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Grid's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {number} v This property is used to set the minimum size of the TrackBar control featured by the scrollbar of a Grid.
		 * @returns {void} 
		 */
		set_scrollbarbarminsize(v: number): void;
		/**
		 * @param {number} v This property is used to set the base size of a scrollbar where its TrackBar control will disappear if the Grid becomes smaller than the specified size.
		 * @returns {void} 
		 */
		set_scrollbarbaroutsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the decreasing button (DecButton control) of the scrollbar fitted to a Grid.
		 * @returns {void} 
		 */
		set_scrollbardecbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to specify the size of the increase button (IncButton control) of a scrollbar displayed in a Grid.
		 * @returns {void} 
		 */
		set_scrollbarincbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the scrollbar displayed in a Grid component.
		 * @returns {void} 
		 */
		set_scrollbarsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the TrackBar control of a scrollbar displayed in a Grid.
		 * @returns {void} 
		 */
		set_scrollbartrackbarsize(v: number): void;
		/**
		 * @param {(nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`)} v This property determines how scrollbars work in a Grid.
		 * @returns {void} 
		 */
		set_scrollbartype(v: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`): void;
		/**
		 * @param {nexacro.Enum.Grid_ScrollDPMode} v This property determines how to refresh the screen when a Grid is scrolled in Internet Explorer.
		 * @returns {void} 
		 */
		set_scrolldisplaymode(v: nexacro.Enum.Grid_ScrollDPMode): void;
		/**
		 * @param {number} v This property is used to set the size of the scroll indicator bars displayed in a Grid.
		 * @returns {void} 
		 */
		set_scrollindicatorsize(v: number): void;
		/**
		 * @param {nexacro.Enum.GridScrollPixel} v This property is used to specify a unit for scrolling a Grid.
		 * @returns {void} 
		 */
		set_scrollpixel(v: nexacro.Enum.GridScrollPixel): void;
		/**
		 * @param {nexacro.Enum.ScrollType} v This property is used to set the types of scrolling applied to a Grid.
		 * @returns {void} 
		 */
		set_scrolltype(v: nexacro.Enum.ScrollType): void;
		/**
		 * @param {nexacro.Enum.GridSelectChangeType} v This property is used to determine the point when selection is made. This property is applicable when you click a row or cell in a Grid to make the selection.
		 * @returns {void} 
		 */
		set_selectchangetype(v: nexacro.Enum.GridSelectChangeType): void;
		/**
		 * @param {nexacro.Enum.SelectScrollMode} v This property determines the action taken as a result of a dragging operation in a Grid.
		 * @returns {void} 
		 */
		set_selectscrollmode(v: nexacro.Enum.SelectScrollMode): void;
		/**
		 * @param {nexacro.Enum.GridSelectType} v This property is used to determine the range of selection that you make in a Grid.
		 * @returns {void} 
		 */
		set_selecttype(v: nexacro.Enum.GridSelectType): void;
		/**
		 * @param {boolean} v This property determines whether to display the border of a selected Grid cell in the body band.
		 * @returns {void} 
		 */
		set_showselection(v: boolean): void;
		/**
		 * @param {nexacro.Enum.GridSummaryType} v This property is used to determine the position of the summary band in a Grid.
		 * @returns {void} 
		 */
		set_summarytype(v: nexacro.Enum.GridSummaryType): void;
		/**
		 * @param {nexacro.Enum.GridSuppressHorz} v This property determines which band will display the value solely when succeeding columns has the same value in a Grid.
		 * @returns {void} 
		 */
		set_suppresshorzcell(v: nexacro.Enum.GridSuppressHorz): void;
		/**
		 * @param {nexacro.Enum.GridSuppLevel} v This method determines how a Grid functions for cells whose suppress properties' values are the same.
		 * @returns {void} 
		 */
		set_suppresslevel(v: nexacro.Enum.GridSuppLevel): void;
		/**
		 * @param {number} v This property is used to define the tab order number of a Grid. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 * @returns {void} 
		 */
		set_taborder(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a Grid receives focus when you move the focus between components by pressing the tab key.
		 * @returns {void} 
		 */
		set_tabstop(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the text of a tooltip that apeears when a mouse pointer hovers over a Grid component.
		 * @returns {void} 
		 */
		set_tooltiptext(v: string): void;
		/**
		 * @param {nexacro.Enum.TooltipType} v This property is used to specify the position and type of a tooltip that appears in a Grid.
		 * @returns {void} 
		 */
		set_tooltiptype(v: nexacro.Enum.TooltipType): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a Grid's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {boolean} v This property determines whether to refresh a screen in the asynchronous manner when a Grid cell tree collapses/expands.
		 * @returns {void} 
		 */
		set_treeasynctoggle(v: boolean): void;
		/**
		 * @param {nexacro.Enum.GridTreeInitStatus} v This property is used to set the initial state of a Grid cell that takes the form of a tree.
		 * @returns {void} 
		 */
		set_treeinitstatus(v: nexacro.Enum.GridTreeInitStatus): void;
		/**
		 * @param {nexacro.Enum.GridTreeUseButton} v This property determines the use of a Collapse/Expand button when the Grid cell is the tree type.
		 * @returns {void} 
		 */
		set_treeusebutton(v: nexacro.Enum.GridTreeUseButton): void;
		/**
		 * @param {boolean} v This property determines the use of a checkbox when the Grid cell is the tree type.
		 * @returns {void} 
		 */
		set_treeusecheckbox(v: boolean): void;
		/**
		 * @param {boolean} v This property determines whether to use the left and right arrow keys of a keyboard to collapse or expand a Grid tree cell.
		 * @returns {void} 
		 */
		set_treeuseexpandkey(v: boolean): void;
		/**
		 * @param {boolean} v This property determines whether to use images that indicate the tree states of Grid cells.
		 * @returns {void} 
		 */
		set_treeuseimage(v: boolean): void;
		/**
		 * @param {boolean} v This property determines whether the lines are drawn between the root and leaves when Grid cells are tree type.
		 * @returns {void} 
		 */
		set_treeuseline(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to apply selection-related pseudo-classes when a cell or row of the Grid is selected. Those pseudo-classes are defined by an XCSS file.
		 * @returns {void} 
		 */
		set_useselcolor(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to open a virtual keyboard when a Grid cell receives focus and thus becomes editable.
		 * @returns {void} 
		 */
		set_usesoftkeyboard(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a Grid visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {number} v This property is used to determine the number of Grid rows that are scrolled at a time when the scrolling is done with a mouse wheel.
		 * @returns {void} 
		 */
		set_wheelscrollrow(v: number): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to set the width of a Grid.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between words displayed in a Grid.
		 * @returns {void} 
		 */
		set_wordSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * This method is used to declare a certain event and then add it to a Grid.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the Grid.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a Grid.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a Grid as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to add a column to a Grid, based on the currently-displayed Grid format.
		 * @param {string} enumBand This parameter is used to specify a band where a column will be added.

If you specify "left", a column will be added in the left band.
If you specify "body", a column will be added in the body band.
If you specify "right", a column will be added in the right band.
		 * @param {boolean} bBandAppend This parameter determines whether a column will be added to a certain band or the entire Grid.

If you specify "true", a column will be added to the band defined by the enumBand parameter.
If you specify "false", a column will be added to the entire Grid.

The default value of this parameter is "true".
		 * @returns {number} 
		 */
		appendContentsCol(enumBand: string, bBandAppend?: boolean): number;
		/**
		 * This method is used to add a sub-row to a Grid, based on the currently-displayed Grid format.
		 * @param {string} enumBand This parameter is used to specify a band where a sub-row will be added.

If you specify "head", a sub-row will be added in the head band.
If you specify "body", a sub-row will be added in the body band.
If you specify "summary", a sub-row will be added in the summary band.
		 * @returns {number} 
		 */
		appendContentsRow(enumBand: string): number;
		/**
		 * This method is used to adjust the column widths of a Grid automatically so that the entire Grid columns will be seen without scrolling the Grid.
		 * @returns {boolean} 
		 */
		autoFitCol(): boolean;
		/**
		 * This method is used to adjust the width of a certain Grid column automatically so that the text in the designated area will be displayed fully.
		 * @param {string} enumBand This parameter is used to specify a band where the width of a column will be adjusted automatically.

If you specify "left", a column will be adjusted in the left band.
If you specify "body", a column will be adjusted in the body band.
If you specify "right", a column will be adjusted in the right band.
		 * @param {number} nColIndex This is the index number of a column whose width will be adjusted automatically.
		 * @param {boolean} bBandIndex This parameter determines whether the value of the nColIndex parameter is based on a certain band or the entire Grid.

If you specify "true", the value of the nColIndex parameter will be based on the band defined by the enumBand parameter.
If you specify "false", the value of nColIndex will be based on the entire Grid regardless of the value of enumBand.

The default value of this parameter is "false".
		 */
		autoSizeCol(enumBand: string, nColIndex: number, bBandIndex?: boolean): null;
		/**
		 * This method is used to adjust the heights of certain Grid rows automatically so that the text in the designated area will be displayed fully. This method applies to a currently-displayed Grid format.
		 * @param {number} nRowIndex This is the index number of a row whose height will be adjusted automatically.

A number ranging from 0 to the number of the rows indicates a row within the body band.
-1 indicates a row within the head band.
-2 indicates a row within the summary band.

The row index begins from 0.
		 * @param {number} nSubRowIndex This is the index number of a sub-row that is placed in the row defined by the nRowIndex parameter and whose height will be adjusted automatically.

If you specify 0 or a sub-row index number, only the height of a certain sub-row will be adjusted automatically.
If you specify -1, all the sub-rows of the parent row defined by the nRowIndex parameter will be adjusted.

The default value is -1.
		 * @param {boolean} bDatasetRow This parameter determines the base for the value of the nRowIndex parameter.

If you specify "true", the value of nRowIndex will be based on the row index of the bound Dataset.
If you specify "false", the value of nRowIndex will be based on the row index of the Grid.

The default value is "true".
		 */
		autoSizeRow(nRowIndex: number, nSubRowIndex?: number, bDatasetRow?: boolean): null;
		/**
		 * This method is used to render an effect where a certain cell of a Grid blinks for a specified duration.
		 * @param {number} nRow This is the index number of a data row that the blinking effect will apply to.

The method will not be executed if you set a negative, invalid or non-existent index number.
		 * @param {(string|number)} vCell This is the index number or ID of a cell that the blinking effect will apply to.

If you specify an index number, you can apply the blinking effect only to one cell.
If you want to specify more than one cell, you need to divide them with commas (,).

The method will not be executed if you set a negative number, non-existent index number, empty value or non-existent ID.
		 * @param {number} nKeepMSec This is a duration for the blinking effect, specified in millisecond.

If you specify 0, this method will cancel the blinking effect set for the cell designated by the nRow and vCell parameters.

The method will not be executed if you set a negative number or invalid value.
		 * @param {number} nBlinkCnt This parameter indicates how many times a cell blinks during a specified duration.

If you specify 0, this method will cancel the blinking effect set for the cell designated by the nRow and vCell parameters.

The method will not be executed if you set a negative number or invalid value.
		 */
		blinkCell(nRow: number, vCell: string|number, nKeepMSec: number, nBlinkCnt: number): null;
		/**
		 * This method is used to render an effect where a certain cell of a Grid blinks with the specified frequency.
		 * @param {number} nRow This is the index number of a row that the blinking effect will apply to.

The method will not be executed if you set a negative, invalid or non-existent index number.
		 * @param {(string|number)} vCell This is the index number or ID of a cell that the blinking effect will apply to.

If you specify an index number, you can apply the blinking effect only to one cell.
If you want to specify more than one cell, you need to divide them with commas (,).

The method will not be executed if you set a negative number, non-existent index number, empty value or non-existent ID.
		 * @param {number} nInterMSec This is an interval between the occasions of the blinking effect, specified in millisecond.

The interval here means the time between the two points: one is when an occasion of the effect ends and the other is when another occasion of the effect begins.
If you specify 0, this method will cancel the blinking effect set for the cell designated by the nRow and vCell parameters. 

The method will not be executed if you set a negative number or invalid value.
		 * @param {number} nBlinkCnt This parameter indicates how many times a cell blinks.

An occasion of the blinking effect lasts for 500 milliseconds, and you cannot change this duration.

The method will not be executed if you set a negative number or invalid value.
		 */
		blinkCellByInterval(nRow: number, vCell: string|number, nInterMSec: number, nBlinkCnt: number): null;
		/**
		 * This method is used to cause a Grid to be displayed at the top on the screen. This method applies to among the components under the same parent.
		 */
		bringToFront(): null;
		/**
		 * This method is used to cause a Grid to be displayed one level higher on the screen. This method applies to among the components under the same parent.
		 */
		bringToPrev(): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to cancel the selection made in a Grid entirely.
		 */
		clearSelect(): null;
		/**
		 * This method is used to create a new Grid format, based on the information on the Grid and columns of the bound Dataset.
		 */
		createFormat(): null;
		/**
		 * This method is used to delete a certain column from a Grid, based on the currently-displayed Grid format.
		 * @param {string} enumBand This parameter is used to specify a band where a column will be deleted.

If you specify "left", a column will be deleted from the left band.
If you specify "body", a column will be deleted from the body band.
If you specify "right", a column will be deleted from the right band.
		 * @param {number} nColIndex This is the index number of a column to delete.
		 * @param {boolean} bBandIndex This parameter determines whether the value of the nColIndex parameter is based on a certain band or the entire Grid.

If you specify "true", the value of the nColIndex parameter will be based on the band defined by the enumBand parameter.
If you specify "false", the value of nColIndex will be based on the entire Grid regardless of the value of enumBand.

The default value of this parameter is "false".
		 * @returns {number} 
		 */
		deleteContentsCol(enumBand: string, nColIndex: number, bBandIndex?: boolean): number;
		/**
		 * This method is used to delete a certain sub-row from a Grid, based on the currently-displayed Grid format.
		 * @param {string} enumBand This parameter is used to specify a band where a sub-row will be deleted.

If you specify "head", a sub-row will be deleted from the head band.
If you specify "body", a sub-row will be deleted from the body band.
If you specify "summary", a sub-row will be deleted from the summary band.
		 * @param {number} nSubRowIndex This is the index number of a sub-row to delete.
		 * @returns {number} 
		 */
		deleteContentsRow(enumBand: string, nSubRowIndex: number): number;
		/**
		 * This method is used to delete a Grid that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method is used to open a pop-up calendar from a Grid cell whose edittype property is set to "date". This method is applicable only when the cell is in the edit mode.
		 * @returns {boolean} 
		 */
		dropdownCalendar(): boolean;
		/**
		 * This method is used to open a Combo item list from a Grid cell whose edittype property is set to "combo". This method is applicable only when the cell is in the edit mode.
		 * @returns {boolean} 
		 */
		dropdownCombo(): boolean;
		/**
		 * This method finds a handler in a certain event of a Grid and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns the value of a certain property that applies to a certain band.
		 * @param {string} enumBand This parameter is used to specify the target band.

If you specify "head", the head band includes the target property.
If you specify "body", the body band includes the target property.
If you specify "summary", the summary band includes the target property.
		 * @param {string} strPropID This is a string that represents a property whose value you want to obtain.
		 * @returns {string} 
		 */
		getBandProperty(enumBand: string, strPropID: string): string;
		/**
		 * This method returns the index of a Grid cell that is bound to a certain Dataset column.
		 * @param {string} enumBand This is a string representing a Grid band that is searched to find a Grid cell bound to the specified Dataset column. The layout of the bands is based on the current Grid format.

If you specify "head", the head band is searched for the cell.
If you specify "body", the body band is searched for the cell.
If you specify "summary", the summary band is searched for the cell.
		 * @param {string} strColID This is a string representing the ID of a Dataset column.
		 * @returns {number} 
		 */
		getBindCellIndex(enumBand: string, strColID: string): number;
		/**
		 * This method returns the Dataset object that is set for the binddataset property of a Grid.
		 * @returns {object} 
		 */
		getBindDataset(): object;
		/**
		 * This method returns the number of the cells defined in a certain band of a Grid.
		 * @param {string} enumBand This parameter is used to specify the band whose number of cells you want to obtain. The counting is based on the current Grid format.

If you specify "head", the target will be the head band.
If you specify "body", the target will be the body band.
If you specify "summary", the target will be the summary band.
		 * @returns {number} 
		 */
		getCellCount(enumBand: string): number;
		/**
		 * This method returns the index number of a selected cell in a Grid.
		 * @returns {number} 
		 */
		getCellPos(): number;
		/**
		 * This method returns the value of a certain property that applies to a certain cell.
		 * @param {string} enumBand This parameter is used to specify the band that includes the target cell.

If you specify "head", the head band includes the cell.
If you specify "body", the body band includes the cell.
If you specify "summary", the summary band includes the cell.
		 * @param {number} nCellIdx This is the index number of the target cell.
		 * @param {string} strPropID This is a string that represents the name of the target property.
		 * @returns {string} 
		 */
		getCellProperty(enumBand: string, nCellIdx: number, strPropID: string): string;
		/**
		 * This method returns the value of a specified property that is set for a specified cell of a Grid.
		 * @param {number} nRowIdx It is the index number of the row that contains a cell in which the value of the specified property will be obtained.

A number ranging from 0 to the number of the rows minus one indicates a row within the body band.
-1 indicates a row within the head band.
-2 indicates a row within the summary band.
		 * @param {number} nCellIdx It is the index number of a cell in which the value of the specified property will be obtained.
		 * @param {string} strPropID It is a string that represents a property whose value will be obtained.
		 * @returns {string} 
		 */
		getCellPropertyValue(nRowIdx: number, nCellIdx: number, strPropID: string): string;
		/**
		 * This method returns a Rect object that contains the position-related information of the Grid cell delivered as an argument.
		 * @param {number} nRow It is the index number of the row that contains a cell whose position-related information will be obtained.

A number ranging from 0 to the number of the rows indicates a row within the body band.
-1 indicates a row within the head band.
-2 indicates a row within the summary band.
		 * @param {number} nCellIdx It is the index number of a cell whose position-related information will be obtained.
		 * @returns {object} 
		 */
		getCellRect(nRow: number, nCellIdx: number): object;
		/**
		 * This method returns the text of the cell delivered as an argument.
		 * @param {number} nRow It is the index number of the row that contains a cell whose text will be obtained.

A number ranging from 0 to the number of the rows indicates a row within the body band.
-1 indicates a row within the head band.
-2 indicates a row within the summary band.
		 * @param {number} nCellIdx It is the index number of a cell whose text will be obtained.
		 * @returns {string} 
		 */
		getCellText(nRow: number, nCellIdx: number): string;
		/**
		 * This method returns the text of the cell delivered as an argument.
		 * @param {number} nRow It is the index number of the row that contains a cell whose text property's value will be obtained.

A number ranging from 0 to the number of the rows indicates a row within the body band.
-1 indicates a row within the head band.
-2 indicates a row within the summary band.
		 * @param {number} nCellIdx It is the index number of a cell whose text property's value will be obtained.
		 * @returns {string} 
		 */
		getCellValue(nRow: number, nCellIdx: number): string;
		/**
		 * This method returns the value of the edittype property applied to a selected cell in a Grid.
		 * @returns {string} 
		 */
		getCurEditType(): string;
		/**
		 * This method returns an XML-formatted string that represents the current Grid format.
		 * @param {boolean} bOrginal This determines whether to apply dynamic changes to the format.

For "true", the format as designed will be returned, ignoring dynamic changes.
For "false", the format will be returned with dynamic changes applied.

The default value is "false".
		 * @returns {string} 
		 */
		getCurFormatString(bOrginal?: boolean): string;
		/**
		 * This method returns the index of the Dataset row that corresponds to a certain Grid row.
		 * @param {number} nRowIndex It is the index number of a Grid row.
		 * @returns {number} 
		 */
		getDatasetRow(nRowIndex: number): number;
		/**
		 * This method returns the index number of the caret's position when the Grid cell is in the edit mode.
		 * @returns {number} 
		 */
		getEditCaret(): number;
		/**
		 * This method returns the text being edited in the control of a Grid cell that is in the edit mode.
		 * @returns {string} 
		 */
		getEditingText(): string;
		/**
		 * This method returns the value being edited in the control of a Grid cell when the editable control is activated.
		 * @returns {string} 
		 */
		getEditingValue(): string;
		/**
		 * This method returns an array containing the index numbers of the characters that are positioned respectively at the beginning and end of the selected area. This method is applicable only when the Grid cell is in the edit mode.
		 * @returns {any[]} 
		 */
		getEditSelect(): any[];
		/**
		 * This method returns selected text when the Grid cell is in the edit mode.
		 * @returns {string} 
		 */
		getEditSelectedText(): string;
		/**
		 * This method returns the text of the control of a Grid cell that is in the edit mode.
		 * @returns {string} 
		 */
		getEditText(): string;
		/**
		 * This method returns the value of the editable control of a Grid cell when the editable control is activated.
		 * @returns {string} 
		 */
		getEditValue(): string;
		/**
		 * This method returns a specific handler from a certain event of a Grid by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method returns the number of columns in a Grid, based on the currently-displayed Grid format.
		 * @returns {number} 
		 */
		getFormatColCount(): number;
		/**
		 * This method returns the value of a certain property that applies to a certain column, based on the Grid format as designed.
		 * @param {number} nColIdx This the index number of the target column counted based on the entire Grid as defined in the current format.

The column index begins from 0.
		 * @param {string} strPropId This string represents the property whose value you want to obtain.

Two properties are defined in a Grid column: "band" and "size".
		 * @returns {string} 
		 */
		getFormatColProperty(nColIdx: number, strPropId: string): string;
		/**
		 * This method returns the width of a certain column based on the Grid format as designed.
		 * @param {number} nColIdx The index number is counted based on the entire Grid as defined in the current format.

The column index begins from 0.
		 * @returns {number} 
		 */
		getFormatColSize(nColIdx: number): number;
		getFormatIdList(): object;
		/**
		 * This method returns the number of rows or sub-rows in a Grid, based on the currently-displayed Grid format.
		 * @returns {number} 
		 */
		getFormatRowCount(): number;
		/**
		 * This method returns the value of a certain property that applies to a certain row, based on the Grid format as designed.
		 * @param {number} nRowIdx The row index number is counted based on the entire Grid as defined in the current format.

The index number is counted based on the entire Grid including the head, body and summary bands.
If there are sub-rows, those will also be included in the index.
The row index begins from 0.
		 * @param {string} strPropId This string represents the property whose value you want to obtain.

Two properties are defined in a Grid row: "band" and "size".
		 * @returns {string} 
		 */
		getFormatRowProperty(nRowIdx: number, strPropId: string): string;
		/**
		 * This method returns the height of a certain row or sub-row based on the Grid format as designed.
		 * @param {number} nRowIdx This is the index number of the target row.

The index number is counted based on the entire Grid as defined in the current format.

The index number is counted based on the entire Grid including the head, body and summary bands.
If there are sub-rows, those will also be included in the index.
The row index begins from 0.
		 * @returns {number} 
		 */
		getFormatRowSize(nRowIdx: number): number;
		/**
		 * This method returns the entire formats of a Grid as designed in the form of an XML string.
		 * @returns {string} 
		 */
		getFormatString(): string;
		/**
		 * This method returns the text of a certain cell in the head band of a Grid.
		 * @param {number} nCellIdx It is the index number of a cell whose text property's value will be obtained.
		 * @returns {string} 
		 */
		getHeadValue(nCellIdx: number): string;
		/**
		 * This method is used to return the current position of the track of a horizontal scrollbar.
		 * @returns {number} 
		 */
		getHScrollPos(): number;
		/**
		 * This method is used to obtain the bottom position of a Grid in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * This method is used to obtain the height of a Grid in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the left position of a Grid in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * This method is used to obtain the right position of a Grid in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * This method is used to obtain the top position of a Grid in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * This method is used to obtain the width of a Grid in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method returns the value of a Grid's bottom property in pixel.
		 * @returns {number} 
		 */
		getPixelBottom(): number;
		/**
		 * This method returns the height of a Grid in pixel.
		 * @returns {number} 
		 */
		getPixelHeight(): number;
		/**
		 * This method returns the value of a Grid's left property in pixel.
		 * @returns {number} 
		 */
		getPixelLeft(): number;
		/**
		 * This method returns the value of a Grid's right property in pixel.
		 * @returns {number} 
		 */
		getPixelRight(): number;
		/**
		 * This method returns the value of a Grid's top property in pixel.
		 * @returns {number} 
		 */
		getPixelTop(): number;
		/**
		 * This method returns the width of a Grid in pixel.
		 * @returns {number} 
		 */
		getPixelWidth(): number;
		/**
		 * This method is used to obtain the width of entire columns based on the currently-displayed Grid format.
		 * @param {string} enumBand This parameter is used to specify a band where the width of the entire columns will be obtained.

If you specify "left", the width of the entire columns will be obtained in the left band.
If you specify "body", the width of the entire columns will be obtained in the body band.
If you specify "right", the width of the entire columns will be obtained in the right band.

If you specify nothing, this method will obtain the width of all the columns of the entire Grid.
		 * @returns {number} 
		 */
		getRealColFullSize(enumBand?: string): number;
		/**
		 * This method returns the width of a certain column based on the Grid format as displayed.
		 * @param {number} nColIdx This is a number representing the index number of the target column.

The column index begins from 0.
		 * @param {boolean} bBodyIdx This parameter determines whether the index number defined by the nColIndex parameter is counted based on the body band or the entire Grid.

If you specify "true", the index number is counted based on the body band.
If you specify "false", the index number is counted based on the entire Grid.

The default value is "false".
		 * @returns {number} 
		 */
		getRealColSize(nColIdx: number, bBodyIdx?: boolean): number;
		/**
		 * This method is used to obtain the height of entire rows based on the currently-displayed Grid format.
		 * @param {string} enumBand This parameter is used to specify a band where the height of the entire rows will be obtained.

If you specify "head", the height of the entire rows will be obtained in the head band.
If you specify "body", the height of the entire rows will be obtained in the body band.
If you specify "summary", the height of the entire rows will be obtained in the summary band.

If you specify nothing, this method will obtain the height of all the rows of the entire Grid.
		 * @returns {number} 
		 */
		getRealRowFullSize(enumBand?: string): number;
		/**
		 * This method returns the height of a certain row or sub-row based on the Grid format as displayed.
		 * @param {number} nRowIdx This is a number representing the index number of the target row or representing the band whose height will be obtained.

If you specify a number ranging from 0 to the number of rows with the bBody parameter set to "true", the specified number indicates the index number of a row within the body band.
If you specify a number ranging from 0 to the number of rows with bBody set to "false", the specified number indicates the index number of a row counted in the whole Grid.
If you specify -1 with bBody set to "true", this method will return the height of the head band.
If you specify -2 with bBody set to "true", this method will return the height of the summary band.

The row index begins from 0.
		 * @param {number} nSubRowIdx This is the index number of the target sub-row, which belongs to the row defined by the nRowIdx parameter.

If you specify a number ranging from 0 to the number of sub-rows, this method will return the height of the relevant sub-row.
If you specify -1, this method will return the entire height of the row defined by nRowIdx.

The sub-row index begins from 0.
The default value of this parameter is -1.
		 * @param {boolean} bBody This parameter determines the area to which the value of the nRowIdx parameter is applied.

If you specify "true", the value of nRowIdx will serve as a row index number counted within the body band.
If you specify "false", the value of nRowIdx will serve as a row index number counted in the whole Grid.

The default value is "true".
		 * @returns {number} 
		 */
		getRealRowSize(nRowIdx: number, nSubRowIdx?: number, bBody?: boolean): number;
		/**
		 * This method returns an array that contains the index numbers of Dataset rows. Here, the Dataset rows correspond with all of selected Grid rows.
		 * @returns {any[]} 
		 */
		getSelectedDatasetRows(): any[];
		/**
		 * This method returns an array containing the index numbers of selected Grid rows.
		 * @returns {any[]} 
		 */
		getSelectedRows(): any[];
		/**
		 * This method returns the number of sub-cells in the cell delivered as an argument.
		 * @param {string} enumBand This parameter is used to specify the band that includes the cell represented by the nCellIdx parameter.

If you specify "head", the head band includes the cell.
If you specify "body", the body band includes the cell.
If you specify "summary", the summary band includes the cell.
		 * @param {any} nCellIdx 
		 * @returns {number} 
		 */
		getSubCellCount(enumBand: string, nCellIdx: any): number;
		/**
		 * This method returns the value of a certain property that applies to a certain sub-cell.
		 * @param {string} enumBand This parameter is used to specify the band that includes the cell represented by the nCellIdx parameter.

If you specify "head", the head band includes the cell.
If you specify "body", the body band includes the cell.
If you specify "summary", the summary band includes the cell.
		 * @param {number} nCellIdx This is the index number of the cell that includes the target sub-cell.
		 * @param {number} nSubCellIdx This is the index number of the target sub-cell.
		 * @param {string} strPropID This is a string that represents the name of the target property.
		 * @returns {string} 
		 */
		getSubCellProperty(enumBand: string, nCellIdx: number, nSubCellIdx: number, strPropID: string): string;
		/**
		 * This method returns the value of a specified property that is set for a specified sub-cell of a Grid.
		 * @param {number} nRowIdx It is the index number of the row that contains a sub-cell in which the value of the specified property will be obtained.

A number ranging from 0 to the number of the rows minus one indicates a row within the body band.
-1 indicates a row within the head band.
-2 indicates a row within the summary band.
		 * @param {number} nCellIdx It is the index number of a cell that contains a sub-cell in which the value of the specified property will be obtained.
		 * @param {number} nSubCellIdx It is the index number of a sub-cell in which the value of the specified property will be obtained.
		 * @param {string} strPropID It is a string that represents a property whose value will be obtained.
		 * @returns {string} 
		 */
		getSubCellPropertyValue(nRowIdx: number, nCellIdx: number, nSubCellIdx: number, strPropID: string): string;
		/**
		 * This method returns the position-related information of a certain sub-cell in the form of a Rect object.
		 * @param {number} nRow It is the index number of the row that contains a sub-cell whose position-related information will be obtained.

A number ranging from 0 to the number of the rows indicates a row within the body band.
-1 indicates a row within the head band.
-2 indicates a row within the summary band.
		 * @param {number} nCellIdx It is the index number of the cell that includes a sub-cell whose position-related information will be obtained.
		 * @param {number} nSubCellIdx It is the index number of a sub-cell whose position-related information will be obtained.
		 * @returns {object} 
		 */
		getSubCellRect(nRow: number, nCellIdx: number, nSubCellIdx: number): object;
		/**
		 * This method returns the text of a certain sub-cell.
		 * @param {number} nRow It is the index number of the row that contains a sub-cell whose text will be obtained.

A number ranging from 0 to the number of the rows indicates a row within the body band.
-1 indicates a row within the head band.
-2 indicates a row within the summary band.
		 * @param {number} nCellIdx It is the index number of the cell that includes a sub-cell whose text will be obtained.
		 * @param {number} nSubCellIdx It is the index number of a sub-cell whose text will be obtained.
		 * @returns {string} 
		 */
		getSubCellText(nRow: number, nCellIdx: number, nSubCellIdx: number): string;
		/**
		 * This method returns the value of the text property of a certain sub-cell.
		 * @param {number} nRow It is the index number of the row that contains a sub-cell whose text property's value will be obtained.

A number ranging from 0 to the number of the rows indicates a row within the body band.
-1 indicates a row within the head band.
-2 indicates a row within the summary band.
		 * @param {number} nCellIdx It is the index number of the cell that includes a sub-cell whose text property's value will be obtained.
		 * @param {number} nSubCellIdx It is the index number of a sub-cell whose text property's value will be obtained.
		 * @returns {string} 
		 */
		getSubCellValue(nRow: number, nCellIdx: number, nSubCellIdx: number): string;
		/**
		 * This method returns the text of a certain cell in the summary band of a Grid.
		 * @param {number} nCellIdx It is the index number of a cell whose text property's value will be obtained.
		 * @returns {string} 
		 */
		getSummValue(nCellIdx: number): string;
		/**
		 * This method returns the number of children of a certain row, when the Grid is the tree type.
		 * @param {number} nRowIndex This is the index number of a row whose children will be counted.
		 * @param {boolean} bDatasetRow This parameter determines the base for the value of the nRowIndex parameter.

If you specify "true", the value of the nRowIndex parameter indicates the index number of a Dataset row.
If you specify "false", the value of the nRowIndex parameter indicates the index number of a Grid row.

The default value is "true".
		 * @returns {number} 
		 */
		getTreeChildCount(nRowIndex: number, bDatasetRow?: boolean): number;
		/**
		 * This method returns a certain child of a certain row, when the Grid is the tree type. The child here is a Dataset row.
		 * @param {number} nRowIndex This is the index number of a row whose child you want to obtain.
		 * @param {number} nChildIndex This is the index of one among the children of the row defined by the nRowIndex parameter.

If you specify -1, this method will select the last child row under the row defined by the nRowIndex parameter.
If you specify a number ranging from 0 to the number of the child rows, this method will select one among the children of the row defined by the nRowIndex parameter.
		 * @param {boolean} bDatasetRow This parameter determines the base for the value of the nRowIndex parameter.

If you specify "true", the value of the nRowIndex parameter indicates the index number of a Dataset row.
If you specify "false", the value of the nRowIndex parameter indicates the index number of a Grid row.

The default value is "true".
		 * @returns {number} 
		 */
		getTreeChildRow(nRowIndex: number, nChildIndex: number, bDatasetRow?: boolean): number;
		/**
		 * This method returns the parent of a certain row, when the Grid is the tree type. The parent here is a Dataset row.
		 * @param {number} nRowIndex This is the index number of a row whose parent you want to obtain.
		 * @param {boolean} bDatasetRow This parameter determines the base for the value of the nRowIndex parameter.

If you specify "true", the value of the nRowIndex parameter indicates the index number of a Dataset row.
If you specify "false", the value of the nRowIndex parameter indicates the index number of a Grid row.

The default value is "true".
		 * @returns {number} 
		 */
		getTreeParentRow(nRowIndex: number, bDatasetRow?: boolean): number;
		/**
		 * This method returns the text beginning from the root to a certain row, when the Grid is the tree type.
		 * @param {number} nRowIndex This is the index number of the row to which the text will be obtained beginning from the root.
		 * @param {boolean} bDatasetRow This parameter determines the base for the value of the nRowIndex parameter.

If you specify "true", the value of the nRowIndex parameter indicates the index number of a Dataset row.
If you specify "false", the value of the nRowIndex parameter indicates the index number of a Grid row.

The default value is "true".
		 * @returns {string} 
		 */
		getTreePath(nRowIndex: number, bDatasetRow?: boolean): string;
		/**
		 * This method returns the index number of the Grid row that corresponds with the Dataset row delivered as an argument.
		 * @param {number} nDSRowIndex This is the index number of the target Dataset row.
		 * @returns {number} 
		 */
		getTreeRow(nDSRowIndex: number): number;
		/**
		 * This method returns a certain sibling of a certain row, when the Grid is the tree type. The sibling here is a Dataset row.
		 * @param {number} nRowIndex This is the index number of a row whose sibling you want to obtain.
		 * @param {number} nOffset This is an offset by which a certain point is located from the row defined by the nRowIndex parameter.

If you specify a positive number, it indicates an offset in the downward direction from the row defined by the nRowIndex parameter.
If you specify a negative number, it indicates an offset in the upward direction from the row defined by the nRowIndex parameter.

The default value is 1.
		 * @param {boolean} bDatasetRow This parameter determines the base for the value of the nRowIndex parameter.

If you specify "true", the value of the nRowIndex parameter indicates the index number of a Dataset row.
If you specify "false", the value of the nRowIndex parameter indicates the index number of a Grid row.

The default value is "true".
		 * @returns {number} 
		 */
		getTreeSiblingRow(nRowIndex: number, nOffset?: number, bDatasetRow?: boolean): number;
		/**
		 * This method returns the tree state of a certain row, when the Grid is the tree type.
		 * @param {number} nRowIndex This is the index of a row that will be checked for the tree state, counted based on the Grid as currently displayed.
		 * @returns {number} 
		 */
		getTreeStatus(nRowIndex: number): number;
		/**
		 * This method returns the current position of the thumb of a vertical scrollbar that appears in a Grid.
		 * @returns {number} 
		 */
		getVScrollPos(): number;
		/**
		 * This method is used to initialize a Grid after creating it in a script dynamically.
		 * @param {string} strName It sets the ID of a Grid in the form of a string.
		 * @param {(string|number)} vLeft It specifies the value of the left property of a Grid in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop It specifies the value of the top property of a Grid in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth It specifies the value of the width property of a Grid in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight It specifies the value of the height property of a Grid in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight It specifies the value of the right property of a Grid in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom It specifies the value of the bottom property of a Grid in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vMinWidth It specifies a Grid's minimum width that can be displayed in the Form.
		 * @param {(string|number)} vMaxWidth It specifies a Grid's maximum width that can be displayed in the Form.

If this value is smaller than vMinWidth, it will be replaced by the value of vMinWidth.
		 * @param {(string|number)} vMinHeight It specifies a Grid's minimum height that can be displayed in the Form.
		 * @param {(string|number)} vMaxHeight It specifies a Grid's maximum height that can be displayed in the Form.

If this value is smaller than vMinHeight, it will be replaced by the value of vMinHeight.
		 */
		init(strName: string, vLeft: string|number, vTop: string|number, vWidth: string|number, vHeight: string|number, vRight?: string|number, vBottom?: string|number, vMinWidth?: string|number, vMaxWidth?: string|number, vMinHeight?: string|number, vMaxHeight?: string|number): null;
		/**
		 * This method is used to insert a column to a certain position in a Grid, based on the currently-displayed Grid format.
		 * @param {string} enumBand This parameter is used to specify a band where a column will be inserted.

If you specify "left", a column will be inserted in the left band.
If you specify "body", a column will be inserted in the body band.
If you specify "right", a column will be inserted in the right band.
		 * @param {number} nColIndex This is the index number of a column to be inserted.

Assume that this parameter's value is bigger than the index number of the last column in the band defined by the enumBand parameter or than the index number of the last column in the entire Grid. Then, this parameter's value will be treated as the index number of the last column plus one.
		 * @param {boolean} bBandIndex This parameter determines whether the value of the nColIndex parameter is based on a certain band or the entire Grid.

If you specify "true", the value of the nColIndex parameter will be based on the band defined by the enumBand parameter.
If you specify "false", the value of nColIndex will be based on the entire Grid.

The default value of this parameter is "false".
		 * @returns {number} 
		 */
		insertContentsCol(enumBand: string, nColIndex: number, bBandIndex?: boolean): number;
		/**
		 * This method is used to insert a sub-row to a certain position in a Grid, based on the currently-displayed Grid format.
		 * @param {string} enumBand This parameter is used to specify a band where a sub-row will be inserted.

If you specify "head", a sub-row will be inserted in the head band.
If you specify "body", a sub-row will be inserted in the body band.
If you specify "summary", a sub-row will be inserted in the summary band.
		 * @param {number} nSubRowIndex This is the index number of a position where a sub-row will be inserted in the band defined by the enumBand parameter.

If this parameter's value is bigger than the index number of the last sub-row in the band, this parameter's value will be treated as the index number of the last sub-row in the band plus one.
		 * @returns {number} 
		 */
		insertContentsRow(enumBand: string, nSubRowIndex: number): number;
		/**
		 * This method is used to add a handler to a certain event of a Grid at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method returns whether a pop-up calendar is opened in a Grid.
		 * @returns {boolean} 
		 */
		isDropdownCalendar(): boolean;
		/**
		 * This method returns whether a Combo item list is opened in a Grid.
		 * @returns {boolean} 
		 */
		isDropdownCombo(): boolean;
		/**
		 * This method returns whether the cell delivered as an argument is selected.
		 * @param {number} nCellIdx This is the index number of a Grid cell that will be checked to determine whether it is selected.
		 * @param {string} enumBand This parameter is used to specify the band that includes the cell represented by the nCellIdx parameter.

If you specify "head", the head band includes the cell.
If you specify "body", the body band includes the cell.
If you specify "summary", the summary band includes the cell.

The default value is "body".
		 * @param {number} nRowIdx This parameter is the index number of the row that includes the cell represented by the nCellIdx parameter.

The default value is "0".
		 * @returns {boolean} 
		 */
		isSelectedCell(nCellIdx: number, enumBand?: string, nRowIdx?: number): boolean;
		/**
		 * This method returns whether a certain row collapses, when the Grid is the tree type.
		 * @param {number} nRowIndex This is the index of a row that will be checked for whether it collapses or not.
		 * @param {boolean} bDatasetRow This parameter indicates the base for counting the index number defined by the nRowIndex parameter.

If you specify "true", the value of nRowIndex will be counted based on the bound Dataset.
If you specify "false", the value of nRowIndex will be counted based on the Grid.

The default value is "true".
		 * @returns {boolean} 
		 */
		isTreeCollapsedRow(nRowIndex: number, bDatasetRow?: boolean): boolean;
		/**
		 * This method returns whether a certain row expands, when the Grid is the tree type.
		 * @param {number} nRowIndex This is the index of a row that will be checked for whether it expands or not.
		 * @param {boolean} bDatasetRow This parameter indicates the base for counting the index number defined by the nRowIndex parameter.

If you specify "true", the value of nRowIndex will be counted based on the bound Dataset.
If you specify "false", the value of nRowIndex will be counted based on the Grid.

The default value is "true".
		 * @returns {boolean} 
		 */
		isTreeExpandedRow(nRowIndex: number, bDatasetRow?: boolean): boolean;
		/**
		 * This method returns whether a certain row is a leaf, when the Grid is the tree type.
		 * @param {number} nRowIndex This is the index of a row that will be checked for whether it is a leaf or not.
		 * @param {boolean} bDatasetRow This parameter indicates the base for counting the index number defined by the nRowIndex parameter.

If you specify "true", the value of nRowIndex will be counted based on the bound Dataset.
If you specify "false", the value of nRowIndex will be counted based on the Grid.

The default value is "true".
		 * @returns {boolean} 
		 */
		isTreeLeafRow(nRowIndex: number, bDatasetRow?: boolean): boolean;
		/**
		 * This method returns whether a certain row is a root, when the Grid is the tree type.
		 * @param {number} nRowIndex This is the index of a row that will be checked for whether it is a root or not.
		 * @param {boolean} bDatasetRow This parameter indicates the base for counting the index number defined by the nRowIndex parameter.

If you specify "true", the value of nRowIndex will be counted based on the bound Dataset.
If you specify "false", the value of nRowIndex will be counted based on the Grid.

The default value is "true".
		 * @returns {boolean} 
		 */
		isTreeRootRow(nRowIndex: number, bDatasetRow?: boolean): boolean;
		/**
		 * This method is used to merge Grid cells of a certain area.
		 * @param {number} nStartCol This is the column index number of the left-most cell among cells to merge.

The column index must be counted based on the entire Grid columns.
		 * @param {number} nEndCol This is the column index number of the right-most cell among cells to merge.

The column index must be counted based on the entire Grid columns.
		 * @param {number} nStartRow This is the row index number of the topmost cell among cells to merge.

If you specify a number ranging from 0 to the number of the rows minus one, the merge will be conducted in the body band.
If you specify -1, the merge will be conducted in the head band.
If you specify -2, the merge will be conducted in the summary band.
		 * @param {number} nEndRow This is the row index number of the bottom-most cell among cells to merge.

If you specify a number ranging from 0 to the number of the rows minus one, the merge will be conducted in the body band.
If you specify -1, the merge will be conducted in the head band.
If you specify -2, the merge will be conducted in the summary band.

When you specify -1 or -2, this method will not be executed if this parameter does not equal the nStartRow parameter in value.
		 * @returns {boolean} 
		 */
		mergeCell(nStartCol: number, nEndCol: number, nStartRow: number, nEndRow: number): boolean;
		/**
		 * This method is used to merge cells based on the Grid format as displayed.
		 * @param {string} enumBand This parameter is a string representing the band that includes target cells.

If you specify "head", the head band includes the cells.
If you specify "body", the body band includes the cells.
If you specify "summary", the summary band includes the cells.
		 * @param {number} nStartSubRow This is the sub-row index number of the top-left most cell among those will be merged.

The sub-row index is based on the band designated by the enumBand parameter.
If a specified index number is invalid, it will be replaced with the closest valid value.
		 * @param {number} nStartCol This is the column index number of the top-left most cell among those will be merged.

The column index is based on the whole Grid.
If a specified index number is invalid, it will be replaced with the closest valid value.
		 * @param {number} nEndSubRow This is the sub-row index number of the bottom-right most cell among those will be merged.

The sub-row index is based on the band designated by the enumBand parameter.
If a specified index number is invalid, it will be replaced with the closest valid value.
		 * @param {number} nEndCol This is the column index number of the bottom-right most cell among those will be merged.

The column index is based on the whole Grid.
If a specified index number is invalid, it will be replaced with the closest valid value.
		 * @param {number} nFirstCell This is the index number of a cell that will be a base for the properties of the merged cell.

The cell index is based on the band designated by the enumBand parameter.
		 * @param {boolean} bKeepSubCell If you specify "true", original cells will maintain their own properties while sharing the index number of the resulting merged cell.
If you specify "true", the background property of the cell defined by the nFirstCell parameter will apply to all the sub-cells.

If you specify "false", the merged cell will be treated as one cell so that the index number and properties will be managed as a batch.
If you specify "false", all the properties of the cell defined by the nFirstCell parameter will be applied.
		 * @returns {number} 
		 */
		mergeContentsCell(enumBand: string, nStartSubRow: number, nStartCol: number, nEndSubRow: number, nEndCol: number, nFirstCell: number, bKeepSubCell: boolean): number;
		/**
		 * This method is used to change the position and size of a Grid.
		 * @param {(string|number)} vLeft This parameter defines the value of the left property of a Grid in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop This parameter defines the value of the top property of a Grid in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth This parameter defines the value of the width property of a Grid in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight This parameter defines the value of the height property of a Grid in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight This parameter defines the value of the right property of a Grid in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom This parameter defines the value of the bottom property of a Grid in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 */
		move(vLeft: string|number, vTop: string|number, vWidth?: string|number, vHeight?: string|number, vRight?: string|number, vBottom?: string|number): null;
		/**
		 * This method is used to cause a Grid to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToNext(objComp: object): null;
		/**
		 * This method is used to cause a Grid to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToNext(strComp: string): null;
		/**
		 * This method is used to move focus to the next editable cell in the body band of a Grid.
		 * @returns {boolean} 
		 */
		moveToNextCell(): boolean;
		/**
		 * This method is used to cause a Grid to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToPrev(objComp: object): null;
		/**
		 * This method is used to cause a Grid to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToPrev(strComp: string): null;
		/**
		 * This method is used to move focus to the previous editable cell in the body band of a Grid.
		 * @returns {boolean} 
		 */
		moveToPrevCell(): boolean;
		/**
		 * This method is used to update all expression values in a Grid.
		 * @param {string} enumBand This is a string that represents a band where you will update expression values of cells.

If you specify "head", this method will update the expression values in the head band.
If you specify "body", this method will update the expression values in the body band.
If you specify "summary", this method will update the expression values in the summary band.

If you specify nothing, this method will updates the all the expression values in a Grid.
		 */
		redrawExprCell(enumBand?: string): null;
		/**
		 * This method is used to remove a certain event that is declared in a Grid.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the Grid.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a Grid.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a Grid and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the size of a Grid.
		 * @param {(string|number)} vWidth This is the width of the Grid, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the width while the base component is ignored.
If you specify a number in percentage, the width of the Grid will be determined in proportion to the width of the base component.
		 * @param {(string|number)} vHeight This is the height of the Grid, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the height while the base component is ignored.
If you specify a number in percentage, the height of the Grid will be determined in proportion to the height of the base component.
		 */
		resize(vWidth: string|number, vHeight: string|number): null;
		/**
		 * This method is used to move the slider of a scrollbar from the current position by a certain value delivered as an argument.
		 * @param {number} nHoffsetpos A number indicating the distance by which the slider of a horizontal scrollbar will move from the current position

If the number is negative, the slider will move backward.
If the number is positive, the slider will move forward.

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 * @param {number} nVoffsetpos A number indicating the distance by which the slider of a vertical scrollbar will move from the current position

If the number is negative, the slider will move upward.
If the number is positive, the slider will move downward.

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 */
		scrollBy(nHoffsetpos: number, nVoffsetpos: number): null;
		/**
		 * This method is used to move the slider of a scrollbar to a certain position.
		 * @param {number} nHpos A number indicating the position to which you intend to move the slider of a horizontal scrollbar 

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 * @param {number} nVpos A number indicating the position to which you intend to move the slider of a vertical scrollbar 

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 */
		scrollTo(nHpos: number, nVpos: number): null;
		/**
		 * This method is used to select a certain area in the body of a Grid by entering arguements.
		 * @param {number} nStartRow It is an index number indicating the beginning row of a selected area.
		 * @param {number} nStartCellIdx It is an index number indicating the beginning cell of a selected area.
		 * @param {number} nEndRow It is an index number indicating the last row of a selected area.
		 * @param {number} nEndCellIdx It is an index number indicating the last cell of a selected area.
		 * @returns {boolean} 
		 */
		selectArea(nStartRow: number, nStartCellIdx: number, nEndRow: number, nEndCellIdx: number): boolean;
		/**
		 * This method is used to select/deselect a cell whose position is delivered as arguments. The cell must belong to the body band of the Grid.
		 * @param {number} nRowIdx This is the index number of a Grid row that includes the target cell. The row belongs to the body band.
		 * @param {number} nCellIdx This is the index number of a Grid cell that will be selected/deselected. The cell belongs to the body band.
		 * @param {boolean} bSelect For "true", the cell will be selected regardless of whether it was selected or deselected previously.
For "false", the cell will be deselected regardless of whether it was selected or deselected previously.

The default value is "true".
		 * @returns {boolean} 
		 */
		selectCell(nRowIdx: number, nCellIdx: number, bSelect?: boolean): boolean;
		/**
		 * This method is used to select/deselect a row that belongs to the body band of a Grid and is delivered as an argument.
		 * @param {number} nRowIdx The index number of a row that belongs to the body band of a Grid and whose selection state will be changed.
		 * @param {boolean} bSelect For "true", the row will be selected regardless of its previous selection state.
For "false", the row will be deselected regardless of its previous selection state.

The default value is "true".
		 * @returns {boolean} 
		 */
		selectRow(nRowIdx: number, bSelect?: boolean): boolean;
		/**
		 * This method is used to cause a Grid to be displayed at the bottom on the screen. This method applies to among the components under the same parent.
		 */
		sendToBack(): null;
		/**
		 * This method is used to cause a Grid to be displayed one level lower on the screen. This method applies to among the components under the same parent.
		 */
		sendToNext(): null;
		/**
		 * This method is used to set the value of a certain property that applies to a certain band.
		 * @param {string} enumBand This parameter is a string that represents the target band.

If you specify "head", the head band includes the target property.
If you specify "body", the body band includes the target property.
If you specify "summary", the summary band includes the target property.
		 * @param {string} strPropID This is a string that represents a property whose value you want to set.
		 * @param {string} varValue This is a string that represents a value set for the property designated by the strProgID parameter.
		 * @returns {boolean} 
		 */
		setBandProperty(enumBand: string, strPropID: string, varValue: string): boolean;
		/**
		 * This method is used to designate a Dataset for the binddataset property of a Grid.
		 * @param {object} objDataset This is an object representing a Dataset to designate for the binddataset property.
		 */
		setBindDataset(objDataset: object): null;
		/**
		 * This method is used to select a certain cell in a Grid.
		 * @param {number} nCellIdx It is the index number of a cell to be selected.

The cell must belong to the body band.
		 * @param {number} nRowIdx This is the index number of a Grid row that includes the target cell. 

Index numbers range from 0 to the number of rows minus one while only the body band is considered.
If you omit the value, the index number of the current row will be applied.
		 * @returns {boolean} 
		 */
		setCellPos(nCellIdx: number, nRowIdx?: number): boolean;
		/**
		 * This method is used to set the value of a certain property that applies to a certain cell.
		 * @param {string} enumBand This parameter is used to specify the band to which the target cell belongs.

If you specify "head", the head band includes the target cell.
If you specify "body", the body band includes the target cell.
If you specify "summary", the summary band includes the target cell.
		 * @param {number} nCellIdx This is the index number of the target cell.
		 * @param {string} strPropID This is a string that represents the name of the target property.
		 * @param {any} varValue This the value of the property represented by the strPropID parameter.
		 * @returns {boolean} 
		 */
		setCellProperty(enumBand: string, nCellIdx: number, strPropID: string, varValue: any): boolean;
		/**
		 * This method sets the value being edited in the control or sub-control of a Grid cell that is in the edit mode.
		 * @param {string} strValue It is a string that will be the value of the editable control or editable sub-control of the Grid cell.

With the edittype property of the Grid cell set to "combo", you should set a value among the data item set by the combodatacol property.
With the edittype property of the Grid cell set to "date" or "maske, you should set an original value that excludes mask characters.
		 */
		setEditingValue(strValue: string): null;
		/**
		 * This method is used to select text in a Grid cell that is in the edit mode. The selected area is determined according to the arguments.
		 * @param {number} nBegin It is an index number indicating the beginning of the selected area.

The index ranges from 0 to the length of the text.
If you specify -1, the caret will be positioned at the index 0 without selecting the text.
		 * @param {number} nEnd It is an index number indicating the end of the selected area.

The index ranges from 0 to the length of the text.
If you specify -1, the selected area will stretch to the right end of the text.

The default value is -1.
		 * @returns {boolean} 
		 */
		setEditSelect(nBegin: number, nEnd?: number): boolean;
		/**
		 * This method sets the value of the editable control of a Grid cell when the editable control is activated.
		 * @param {string} strValue It is a string that will be the value of the editable control of the Grid cell.

With the edittype property of the Grid cell set to "combo", you should set a value among the codes set by the combocodecol property.
With the edittype property of the Grid cell set to "date" or "maske, you should set an original value that excludes mask characters.
		 */
		setEditValue(strValue: string): null;
		/**
		 * This method is used to change the first handler in a certain event of a Grid.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a Grid.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to freeze a block of rows ranging up to the row delivered as an argument so that they will not be scrolled.
		 * @param {number} nRowIndex This is the index number of a row up to which a block of rows ranging up to will be frozen in the body band.

If you specify -1, an existing frozen block will be released.
		 */
		setFixedRow(nRowIndex: number): null;
		/**
		 * This method is used to give focus to a Grid.
		 * @param {boolean} bMoveScroll If scrolling is enabled in the parent component, it will determine whether to scroll based on the Grid.

For "true", the parent component will scroll so that the Grid will show.
For "false", the parent component will not scroll regardless of the Grid's position.

The default value is "true".
		 * @param {boolean} bInnerFocus If a Grid is a container component, this parameter determines whether to move focus to a child component.

For "true", focus will be given to the first child component that can receive focus.
For "false", focus will be given to the Grid.

The default value is "true" if a Grid is a container component.
		 * @returns {object} 
		 */
		setFocus(bMoveScroll?: boolean, bInnerFocus?: boolean): object;
		/**
		 * This method is used to set a format that will be displayed on the screen when there are multiple formats for a Grid.
		 * @param {string} strFormatID This is a string that represents the ID of a format to apply.
		 * @returns {boolean} 
		 */
		setFormat(strFormatID: string): boolean;
		/**
		 * This method sets a certain property that applies to a certain column, based on the Grid format as designed.
		 * @param {number} nColIdx This the index number of the target column counted based on the entire Grid as defined in the current format.

The column index begins from 0.
		 * @param {string} strPropID This string represents the property whose value you want to set.

Two properties are defined in a Grid column: "band" and "size".
		 * @param {any} varValue If the value of the strPropID parameter is "band", you should specify a string as the property's value.
If the value of the strPropID parameter is "size", you should specify a number as the property's value.
		 * @returns {boolean} 
		 */
		setFormatColProperty(nColIdx: number, strPropID: string, varValue: any): boolean;
		/**
		 * This method sets a certain property that applies to a certain row, based on the Grid format as designed.
		 * @param {number} nRowIdx The row index number is counted based on the entire Grid as defined in the current format.

The index number is counted based on the entire Grid including the head, body and summary bands.
If there are sub-rows, those will also be included in the index.
The row index begins from 0.
		 * @param {string} strPropID This string represents the property whose value you want to set.

Although two properties are defined in a Grid column--"band" and "size"--you can change only the size property.
		 * @param {any} varValue If the value of the strPropID parameter is "size", you should specify a number as the property's value.
		 * @returns {boolean} 
		 */
		setFormatRowProperty(nRowIdx: number, strPropID: string, varValue: any): boolean;
		/**
		 * This method is used to specify the bottom position of a Grid in pixel, based on the parent component's top position.
		 * @param {number} nBottom It is a pixel value representing the bottom position of a Grid, calculated based on the parent component's top position.
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * This method is used to specify the height of a Grid in pixel.
		 * @param {number} nHeight It is a pixel value representing the height of a Grid.
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * This method is used to specify the left position of a Grid in pixel, based on the parent component's left position.
		 * @param {number} nLeft It is a pixel value representing the left position of a Grid, calculated based on the parent component's left position.
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * This method is used to specify the right position of a Grid in pixel, based on the parent component's left position.
		 * @param {number} nRight It is a pixel value representing the right position of a Grid, calculated based on the parent component's left position.
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * This method is used to specify the top position of a Grid in pixel, based on the parent component's top position.
		 * @param {number} nTop It is a pixel value representing the top position of a Grid, calculated based on the parent component's top position.
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * This method is used to specify the width of a Grid in pixel.
		 * @param {number} nWidth It is a pixel value representing the width of a Grid.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * This method is used to set the width of a certain column based on the Grid format as displayed.
		 * @param {string} enumBand This is a string representing the band that includes the target column.

If you specify "left", the left band includes the column.
If you specify "body", the body band includes the column.
If you specify "right", the right band includes the column.
		 * @param {number} nColIndex This is a number representing the index number of the target column.

If you specify a number ranging from 0 to the number of columns, the specified number indicates the index number of the target column.
If you specify -1, the value of the nSize parameter will apply to all column equally.
The column index begins from 0.
		 * @param {number} nSize This is the width of the column, expressed in pixel.
		 * @param {boolean} bBandIndex This parameter determines whether the index number defined by the nColIndex parameter is counted based on the relevant band or the entire Grid.

If you specify "true", the index number is counted based on the relevant band.
If you specify "false", the index number is counted based on the entire Grid.

The default value is "false".
		 * @returns {boolean} 
		 */
		setRealColSize(enumBand: string, nColIndex: number, nSize: number, bBandIndex?: boolean): boolean;
		/**
		 * This method is used to set the height of a certain row or sub-row  based on the Grid format as displayed.
		 * @param {number} nRowIdx This is a number representing the index number of the target row or representing the band whose height will be set.

If you specify a number ranging from 0 to the number of rows with the bBody parameter set to "true", the specified number indicates the index number of a row within the body band.
If you specify a number ranging from 0 to the number of rows with bBody set to "false", the specified number indicates the index number of a row counted in the whole Grid.
If you specify -1 with bBody set to "true", this method will return the height of the head band.
If you specify -2 with bBody set to "true", this method will return the height of the summary band.

The row index begins from 0.
		 * @param {number} nSize This is the height of the row or sub-row, expressed in pixel.
		 * @param {number} nSubRowIdx This is the index number of the target sub-row, which belongs to the row defined by the nRowIdx parameter.

If you specify a number ranging from 0 to the number of sub-rows, this method will set the height of the relevant sub-row.
If you specify -1, this method will set the entire height of the row defined by nRowIdx.

The sub-row index begins from 0.
The default value of this parameter is -1.
		 * @param {boolean} bBody This parameter determines the area to which the value of the nRowIdx parameter is applied.

If you specify "true", the value of nRowIdx will serve as a row index number counted within the body band.
If you specify "false", the value of nRowIdx will serve as a row index number counted in the whole Grid.

The default value is "true".
		 * @returns {boolean} 
		 */
		setRealRowSize(nRowIdx: number, nSize: number, nSubRowIdx?: number, bBody?: boolean): boolean;
		/**
		 * This method is used to set the value of a certain property that applies to a certain sub-cell.
		 * @param {string} enumBand This parameter is used to specify the band that includes the cell represented by the nCellIdx parameter.

If you specify "head", the head band includes the cell.
If you specify "body", the body band includes the cell.
If you specify "summary", the summary band includes the cell.
		 * @param {number} nCelIdx This is the index number of the cell that includes the target sub-cell.
		 * @param {number} nSubCellIdx This is the index number of the target sub-cell.
		 * @param {string} strPropID This is a string that represents the name of the target property.
		 * @param {string} varValue This the value of the property represented by the strPropID parameter.
		 * @returns {boolean} 
		 */
		setSubCellProperty(enumBand: string, nCelIdx: number, nSubCellIdx: number, strPropID: string, varValue: string): boolean;
		/**
		 * This method is used to set the status of a certain row when the Grid takes the form of a tree.
		 * @param {number} nRowIndex This is the index number of the row whose tree status will be set. The index number is counted based on the Grid as currently displayed.
		 * @param {boolean} bTreeStatus This parameter sets the status of the tree represented by the row that is designated by the nRowIndex parameter.

If you specify "true", the tree will expand.
If you specify "false", the tree will collapse.
		 * @returns {boolean} 
		 */
		setTreeStatus(nRowIndex: number, bTreeStatus: boolean): boolean;
		/**
		 * This method is used to display a Grid on the screen. The Grid mentioned here refers to the one that is dynamically created through a script.
		 */
		show(): null;
		/**
		 * This method is used to determine whether to open an editor when a selected Grid cell is editable.
		 * @param {boolean} bShow This parameter indicates whether to open an editor in the currently-selected cell.

If you specify "true", an editor will be opened with the cell entering the editable mode.
If you specify "false", an editor will not be opened with the cell quitting the editable mode.
		 * @returns {boolean} 
		 */
		showEditor(bShow: boolean): boolean;
		/**
		 * This method is used to unmerge a cell that is created by the mergeCell() method.
		 * @param {number} nStartCol This is the column index number of the left-most cell among the original cells of a merged cell.

The column index must be counted based on the entire Grid columns.
		 * @param {number} nEndCol This is the column index number of the right-most cell among the original cells of a merged cell.

The column index must be counted based on the entire Grid columns.
		 * @param {number} nStartRow This is the row index number of the topmost cell among the original cells of a merged cell.

If you specify a number ranging from 0 to the number of the rows minus one, the unmerge operation will be done in the body band.
If you specify -1, the unmerge operation will be done in the head band.
If you specify -2, the unmerge operation will be done in the summary band.
		 * @param {number} nEndRow This is the row index number of the bottom-most cell among the original cells of a merged cell.

If you specify a number ranging from 0 to the number of the rows minus one, the unmerge operation will be done in the body band.
If you specify -1, the unmerge operation will be done in the head band.
If you specify -2, the unmerge operation will be done in the summary band.

When you specify -1 or -2, this method will not be executed if this parameter does not equal the nStartRow parameter in value.
		 * @returns {boolean} 
		 */
		splitCell(nStartCol: number, nEndCol: number, nStartRow: number, nEndRow: number): boolean;
		/**
		 * This method is used to divide merged cells based on the Grid format as displayed.
		 * @param {string} enumBand This parameter is a string representing the band that includes target cells.

If you specify "head", the head band includes the cell.
If you specify "body", the body band includes the cell.
If you specify "summary", the summary band includes the cell.
		 * @param {any} nStartSubRow 
		 * @param {number} nStartCol This is the column index number of the sub-cell that is placed on the most top-left of a target merged cell.

The column index is based on the whole Grid.
If a specified index number is invalid, it will be replaced with the closest valid value.
		 * @param {number} nEndSubRow This is the sub-row index number of the sub-cell that is placed on the most bottom-right of a target merged cell.

The sub-row index is based on the band designated by the enumBand parameter.
If a specified index number is invalid, it will be replaced with the closest valid value.
		 * @param {number} nEndCol This is the column index number of the sub-cell that is placed on the most bottom-right of a target merged cell.

The column index is based on the whole Grid.
If a specified index number is invalid, it will be replaced with the closest valid value.
		 * @param {boolean} bMakeSubCell This parameter determines whether to divide merged cells without sub-cells.

If you specify "true", this method will divide merged cells without sub-cells.
If you specify "false", this method will not divide merged cells without sub-cells.
		 * @returns {number} 
		 */
		splitContentsCell(enumBand: string, nStartSubRow: any, nStartCol: number, nEndSubRow: number, nEndCol: number, bMakeSubCell: boolean): number;
		/**
		 * This method is used to instantly reflect a value being edited in the Grid to the bound Dataset.
		 * @returns {boolean} 
		 */
		updateToDataset(): boolean;
	}
}

