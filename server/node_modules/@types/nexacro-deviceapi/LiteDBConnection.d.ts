// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    LiteDBConnection: nexacro.LiteDBConnection;
}

    
declare namespace nexacro {
    type LiteDBConnectionOmitKeys = 'id'|'addEventHandler'|'clearEventHandler'|'findEventHandler'|'getEventHandler'|'removeEventHandler'|'setEventHandler';
	
	interface LiteDBConnection extends Omit<nexacro.EventSinkObject, LiteDBConnectionOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.LiteDBConnection;
	    /**
		 * This property is used to determine how a LiteDBConnection object performs a requested task.
		 */
		readonly async?: boolean;
		/**
		 * This property sets a period of time allowed for receiving a response from the database connected to a LiteDBConnection.
		 */
		readonly busytimeout?: number;
		/**
		 * This property is used to set the location of a database that will be connected to a LiteDBConnection.
		 */
		readonly datasource?: string;
		/**
		 * This property is used to specify the name of a LiteDBConnection.
		 */
		readonly name?: string;
		/**
		 * This property is used to set an option for connecting a LiteDBConnection to a database.
		 */
		readonly openflag?: nexacro.Enum.OpenFlagType;
		/**
		 * This read-only property holds the parent object of a LiteDBConnection.
		 */
		readonly parent?: object;
		/**
		 * This property determines whether to connect a LiteDBConnection to the database when the LiteDBConnection is created.
		 */
		readonly preconnect?: boolean;
		/**
		 * The onerror event occurs when a task request to a LiteDBConnection object fails.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.LiteDBConnection, nexacro.LiteDBErrorEventInfo>;
		/**
		 * This event occurs when a task requested by a LiteDBConnection is successful.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.LiteDBConnection, nexacro.LiteDBEventInfo>;
		/**
		 * @param {boolean} v This property is used to determine how a LiteDBConnection object performs a requested task.
		 * @returns {void} 
		 */
		set_async(v: boolean): void;
		/**
		 * @param {number} v This property sets a period of time allowed for receiving a response from the database connected to a LiteDBConnection.
		 * @returns {void} 
		 */
		set_busytimeout(v: number): void;
		/**
		 * @param {string} v This property is used to set the location of a database that will be connected to a LiteDBConnection.
		 * @returns {void} 
		 */
		set_datasource(v: string): void;
		/**
		 * @param {string} v This property is used to specify the name of a LiteDBConnection.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {nexacro.Enum.OpenFlagType} v This property is used to set an option for connecting a LiteDBConnection to a database.
		 * @returns {void} 
		 */
		set_openflag(v: nexacro.Enum.OpenFlagType): void;
		/**
		 * @param {boolean} v This property determines whether to connect a LiteDBConnection to the database when the LiteDBConnection is created.
		 * @returns {void} 
		 */
		set_preconnect(v: boolean): void;
		/**
		 * This method is used to set a transaction committed to the database connected with a LiteDBConnection.
		 */
		begin(): null;
		/**
		 * This method is used to close the database connected with a LiteDBConnection.
		 */
		close(): null;
		/**
		 * This method is used to commit a transaction to the database connected with a LiteDBConnection.
		 */
		commit(): null;
		/**
		 * This method is used to check whether a LiteDBConnection is connected to a database.
		 */
		isConnected(): null;
		/**
		 * This method is used to connect a database to a LiteDBConnection.
		 * @param {string} strDataSource This is a string representing the location of a database that will be connected.

The location is specified by using an absolute path or alias.
If you do not set this parameter, the value of the datasource property will be applied instead.
		 * @param {any} constOpenFlag This is a string representing the option for connecting to a database.

If you specify "LiteDBConnection.openReadWrite" or "0", a database is connected with the capability to read/write.
If you specify "LiteDBConnection.openReadWriteCreate" or "1", a database is connected with the capability to read/write/create a file.

If you do not set this parameter, the value of the openflag property will be applied instead.
		 * @returns {boolean} 
		 */
		open(strDataSource?: string, constOpenFlag?: any): boolean;
		/**
		 * This method is used to roll back a transaction committed to the database connected with a LiteDBConnection.
		 */
		rollback(): null;
	}
}

