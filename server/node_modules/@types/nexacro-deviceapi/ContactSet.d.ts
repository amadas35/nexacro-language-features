// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    ContactSet: nexacro.ContactSet;
}

    
declare namespace nexacro {
    type ContactSetOmitKeys = 'id'|'addEventHandler'|'addEventHandlerLookup'|'clearEventHandler'|'findEventHandler'|'getEventHandler'|'removeEventHandler'|'removeEventHandlerLookup'|'setEventHandler'|'setEventHandlerLookup';
	
	interface ContactSet extends Omit<nexacro.EventSinkObject, ContactSetOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.ContactSet;
	    /**
		 * This property is used to specify the name of a ContactSet.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the parent object of a ContactSet.
		 */
		readonly parent?: object;
		/**
		 * This event occurs when a mobile device fails to process information related to contacts.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.ContactSet, nexacro.ContactSetErrorEventInfo>;
		/**
		 * This event occurs when processing a contact is successful in a mobile device.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.ContactSet, nexacro.ContactSetEventInfo>;
		/**
		 * @param {string} v This property is used to specify the name of a ContactSet.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * This method is used to add a contact to the contact information of a mobile device.
		 * @param {object} objContact This is a Contact object presenting a contact to add.
		 * @returns {boolean} 
		 */
		append(objContact: object): boolean;
		/**
		 * This method is used to search for the contacts that satisfy certain search conditions. This method is applicable to mobile devices.
		 * @param {string} strQueryInfo This is a string representing the conditions for the contact search. The conditions are derived from the contact information.

The argument is formatted as "field name:search word;field name:search word;...".
You can use wild card characters like ? and * in search words.
		 * @param {number} nResultCnt This is the number of contacts to return among the contacts that satisfy the conditions.

If you specify -1, all the satisfying contacts will be returned.
		 * @returns {boolean} 
		 */
		query(strQueryInfo: string, nResultCnt?: number): boolean;
		/**
		 * This method is used to remove a certain contact from the contact information of a mobile device.
		 * @param {string} strUniqueID This is a string representing the value of the uniqueid property of the Contact object. The property value indicates the ID of a contact to remove.
		 * @returns {boolean} 
		 */
		remove(strUniqueID: string): boolean;
		/**
		 * This method is used to update a contact in a mobile device.
		 * @param {object} objContact This is a Contact object whose information will be updated.
		 * @returns {boolean} 
		 */
		update(objContact: object): boolean;
	}
}

