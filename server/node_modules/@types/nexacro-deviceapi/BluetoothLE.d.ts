// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    BluetoothLE: nexacro.BluetoothLE;
}

    
declare namespace nexacro {
    type BluetoothLEOmitKeys = 'id';
	
	interface BluetoothLE extends Omit<nexacro.EventSinkObject, BluetoothLEOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.BluetoothLE;
	    /**
		 * This property is used to specify the name of a BluetoothLE.
		 */
		readonly name?: string;
		/**
		 * This event occurs when a task requested by a BluetoothLE fails.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.BluetoothLE, nexacro.BluetoothLEErrorEventInfo>;
		/**
		 * This event occurs when a BluetoothLE object finds a device that provides a certain service through the scanStart() method.
		 */
		readonly onscanresult?: nexacro.EventObject<nexacro.BluetoothLE, nexacro.BluetoothLEScanDeviceEventInfo>;
		/**
		 * This event occurs when a notification is delivered to a device that is connected to a BluetoothLE object.
		 */
		readonly onsubscriberesult?: nexacro.EventObject<nexacro.BluetoothLE, nexacro.BluetoothLEEventInfo>;
		/**
		 * This event occurs when a task requested by a BluetoothLE object succeeds.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.BluetoothLE, nexacro.BluetoothLEEventInfo>;
		/**
		 * @param {string} v This property is used to specify the name of a BluetoothLE.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * This method is used to connect to a peripheral device.
		 * @param {string} strAddress It is a string representing the address of a peripheral device.

A MAC address is used in the Windows NRE and Android NRE.
The macOS NRE uses a UUID given by the OS.
The index of a device is used in the iOS/iPadOS NRE.
		 */
		connect(strAddress: string): null;
		/**
		 * This method is used to disconnect from a peripheral device.
		 */
		disconnect(): null;
		/**
		 * This method is used to request the universally unique identifiers (UUIDs) of the services provided by the connected peripheral device.
		 */
		discoverService(): null;
		/**
		 * This method requests the connected peripheral device to send a characteristic of a certain service.
		 * @param {string} strSvcUUID It is a string representing the UUID of a service that defines its characteristics.
		 * @param {string} strCharUUID It is a string representing the UUID of a characteristic that will be requested.
		 */
		readCharacteristic(strSvcUUID: string, strCharUUID: string): null;
		/**
		 * This method is used to begin a scanning process for finding peripheral devices that are sending advertisements.
		 * @param {number} nDuration It is the duration of a scanning process, specified in millisecond.

The default value is 2,000.
		 * @param {string} strSvcUUID It is a string representing the universally unique identifier (UUID) of a certain service that you want to find.

If you do not set this parameter, this method will scan all the peripheral devices that are sending advertisements.
		 */
		scanStart(nDuration?: number, strSvcUUID?: string): null;
		/**
		 * This method is used to end a scanning process for finding peripheral devices that are sending advertisements.
		 */
		scanStop(): null;
		/**
		 * This method requests notification sent to the connected peripheral device when a characteristic of a certain service changes.
		 * @param {string} strSvcUUID It is a string representing the UUID of a service that defines its characteristics.
		 * @param {string} strCharUUID It is a string representing the UUID of a characteristic that will cause a notification if its value changes.

If the value of the characteristic changes, a notification will be delivered from the server.
		 */
		subscribe(strSvcUUID: string, strCharUUID: string): null;
		/**
		 * This method requests the cancellation of notification sent to the connected peripheral device.
		 * @param {string} strSvcUUID It is a string representing the UUID of a service that defines its characteristics.
		 * @param {string} strCharUUID It is a string representing the UUID of a characteristic that will cause a notification if its value changes. The UUID is specified for cancelling the subscription of the notification.
		 */
		unsubscribe(strSvcUUID: string, strCharUUID: string): null;
		/**
		 * This method saves a characteristic of a certain service to the connected peripheral device.
		 * @param {string} strSvcUUID It is a string representing the UUID of a service that defines its characteristics.
		 * @param {string} strCharUUID It is a string representing the UUID of a characteristic to which a value will be saved.
		 * @param {string} strVal It is a string representing a value to be saved to the characteristic.
		 */
		writeCharacteristic(strSvcUUID: string, strCharUUID: string, strVal: string): null;
	}
}

