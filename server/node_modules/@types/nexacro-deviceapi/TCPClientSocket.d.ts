// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    TCPClientSocket: nexacro.TCPClientSocket;
}

    
declare namespace nexacro {
    
	interface TCPClientSocket extends nexacro.EventSinkObject {
	    /**
		 * @constructor
		 */
		new(): nexacro.TCPClientSocket;
	    /**
		 * This read-only property holds the address of a connected server.
		 */
		readonly address?: string;
		/**
		 * This read-only property holds an error code that indicates the type of the failure of a task requested by a TCPClientSocket component.
		 */
		readonly errorcode?: any;
		/**
		 * This read-only property holds an error message about the failure of a task requested by a TCPClientSocket component.
		 */
		readonly errormsg?: any;
		/**
		 * This read-only property holds a value indicating whether a socket is connected to a server.
		 */
		readonly isopen?: any;
		/**
		 * This property is used to specify the name of a TCPClientSocket.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the port of a connected server.
		 */
		readonly port?: string;
		/**
		 * This event occurs when a connected server has data that you can receive.
		 */
		readonly ondataarrived?: nexacro.EventObject<nexacro.TCPClientSocket, nexacro.SocketReceiveEventInfo>;
		/**
		 * This event occurs when a task requested by a TCPClientSocket fails.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.TCPClientSocket, nexacro.SocketErrorEventInfo>;
		/**
		 * This event occurs when a task requested by a TCPClientSocket succeeds.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.TCPClientSocket, nexacro.SocketEventInfo>;
		/**
		 * @param {string} v This property is used to specify the name of a TCPClientSocket.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * This method is used to declare a certain event and then add it to a TCPClientSocket.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the TCPClientSocket.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a TCPClientSocket.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc It is an object that represents a handler function to add.
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a TCPClientSocket as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function

If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to delete all the event handlers registered in a certain event of a TCPClientSocket.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to request a server to disconnect from a socket
		 * @returns {boolean} 
		 */
		close(): boolean;
		/**
		 * This method finds a handler in a certain event of a TCPClientSocket and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc It is an object that represents the handler function to find.
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns a specific handler from a certain event of a TCPClientSocket by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method is used to add a handler to a certain event of a TCPClientSocket at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to request a server to connect with a socket by using TCP.
		 * @param {string} strAddress It is a string presenting the domain name of a server to connect. The string also can be an IP address in the IPv4 format.
		 * @param {number} nPort It is the port number of a server to connect.
		 * @returns {boolean} 
		 */
		open(strAddress: string, nPort: number): boolean;
		/**
		 * This method is used to receive data from a connected server.
		 * @param {number} nSize It is the number of bytes, presenting the maximum size of incoming data.

A specified value will be applied as the maximum size of incoming data while actually-received data can be smaller than the value.

If you specify 0, this method will only check whether there is incoming data.
If you specify a negative number, the calling of this method will be treated as a failure.
		 * @param {number} nTimeOut It is the number of seconds, representing the timeout for data reception.

If you specify 0 or smaller, the timeout will be infinite.

The default value is 0.
		 * @param {string} strCharSet This parameter is used to define a character set that will be applied when data is received.

If you do not omit this parameter, the character set designated by the system will be applied.

It is recommended to use this parameter only when you need to change the character set.
		 * @returns {any[]} 
		 */
		read(nSize: number, nTimeOut?: number, strCharSet?: string): any[];
		/**
		 * This method is used to receive data from a connected server by line.
		 * @param {number} nSize It is the number of bytes, presenting the maximum size of incoming data.

A specified value will be applied as the maximum size of incoming data while actually-received data can be smaller than the value.

If you specify 0, this method will only check whether there is incoming data.
		 * @param {number} nTimeOut It is the number of seconds, representing the timeout for data reception.

Be careful when you set the timeout because the timeout will be applied again when received data does not contain a line feed character.

If you specify 0 or smaller, the timeout will be infinite.
The default value is 0.
		 * @param {string} strCharSet This parameter is used to define a character set that will be applied when data is received.

If you do not omit this parameter, the character set designated by the system will be applied.

It is recommended to use this parameter only when you need to change the character set.
		 * @returns {any[]} 
		 */
		readLine(nSize: number, nTimeOut?: number, strCharSet?: string): any[];
		/**
		 * This method is used to remove a certain event that is declared in a TCPClientSocket.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the TCPClientSocket.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a TCPClientSocket.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc It is an object that represents a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a TCPClientSocket and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid

If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the first handler in a certain event of a TCPClientSocket.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc It is an object that represents a handler function that will replace the existing handler.
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a TCPClientSocket.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function

If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to send data to a connected server.
		 * @param {string} strData It is data that will be sent to a connected server.
		 * @param {string} strCharset It is a character set of the data that will be sent to a connected server.

If you do not specify this parameter, the character set designated by the system will be applied.

It is recommended to use this parameter only when you need to change the character set.
		 * @returns {boolean} 
		 */
		write(strData: string, strCharset?: string): boolean;
	}
}

