// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    AudioRecorder: nexacro.AudioRecorder;
}

    
declare namespace nexacro {
    type AudioRecorderOmitKeys = 'id'|'addEventHandler'|'addEventHandlerLookup'|'clearEventHandler'|'findEventHandler'|'getEventHandler'|'removeEventHandler'|'removeEventHandlerLookup'|'setEventHandler'|'setEventHandlerLookup';
	
	interface AudioRecorder extends Omit<nexacro.EventSinkObject, AudioRecorderOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.AudioRecorder;
	    /**
		 * This property is used to define the name of a file to which recorded audio data is saved in a mobile device.
		 */
		readonly audiofile?: string;
		/**
		 * This property is used to define the extension of a file to which recorded audio data is saved in a mobile device.
		 */
		readonly audioformat?: any;
		/**
		 * This property determines the type of audio channel applied to the recording of audio data in a mobile device.
		 */
		readonly channelconfig?: any;
		/**
		 * This property is used to specify the name of a AudioRecorder.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the parent object of a AudioRecorder.
		 */
		readonly parent?: object;
		/**
		 * This is a string representing the sample rate of a file to which recorded audio data is saved.
		 */
		readonly samplerate?: number;
		/**
		 * This error occurs when a mobile device fails to create audio data.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.AudioRecorder, nexacro.AudioErrorEventInfo>;
		/**
		 * This event occurs while audio data is being recorded in a mobile device.
		 */
		readonly onrecording?: nexacro.EventObject<nexacro.AudioRecorder, nexacro.AudioEventInfo>;
		/**
		 * This event occurs when the recording of audio data is ended in a mobile device.
		 */
		readonly onstop?: nexacro.EventObject<nexacro.AudioRecorder, nexacro.AudioEventInfo>;
		/**
		 * @param {string} v This property is used to define the name of a file to which recorded audio data is saved in a mobile device.
		 * @returns {void} 
		 */
		set_audiofile(v: string): void;
		/**
		 * @param {any} v This property is used to define the extension of a file to which recorded audio data is saved in a mobile device.
		 * @returns {void} 
		 */
		set_audioformat(v: any): void;
		/**
		 * @param {any} v This property determines the type of audio channel applied to the recording of audio data in a mobile device.
		 * @returns {void} 
		 */
		set_channelconfig(v: any): void;
		/**
		 * @param {string} v This property is used to specify the name of a AudioRecorder.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {number} v This is a string representing the sample rate of a file to which recorded audio data is saved.
		 * @returns {void} 
		 */
		set_samplerate(v: number): void;
		/**
		 * This method is used to pause the recording of audio data in a mobile device.
		 */
		pause(): null;
		/**
		 * This method is used to begin the recording of audio data in a mobile device.
		 * @param {number} nIntervalTime This is the number of milliseconds indicating the interval between the onrecording events.

The value ranges from 200ms to 86,400,000ms.
If you omit the value or specify a value smaller than 200ms, onrecording will not occur.
		 * @returns {boolean} 
		 */
		recordingStart(nIntervalTime?: number): boolean;
		/**
		 * This method is used to stop the recording of audio data in a mobile device.
		 */
		recordingStop(): null;
		/**
		 * This method is used to resume the recording of audio data in a mobile device.
		 */
		resume(): null;
	}
}

