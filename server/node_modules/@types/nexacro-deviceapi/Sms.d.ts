// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    Sms: nexacro.Sms;
}

    
declare namespace nexacro {
    type SmsOmitKeys = 'id'|'addEventHandler'|'clearEventHandler'|'findEventHandler'|'getEventHandler'|'removeEventHandler'|'setEventHandler';
	
	interface Sms extends Omit<nexacro.EventSinkObject, SmsOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.Sms;
	    /**
		 * This property is used to set a message that will be sent to a receiver through a mobile device.
		 */
		readonly message?: string;
		/**
		 * This property is used to specify the name of a Sms.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the parent object of a Sms.
		 */
		readonly parent?: object;
		/**
		 * This property is used to set the phone number of a person to whom a message will be sent through a mobile phone.
		 */
		readonly phonenumber?: string;
		/**
		 * This event occurs when a mobile device sends an SMS.
		 */
		readonly cansendmessage?: nexacro.EventObject<nexacro.Sms, nexacro.SmsEventInfo>;
		/**
		 * This event occurs when an SMS saved in a mobile device is deleted.
		 */
		readonly ondeletemessage?: nexacro.EventObject<nexacro.Sms, nexacro.SmsEventInfo>;
		/**
		 * This event occurs when an SMS-related action fails to be performed in a mobile devices.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.Sms, nexacro.SmsErrorEventInfo>;
		/**
		 * This event occurs when the list of SMSs saved in a mobile device is searched.
		 */
		readonly onreadmessagelist?: nexacro.EventObject<nexacro.Sms, nexacro.SmsMessageListEventInfo>;
		/**
		 * This event occurs when a mobile device receives an SMS.
		 */
		readonly onrecvmessage?: nexacro.EventObject<nexacro.Sms, nexacro.SmsEventInfo>;
		/**
		 * This event occurs after a mobile device sends an SMS.
		 */
		readonly onsendmessage?: nexacro.EventObject<nexacro.Sms, nexacro.SmsEventInfo>;
		/**
		 * @param {string} v This property is used to set a message that will be sent to a receiver through a mobile device.
		 * @returns {void} 
		 */
		set_message(v: string): void;
		/**
		 * @param {string} v This property is used to specify the name of a Sms.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the phone number of a person to whom a message will be sent through a mobile phone.
		 * @returns {void} 
		 */
		set_phonenumber(v: string): void;
		/**
		 * This method is used to delete a specified message from the SMS field in a mobile device.
		 * @param {number} nSmsid An index number of a message you want to delete.

You can check the index number by calling readMessageList(), a method used to return the SMS list.
		 * @returns {boolean} 
		 */
		deleteMessage(nSmsid: number): boolean;
		/**
		 * This method returns the list of SMSs saved in a mobile device.
		 */
		readMessageList(): null;
		/**
		 * This method is used to cause an event to occur when a mobile device receives an SMS.
		 */
		recvStart(): null;
		/**
		 * This method is used to cancel the event occurrence set by the recvStart() method.
		 */
		recvStop(): null;
		/**
		 * This method is used to display a screen to write an SMS message in a mobile device.
		 * @param {string} strNumber This is a string representing the phone number of a person you will send a message.

If omitted, the argument will be replaced by the value of the phonenumber property.
		 * @param {string} strMessage This is a string that represents a message you will send.

If omitted, the argument will be replaced by the value of the message property.
		 * @returns {boolean} 
		 */
		sendMessage(strNumber?: string, strMessage?: string): boolean;
	}
}

