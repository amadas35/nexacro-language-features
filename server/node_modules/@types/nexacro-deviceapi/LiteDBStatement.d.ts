// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    LiteDBStatement: nexacro.LiteDBStatement;
}

    
declare namespace nexacro {
    type LiteDBStatementOmitKeys = 'id'|'addEventHandler'|'clearEventHandler'|'findEventHandler'|'getEventHandler'|'removeEventHandler'|'setEventHandler'|'setEventHandlerLookup';
	
	interface LiteDBStatement extends Omit<nexacro.EventSinkObject, LiteDBStatementOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.LiteDBStatement;
	    /**
		 * This property is used to determine how a LiteDBStatement object performs a requested task.
		 */
		readonly async?: boolean;
		/**
		 * This property is used to set a LiteDBConnection object for the connection to a database.
		 */
		readonly ldbconnection?: string;
		/**
		 * This property is used to specify the name of a LiteDBStatement.
		 */
		readonly name?: string;
		/**
		 * This property sets an array containing the parameters used in a query statement.
		 */
		readonly parameters?: string;
		/**
		 * This read-only property holds the parent object of a LiteDBStatement.
		 */
		readonly parent?: object;
		/**
		 * This property is used to set a query statement used in the executeQuery() or executeUpdate() method.
		 */
		readonly query?: string;
		/**
		 * The onerror event occurs when a task request to a LiteDBStatement object fails.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.LiteDBStatement, nexacro.LiteDBErrorEventInfo>;
		/**
		 * This event occurs when a task requested by a LiteDBStatement is successful.
		 */
		readonly onsuccess?: nexacro.EventObject<nexacro.LiteDBStatement, nexacro.LiteDBEventInfo>;
		/**
		 * @param {boolean} v This property is used to determine how a LiteDBStatement object performs a requested task.
		 * @returns {void} 
		 */
		set_async(v: boolean): void;
		/**
		 * @param {string} v This property is used to set a LiteDBConnection object for the connection to a database.
		 * @returns {void} 
		 */
		set_ldbconnection(v: string): void;
		/**
		 * @param {string} v This property is used to specify the name of a LiteDBStatement.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property sets an array containing the parameters used in a query statement.
		 * @returns {void} 
		 */
		set_parameters(v: string): void;
		/**
		 * @param {string} v This property is used to set a query statement used in the executeQuery() or executeUpdate() method.
		 * @returns {void} 
		 */
		set_query(v: string): void;
		/**
		 * This method is used to stop the ongoing operation conducted by a LiteDBStatement.
		 */
		close(): null;
		/**
		 * This method is used to conduct a SELECT query.
		 * @param {string} strQuery This is a string that represents a SELECT query statement to conduct.

If you do not set this parameter, the query statement set as a value of the query property will be applied instead.
		 * @returns {boolean} 
		 */
		executeQuery(strQuery?: string): boolean;
		/**
		 * This method is used to conduct a Insert, Update or Delete query.
		 * @param {string} strQuery This is a string that represents a INSERT, UPDATE or DELETE query statement to conduct.

If you do not set this parameter, the query statement set as a value of the query property will be applied instead.
		 * @returns {boolean} 
		 */
		executeUpdate(strQuery?: string): boolean;
	}
}

