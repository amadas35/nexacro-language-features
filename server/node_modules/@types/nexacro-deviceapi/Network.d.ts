// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    Network: nexacro.Network;
}

    
declare namespace nexacro {
    type NetworkOmitKeys = 'id'|'addEventHandler'|'clearEventHandler'|'findEventHandler'|'getEventHandler'|'removeEventHandler'|'setEventHandler';
	
	interface Network extends Omit<nexacro.EventSinkObject, NetworkOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.Network;
	    /**
		 * This read-only property holds an integer that indicates an available network for a mobile device.
		 */
		readonly availabletype?: any;
		/**
		 * This property is used to specify the name of a Network.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the parent object of a Network.
		 */
		readonly parent?: object;
		/**
		 * This read-only property holds the time when the mobile device checks available networks.
		 */
		readonly timestamp?: any;
		/**
		 * This event occurs when a mobile device fails to check the network state.
		 */
		readonly onrecverror?: nexacro.EventObject<nexacro.Network, nexacro.NetworkErrorEventInfo>;
		/**
		 * This event occurs when a mobile device has successfully checked network status.
		 */
		readonly onrecvsuccess?: nexacro.EventObject<nexacro.Network, nexacro.NetworkEventInfo>;
		/**
		 * @param {string} v This property is used to specify the name of a Network.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * This method returns whether the mobile device can access a certain URL.
		 * @param {string} strURL This is a string representing a URL to check to find whether the URL can be accessed.
		 * @returns {boolean} 
		 */
		isReachable(strURL: string): boolean;
		/**
		 * This method is used to set the intervals at which the network state around a mobile device is checked.
		 * @param {number} nIntervalTime This is the number of milliseconds indicating the intervals at which the network state is checked.

The valid range is between 200ms and 86,400,000ms.
		 * @returns {boolean} 
		 */
		watchStart(nIntervalTime: number): boolean;
		/**
		 * This method is used to terminate the regular check on the state of networks. The check is set by the watchStart() method.
		 */
		watchStop(): null;
	}
}

