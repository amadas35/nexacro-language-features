// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 4.3;
    
interface NexacroAPI {
    Date: nexacro.Date;
}

    
declare namespace nexacro {
    
	interface Date  {
	    /**
		 * @constructor
		 */
		new(): nexacro.Date;
	    /**
		 * This method is used to add as many days as specified to the value of a Date object.
		 * @param {number} nDays It is the number of days to add to the value of a Date object.

If it is a negative number, it will be deducted from the value of a Date object as much.
		 * @returns {number} 
		 */
		addDate(nDays: number): number;
		/**
		 * This method is used to add as many hours as specified to the value of a Date object.
		 * @param {number} nHours It is the number of hours to add to the value of a Date object.

If it is a negative number, it will be deducted from the value of a Date object as much.
		 * @returns {number} 
		 */
		addHours(nHours: number): number;
		/**
		 * This method is used to add as many milliseconds as specified to the value of a Date object.
		 * @param {number} nMsec It is the number of milliseconds to add to the value of a Date object.

If it is a negative number, it will be deducted from the value of a Date object as much.
		 * @returns {number} 
		 */
		addMilliseconds(nMsec: number): number;
		/**
		 * This method is used to add as many minutes as specified to the value of a Date object.
		 * @param {number} nMinutes It is the number of minutes to add to the value of a Date object.

If it is a negative number, it will be deducted from the value of a Date object as much.
		 * @returns {number} 
		 */
		addMinutes(nMinutes: number): number;
		/**
		 * This method is used to add as many months as specified to the value of a Date object.
		 * @param {number} nMonths It is the number of months to add to the value of a Date object.

If it is a negative number, it will be deducted from the value of a Date object as much.
		 * @returns {number} 
		 */
		addMonth(nMonths: number): number;
		/**
		 * This method is used to add as many seconds as specified to the value of a Date object.
		 * @param {number} nSeconds It is the number of seconds to add to the value of a Date object.

If it is a negative number, it will be deducted from the value of a Date object as much.
		 * @returns {number} 
		 */
		addSeconds(nSeconds: number): number;
		/**
		 * This method is used to add as many years as specified to the value of a Date object.
		 * @param {number} nYears It is the number of years to add to the value of a Date object.

If it is a negative number, it will be deducted from the value of a Date object as much.
		 * @returns {number} 
		 */
		addYear(nYears: number): number;
		/**
		 * This method is used to return the day drawn from the value of a Date object.
		 * @returns {number} 
		 */
		getDate(): number;
		/**
		 * This method is used to return the weekday drawn from the value of a Date object.
		 * @returns {number} 
		 */
		getDay(): number;
		/**
		 * This method is used to return the year drawn from the value of a Date object. The year will be returned in 4-digit format.
		 * @returns {number} 
		 */
		getFullYear(): number;
		/**
		 * This method is used to return the hour drawn from the value of a Date object.
		 * @returns {number} 
		 */
		getHours(): number;
		/**
		 * This method is used to return the millisecond drawn from the value of a Date object.
		 * @returns {number} 
		 */
		getMilliseconds(): number;
		/**
		 * This method is used to return the minute drawn from the value of a Date object.
		 * @returns {number} 
		 */
		getMinutes(): number;
		/**
		 * This method is used to return the month drawn from the value of a Date object.
		 * @returns {number} 
		 */
		getMonth(): number;
		/**
		 * This method is used to return the second drawn from the value of a Date object.
		 * @returns {number} 
		 */
		getSeconds(): number;
		/**
		 * This method is used to return the value of a Date object in the form of a millisecond.
		 * @returns {number} 
		 */
		getTime(): number;
		/**
		 * This method is used to return the difference between Universal Time Coordinated (UTC) and the value of a Date object. The returned value is expressed in minute.
		 * @returns {number} 
		 */
		getTimezoneOffset(): number;
		/**
		 * This method is used to return the day drawn from the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @returns {number} 
		 */
		getUTCDate(): number;
		/**
		 * This method is used to return the weekday drawn from the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @returns {number} 
		 */
		getUTCDay(): number;
		/**
		 * This method is used to return the year drawn from the value of a Date object. The year will be returned in 4-digit format. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @returns {number} 
		 */
		getUTCFullYear(): number;
		/**
		 * This method is used to return the hour drawn from the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @returns {number} 
		 */
		getUTCHours(): number;
		/**
		 * This method is used to return the millisecond drawn from the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @returns {number} 
		 */
		getUTCMilliseconds(): number;
		/**
		 * This method is used to return the minute drawn from the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @returns {number} 
		 */
		getUTCMinutes(): number;
		/**
		 * This method is used to return the month drawn from the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @returns {number} 
		 */
		getUTCMonth(): number;
		/**
		 * This method is used to return the second drawn from the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @returns {number} 
		 */
		getUTCSeconds(): number;
		/**
		 * This method is used to return the year drawn from the value of a Date object.
		 * @returns {number} 
		 */
		getYear(): number;
		/**
		 * This method is used to parse a date string and returns the number of milliseconds between the date string and midnight of January 1, 1970.
		 * @param {string} strDate It is a string representing a date.
		 * @returns {number} 
		 */
		parse(strDate: string): number;
		/**
		 * This method is used to change the day stored in the value of a Date object.
		 * @param {number} nDate It is the value of a day to be set after change.

If you specify a number bigger than the last day of the current month, the entire date will be changed to the next month.
If you specify 0, the entire date will be changed to the last day of the previous month.
If you specify a negative number, the date will be calculated by counting backward as much as the number, beginning from the last day of the previous month.
		 * @returns {number} 
		 */
		setDate(nDate: number): number;
		/**
		 * This method is used to change the year or entire date stored in the value of a Date object.
		 * @param {number} nYear It is the value of a year to be set after change.
		 * @param {number} nMonth It specifies a code value ranging from 0 (January) to 11 (December), which is a month to be set.

If this parameter is not set, the month will not change.
		 * @param {number} nDate It is the value of a day to be set after change.

If this parameter is not set, the day will not change.
		 * @returns {number} 
		 */
		setFullYear(nYear: number, nMonth?: number, nDate?: number): number;
		/**
		 * This method is used to change the hour or entire date stored in the value of a Date object.
		 * @param {number} nHours It is the value of an hour to be set after change.
		 * @param {number} nMinutes It is the value of a minute to be set after change.

If this parameter is not set, the minute will not change.
		 * @param {number} nSeconds It is the value of a second to be set after change.

If this parameter is not set, the second will not change.
		 * @param {number} nMillisecond It is the value of a millisecond to be set after change.

If this parameter is not set, the millisecond will not change.
		 * @returns {number} 
		 */
		setHours(nHours: number, nMinutes?: number, nSeconds?: number, nMillisecond?: number): number;
		/**
		 * This method is used to change the millisecond stored in the value of a Date object.
		 * @param {number} nMilliSecond It is the value of a millisecond to be set after change.
		 * @returns {number} 
		 */
		setMilliseconds(nMilliSecond: number): number;
		/**
		 * This method is used to change the minute stored in the value of a Date object.
		 * @param {number} nMinutes It is the value of a minute to be set after change.
		 * @param {number} nSeconds It is the value of a second to be set after change.

If this parameter is not set, the second will not change.
		 * @param {number} nMillisecond It is the value of a millisecond to be set after change.

If this parameter is not set, the millisecond will not change.
		 * @returns {number} 
		 */
		setMinutes(nMinutes: number, nSeconds?: number, nMillisecond?: number): number;
		/**
		 * This method is used to change the month in the value of a Date object.
		 * @param {number} nMonth It specifies a code value ranging from 0 (January) to 11 (December), which is a month to be set.
		 * @param {number} nDate It is the value of a day to be set after change.

If this parameter is not set, the day will not change.
		 * @returns {number} 
		 */
		setMonth(nMonth: number, nDate?: number): number;
		/**
		 * This method is used to change the second stored in the value of a Date object.
		 * @param {number} nSeconds It is the value of a second to be set after change.
		 * @param {number} nMillisecond It is the value of a millisecond to be set after change.

If this parameter is not set, the millisecond will not change.
		 * @returns {number} 
		 */
		setSeconds(nSeconds: number, nMillisecond?: number): number;
		/**
		 * This method is used to set the date and time values of a Date object in the form of a millisecond.
		 * @param {number} nMs You can specify the span between the midnight of 1 January 1970 and the time you want to set. The span will be specified in the form of a millisecond.
		 * @returns {number} 
		 */
		setTime(nMs: number): number;
		/**
		 * This method is used to change the day stored in the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @param {number} nDate It is the value of a day to be set after change.
		 * @returns {number} 
		 */
		setUTCDate(nDate: number): number;
		/**
		 * This method is used to change the year or entire date stored in the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @param {number} nYears It is the value of a year to be set after change.
		 * @param {number} nMonths It specifies a code value ranging from 0 (January) to 11 (December), which is a month to be set.

If this parameter is not set, the month will not change.
		 * @param {number} nDate It is the value of a day to be set after change.

If this parameter is not set, the day will not change.
		 * @returns {number} 
		 */
		setUTCFullYear(nYears: number, nMonths?: number, nDate?: number): number;
		/**
		 * This method is used to change the hour or entire date stored in the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @param {number} nHours It is the value of an hour to be set after change.
		 * @param {number} nMinutes It is the value of a minute to be set after change.

If this parameter is not set, the minute will not change.
		 * @param {number} nSeconds It is the value of a second to be set after change.

If this parameter is not set, the second will not change.
		 * @param {number} nMillisecond It is the value of a millisecond to be set after change.

If this parameter is not set, the millisecond will not change.
		 * @returns {number} 
		 */
		setUTCHours(nHours: number, nMinutes?: number, nSeconds?: number, nMillisecond?: number): number;
		/**
		 * This method is used to change the millisecond stored in the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @param {number} nMs It is the value of a millisecond to be set after change.
		 * @returns {number} 
		 */
		setUTCMilliseconds(nMs: number): number;
		/**
		 * This method is used to change the minute stored in the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @param {number} nMinutes It is the value of a minute to be set after change.
		 * @param {number} nSeconds It is the value of a second to be set after change.

If this parameter is not set, the second will not change.
		 * @param {number} nMillisecond It is the value of a millisecond to be set after change.

If this parameter is not set, the millisecond will not change.
		 * @returns {number} 
		 */
		setUTCMinutes(nMinutes: number, nSeconds?: number, nMillisecond?: number): number;
		/**
		 * This method is used to change the month in the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @param {number} nMonth It specifies a code value ranging from 0 (January) to 11 (December), which is a month to be set.
		 * @param {number} nDate It is the value of a day to be set after change.

If this parameter is not set, the day will not change.
		 * @returns {number} 
		 */
		setUTCMonth(nMonth: number, nDate?: number): number;
		/**
		 * This method is used to change the second stored in the value of a Date object. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @param {number} nSeconds It is the value of a second to be set after change.
		 * @param {number} nMillisecond It is the value of a millisecond to be set after change.

If this parameter is not set, the millisecond will not change.
		 * @returns {number} 
		 */
		setUTCSeconds(nSeconds: number, nMillisecond?: number): number;
		/**
		 * This method is used to change the year in the value of a Date object.
		 * @param {number} nYears It is the value of a year to be set after change.
		 * @returns {number} 
		 */
		setYear(nYears: number): number;
		/**
		 * This method is used to return the date drawn from the value of a Date object. The date will be returned in the form of a string.
		 * @returns {string} 
		 */
		toDateString(): string;
		/**
		 * This method is used to return the date and time drawn from value of a Date object in the form of a string. The calculation is conducted based on Greenwich Mean Time (GMT).
		 * @returns {string} 
		 */
		toGMTString(): string;
		/**
		 * This method is used to return the date drawn from the value of a Date object. The date will be returned in the form of the string formatted according to a certain locale.
		 * @param {string} strLocale This is a string whose format is "language[_country]" and that represents a combination of a language code and country code. The language code follows the ISO 639-1 standard while the country code follows the ISO 3166-1 alpha-2.

If you do not set this parameter, the value of the locale property of the Environment object will be applied instead.
If you do not set even the locale property of the Environment, the system locale will be applied instead.
		 * @returns {string} 
		 */
		toLocaleDateString(strLocale?: string): string;
		/**
		 * This method is used to return the date and time drawn from the value of a Date object. The date and time will be returned in the form of the string formatted according to a certain locale.
		 * @param {string} strLocale This is a string whose format is "language[_country]" and that represents a combination of a language code and country code. The language code follows the ISO 639-1 standard while the country code follows the ISO 3166-1 alpha-2.

If you do not set this parameter, the value of the locale property of the Environment object will be applied instead.
If you do not set even the locale property of the Environment, the system locale will be applied instead.
		 * @returns {string} 
		 */
		toLocaleString(strLocale?: string): string;
		/**
		 * This method is used to return the time drawn from the value of a Date object. The time will be returned in the form of the string formatted according to a certain locale.
		 * @param {string} strLocale This is a string whose format is "language[_country]" and that represents a combination of a language code and country code. The language code follows the ISO 639-1 standard while the country code follows the ISO 3166-1 alpha-2.

If you do not set this parameter, the value of the locale property of the Environment object will be applied instead.
If you do not set even the locale property of the Environment, the system locale will be applied instead.
		 * @returns {string} 
		 */
		toLocaleTimeString(strLocale?: string): string;
		/**
		 * This method is used to return the date and time values saved in a Date object in the form of a string.
		 * @returns {string} 
		 */
		toString(): string;
		/**
		 * This method is used to return the time drawn from the value of a Date object. The date will be returned in the form of a string.
		 * @returns {string} 
		 */
		toTimeString(): string;
		/**
		 * This method is used to return the date and time drawn from value of a Date object in the form of a string. The calculation is conducted based on Universal Time Coordinated (UTC).
		 * @returns {string} 
		 */
		toUTCString(): string;
		/**
		 * This static method is used to returns the number of milliseconds between a date specified as an argument and midnight January 1 1970. The calculation is conducted based on Universal Time Coordinated (UTC) or Greenwich Mean Time (GMT).
		 * @param {number} nYear It is a four-digit value representing the year.

If you specify a value ranging from 0 to 99, the value will be added to 1900.
		 * @param {number} nMonth It specifies a code value representing a month. The value ranges from 0 (January) to 11 (December).
		 * @param {number} nDay It specifies a code value representing a day. The value ranges from 1 to 31.
		 * @param {number} nHours It specifies a code value representing an hour. 

The value ranges from 0 (midnight) to 23 (11p.m.).
		 * @param {number} nMinutes It specifies a code value representing a minute. The value ranges from 0 to 59.
		 * @param {number} nSeconds It specifies a code value representing a second. The value ranges from 0 to 59.
		 * @param {number} nMillisecond It specifies a code value representing a millisecond. The value ranges from 0 to 999.
		 * @returns {number} 
		 */
		UTC(nYear: number, nMonth: number, nDay: number, nHours?: number, nMinutes?: number, nSeconds?: number, nMillisecond?: number): number;
		/**
		 * This method is used to return the date and time values saved in a Date object in the form of a string.
		 * @returns {string} 
		 */
		valueOf(): string;
	}
}

