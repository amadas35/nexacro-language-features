// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 4.3;
    
interface NexacroAPI {
    EventObject: nexacro.EventObject<nexacro.EventSinkObject, nexacro.EventInfo>;
}

    
declare namespace nexacro {
    
	interface EventObject<O, E>  {
	    /**
		 * @constructor
		 */
		new(): nexacro.EventObject<O, E>;
	    /**
		 * This read-only property holds the number of event handlers defined in an event.
		 */
		readonly length?: any;
		/**
		 * This property is used to set the name of an EventObject.
		 */
		readonly name?: string;
		/**
		 * @param {string} v This property is used to set the name of an EventObject.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * This method is used to fire an event by calling the handler defined in the event.
		 * @param {object} objFireComp This is an object that will be delivered to the event handler.

Normally, this object constitutes an object that fires the relevant event.
		 * @param {any} objEventInfo 
		 * @param {boolean} bCancelable This parameter determines whether to cancel the execution of handlers depending on a return value.

With this parameter set to "true", all the following handlers will be canceled if a handler returns "false".
With this parameter set to "true", the following handler will be executed if any of a handler returns "true".

With this parameter set to "false", the following handler will be executed regardless of a return value.

The default value of this parameter is "false".
		 * @returns {boolean} 
		 */
		fireEvent(objFireComp: object, objEventInfo: any, bCancelable?: boolean): boolean;
	}
}

