// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 4.3;
    
interface NexacroAPI {
    Decimal: nexacro.Decimal;
}

    
declare namespace nexacro {
    
	interface Decimal  {
	    /**
		 * @constructor
		 */
		new(): nexacro.Decimal;
	    /**
		 * This methods converts the value saved in a Decimal object to an absolute value.
		 * @returns {nexacro.Decimal} 
		 */
		abs(): nexacro.Decimal;
		/**
		 * This method returns the result of adding a specified decimal type value to the value of a Decimal object.
		 * @param {nexacro.Decimal} objDecimal It is a Decimal object that will be added to the primary Decimal object.
		 */
		addDecimal(objDecimal: nexacro.Decimal): null;
		/**
		 * This method adds a number to the value of a Decimal object.
		 * @param {number} nValue It is a number that will be added to a Decimal object.
		 */
		addDouble(nValue: number): null;
		/**
		 * This method rounds the value saved in a Decimal object upward to its nearest integer.
		 * @returns {nexacro.Decimal} 
		 */
		ceil(): nexacro.Decimal;
		/**
		 * This method returns the result of dividing the value of a Decimal object by a specified decimal type value.
		 * @param {nexacro.Decimal} objDecimal It is a Decimal object that serves as a divisor of the primary Decimal object.
		 */
		divDecimal(objDecimal: nexacro.Decimal): null;
		/**
		 * This method returns the result of dividing the value of a Decimal object by a specified number.
		 * @param {number} nValue It is a number that serves as a divisor of a Decimal object.
		 */
		divDouble(nValue: number): null;
		/**
		 * This method rounds the value saved in a Decimal object downward to its nearest integer.
		 * @returns {nexacro.Decimal} 
		 */
		floor(): nexacro.Decimal;
		/**
		 * This method compares the value of a Decimal object delivered as an argument with the value of the primary decimal object. Then, it identifies whether those two values are the same.
		 * @param {nexacro.Decimal} objDecimal It is a Decimal object whose value will be compared with that of the primary Decimal object.
		 * @returns {boolean} 
		 */
		isEqual(objDecimal: nexacro.Decimal): boolean;
		/**
		 * This method is used to identify whether a Decimal object has Infinity as its value.
		 * @returns {boolean} 
		 */
		isInfinity(): boolean;
		/**
		 * This method is used to identify whether a Decimal object has NaN as its value.
		 * @returns {boolean} 
		 */
		isNaN(): boolean;
		/**
		 * This method is used to identify whether a Decimal object has Infinity or NaN as its value.
		 * @returns {boolean} 
		 */
		isNaNOrInf(): boolean;
		/**
		 * This method is used to identify whether a Decimal object has a negative value.
		 * @returns {boolean} 
		 */
		isNegative(): boolean;
		/**
		 * This method returns whether a Decimal object has zero as its value.
		 * @returns {boolean} 
		 */
		isZero(): boolean;
		/**
		 * This method calculates the remaining value after dividing the value of a Decimal object by a specified decimal type value.
		 * @param {nexacro.Decimal} objDecimal It is a Decimal object that serves as a divisor of the primary Decimal object.
		 */
		modDecimal(objDecimal: nexacro.Decimal): null;
		/**
		 * This method returns the remaining value after dividing the value of a Decimal object by a specified number.
		 * @param {number} nValue It is a number that serves as a divisor of a Decimal object.
		 */
		modDouble(nValue: number): null;
		/**
		 * This method returns the result of multiplying the value of a Decimal object by a specified decimal type value.
		 * @param {nexacro.Decimal} objDecimal It is a Decimal object that serves as a factor for the primary Decimal object.
		 */
		mulDecimal(objDecimal: nexacro.Decimal): null;
		/**
		 * This method returns the result of multiplying the value of a Decimal object by a specified number.
		 * @param {number} nValue It is a number that serves as a factor for a Decimal object.
		 */
		mulDouble(nValue: number): null;
		/**
		 * This method rounds the value saved in a Decimal object to the nearest integer.
		 * @returns {nexacro.Decimal} 
		 */
		round(): nexacro.Decimal;
		/**
		 * This method specifies a decimal type argument to set the value of a Decimal object.
		 * @param {nexacro.Decimal} objDecimal It is another Decimal object that will be saved to the primary Decimal object.
		 */
		setDecimal(objDecimal: nexacro.Decimal): null;
		/**
		 * This method specifies a number type argument that will be saved in a Decimal object.
		 * @param {number} nValue It is a number that will be saved to a Decimal object.
		 */
		setDouble(nValue: number): null;
		/**
		 * This method specifies a number in the form of a string that will be saved to a Decimal object.
		 * @param {string} strValue It is a number in the form of a string that will be saved to a Decimal object. 

If a character other than a number is included in the string, saving of the string will be failed.
		 */
		setString(strValue: string): null;
		/**
		 * This method returns the result of subtracting a specified decimal type value from the value of a Decimal object.
		 * @param {nexacro.Decimal} objDecimal It is a Decimal object that serves as a subtrahend for the primary Decimal object.
		 */
		subDecimal(objDecimal: nexacro.Decimal): null;
		/**
		 * This method returns the result of subtracting a specified number from the value of a Decimal object.
		 * @param {number} nValue It is a number that serves as a subtrahend for a Decimal object.
		 */
		subDouble(nValue: number): null;
		/**
		 * This method returns the value stored in a Decimal object. The value is returned in the form of a string.
		 * @returns {string} 
		 */
		toString(): string;
		/**
		 * This method returns the integer part of the value saved in a Decimal object.
		 * @returns {nexacro.Decimal} 
		 */
		trunc(): nexacro.Decimal;
	}
}

