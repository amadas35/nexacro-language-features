// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 4.3;
    
interface NexacroAPI {
    System: nexacro.System;
}

    
declare namespace nexacro {
    
	interface System  {
	    
	    /**
		 * This read-only property holds the name of the NetBIOS of the computer where an application is running.
		 */
		readonly computername?: any;
		/**
		 * This read-only property holds the manufacture of the CPU of the computer where an application is running.
		 */
		readonly cpuarchitecture?: any;
		/**
		 * This read-only property holds the number of CPUs in the computer where an application is running.
		 */
		readonly cpucount?: any;
		/**
		 * This read-only property holds the information on the CPU of the computer where an application is running.
		 */
		readonly cputype?: any;
		/**
		 * This property holds the locale code value set by the computer that is running an application.
		 */
		readonly locale?: any;
		/**
		 * This read-only property holds the ID of the user who logs into the computer where an application is running.
		 */
		readonly loginuser?: any;
		/**
		 * This read-only property holds the current screen orientation of the mobile device that runs the application.
		 */
		readonly mobileorientation?: any;
		/**
		 * This read-only property holds the model name of the mobile device where an application is running.
		 */
		readonly mobileproducttype?: any;
		/**
		 * This read-only property holds the number of monitors connected to the computer where an application is running.
		 */
		readonly monitorcount?: any;
		/**
		 * This read-only property holds a certain type of Windows Nexacro engine where an application runs.
		 */
		readonly navigatorfullname?: any;
		/**
		 * This read-only property holds the information on the browser where an application is running.
		 */
		readonly navigatorname?: any;
		/**
		 * This read-only property holds the version of the browser where an application is running.
		 */
		readonly navigatorversion?: any;
		/**
		 * This read-only property holds the value of a device token for receiving push notifications in the mobile device that runs your application.
		 */
		readonly notificationtoken?: any;
		/**
		 * This read-only property holds the name and version of the OS where an application is running.
		 */
		readonly osversion?: any;
		/**
		 * This read-only property holds the size of the taskbar (indicator bar for Android) of the mobile device in which an application is running.
		 */
		readonly taskbarsize?: any;
		/**
		 * This method is used to load an .xfdl file onto a user-DOM in a web browser. The .xfdl file here is generated through Nexacro Studio.
		 * @param {object} window This is a window object.
		 * @param {object} document This is a document object.
		 * @param {string} strKey This is a string representing a key used to register a variable to the AppVariables field of the application.
		 * @param {string} stradlurl This is a string that represents the name of the generated .xadl file.
		 * @param {string} strDivId This is a string representing the ID of the user division onto which the generated xfdl file will be loaded.
		 * @param {string} strxfdlurl This is a string that represents the name of the generated .xfdl file.
		 */
		attachChildFrame(window: object, document: object, strKey: string, stradlurl: string, strDivId: string, strxfdlurl: string): null;
		checkDevicePermission(arrPermissiontypes: any[]): null;
		/**
		 * This method is used to delete data stored in the clipboard of the system.
		 */
		clearClipboard(): null;
		/**
		 * This method converts an x-coordinate based on the client of the component into an x-coordinate based on the screen.
		 * @param {object} objComp This is an object that serves as a base for the x-coordinate to convert.
		 * @param {number} nPosX This is a number representing the component-based x-coordinate that will be converted.
		 * @returns {number} 
		 */
		clientToScreenX(objComp: object, nPosX: number): number;
		/**
		 * This method converts a y-coordinate based on the client of the component into a y-coordinate based on the screen.
		 * @param {object} objComp This is an object that serves as a base for the y-coordinate to convert.
		 * @param {number} nPosY This is a number representing the component-based y-coordinate that will be converted.
		 * @returns {number} 
		 */
		clientToScreenY(objComp: object, nPosY: number): number;
		/**
		 * This method is used to convert a path with an alias into its actual path.
		 * @param {string} strAlias This is a string that represents a path with an alias. The path will be converted into its actual path.
		 * @returns {string} 
		 */
		convertRealPath(strAlias: string): string;
		/**
		 * This method is used to open a web browser with a specified URL.
		 * @param {string} strUrl This is a string that represents the URL of a web page.
		 */
		execBrowser(strUrl: string): null;
		execDefaultBrowser(strUrl: string): null;
		/**
		 * This method is used to execute Nexacro Platform by by specifying an execution path and arguments.
		 * @param {string} strCommand You can specify an option by combining an option reserved word and option value.
If you want to specify an empty value as an option value, you must surround the value with quotation marks.

-K: this specifies a string that represents the key of an application.
-S: this specifies a path to a bootstrap.
-C: this specifies the directory of components.
-THR: this specifies the number of threads executed in the communications inside the engine or in other manages.
          Threads amount to three at least and ten at most. The default number is three.
-SP: this specifies a path to a splash image.
-SM: this specifies "none" , which prevent a system message from appearing in a splash image.
        If an error occurs in the process of launching an application, the error message will occur even if this option is set to "none".
-LF: this specifies the coordinates of the left position of an application.
-TP : this specifies the coordinates of the top position of an application.
-WD: this specifies the width of an application in pixel.
-HT: this specifies the height of an application in pixel.
-LG: this specifies a path to a loading image.
-TW: this specifies the maximum waiting time for the threads of the managers inside the engine.
-OO: this specifies a Boolean value to determine whether to permit the execution of only one application if there are more than one application that have the same key.
-V: this specifies global variables with the format "variable name:type=value variable name:type=value".
       Variables are separated by whitespaces.
       If you specify "Type" as "ev", the variable will be added to the Variables field in Environment.
       If you specify "Type" as "ec", the variable will be added to the Cookies field in Environment.
       If you do not specify "Type" or specifies it as "av", the variable will be added to the Variables field in the application.
-SIE: this specifies a Boolean value to determine whether to close an application with an error message opened if the error occurs while executing the application.
         This option defaults to "false".
-CT: this specifies the maximum waiting time for checking whether a network is connected.
         The check-up is conducted before the launch of the application
         if a network is not detected in the waiting time, the application will be closed.
-SCR: this specifies screen IDs used for the Layout Manager. 
-CC: this option is designed to deactivate the code caching of V8.
         If you specify "NO", the code caching will be unavailable.
         If you specify "AL" or nothing, the code caching will be available.
-AU: this option determines whether the engine is updated when an application launches.
         If you specify "auto", the engine will be updated to the latest version.
         If you specify "manual", the engine will not be updated.
- NC: this specifies the location and name of a Config file applied when the application is launched.
         You can set only an XML file located in the local path.
         If you specify a file name only, Nexacro Platform will attempt to find the file in the location where the nexacro.exe file exists.
         If you do not set this option, Nexacro Platform will search for the nexacro_config.xml file located in the path %USERAPP%\config\"+[Key].
		 */
		execNexacro(strCommand: string): null;
		/**
		 * This method is used to execute a program in the Windows shell.
		 * @param {string} strShellCmd This is a command that prompts the Windows shell to perform a certain task.

You can execute basic programs registered in Windows by specifying command like "notepad" and "calc".

You can open a local file with the format "file://absolute path\\file name".

You can open a web page with the format "http://path" or "https://path".
You can open a file on the Web with the format "http://path/file name", "https://path/file name".
If you specify a URL with the scheme "http://" or "https://", a default web browser set by the system will be launched.

You can convert an alias to its actual path by calling the convertRealPath() method.
		 */
		execShell(strShellCmd: string): null;
		exportPDF(objComponent: object, strFileName: string): boolean;
		/**
		 * This method returns data from the clipboard of the system. The data is returned in the form of a defined type.
		 * @param {string} strFormat This is a string representing the data type to apply when the data is obtained from the system clipboard.

If you specify "CF_TEXT", the data will be returned in the form of text.
If you specify "CF_UNICODETEXT", the data will be returned in the form of Unicode text.
If you specify "CF_CSV", the data will be returned in the CSV form.
		 * @param {object} objCallBackFunc This is an object that represents a callback used to obtain data from the system clipboard.

* This parameter is applicable only to Google Chrome and Opera.
		 * @param {object} objTarget This is an object that represents a region where the callback is defined.

If you omit this parameter, the current window will be applied automatically.

* This parameter is applicable only to Google Chrome and Opera.
		 * @returns {any} 
		 */
		getClipboard(strFormat: string, objCallBackFunc?: object, objTarget?: object): any;
		/**
		 * This method is used to obtain the x-coordinate of the position where a mouse cursor is located.
		 * @returns {number} 
		 */
		getCursorX(): number;
		/**
		 * This method is used to obtain the y-coordinate of the position where a mouse cursor is located.
		 * @returns {number} 
		 */
		getCursorY(): number;
		/**
		 * This method returns the index number of the monitor closest to a delivered coordinate in the multi-monitor environment.
		 * @param {number} nCursorX This is a number that indicates an x-coordinate.
		 * @param {number} nCursorY This is a number that indicates a y-coordinate.
		 * @returns {number} 
		 */
		getMonitorIndex(nCursorX: number, nCursorY: number): number;
		/**
		 * This method returns the height of the screen where the application is running.
		 * @returns {number} 
		 */
		getScreenHeight(): number;
		getScreenPrintString(objComponent: object): string;
		/**
		 * This method returns a Rect object that contains the information on a specified monitor.
		 * @param {number} nMonitorIndex This is the index number of a monitor about which the information will be returned.
		 * @returns {object} 
		 */
		getScreenRect(nMonitorIndex: number): object;
		/**
		 * This method returns the resolution of a specified monitor.
		 * @param {number} nMonitorIndex This is the index number of a monitor whose resolution will be obtained.
		 * @returns {string} 
		 */
		getScreenResolution(nMonitorIndex: number): string;
		/**
		 * This method returns the width of the screen where the application is running.
		 * @returns {number} 
		 */
		getScreenWidth(): number;
		/**
		 * This method returns whether a specified monitor is a main monitor in the multi-monitor environment.
		 * @param {number} nMonitorIndex This is the index number of a monitor that will be checked to determine whether it is a main monitor.
		 * @returns {boolean} 
		 */
		isPrimaryMonitor(nMonitorIndex: number): boolean;
		/**
		 * This method is used to print out the image of a specified component through a printer.
		 * @param {object} objComponent This is an object that represents a component to print out.
		 * @param {boolean} bHideDialog For "true", the image will be printed out without a window for setting a printer.
For "false", a window for setting a printer will be opened before the image is printed out.

The default value is "true".

* This parameter always works as if its value is "false" in the desktop WRE as the environment does not support this parameter.
		 * @param {string} strVAlign This parameter specifies a vertical position of paper where the image is printed out.

"top" : the image will be printed out in the upper part of paper.
"middle" : the image will be printed out in the middle part of paper.
"bottom" : the image will be printed out in the lower part of paper.

The default value is "middle".

* This parameter always works as if its value is "top" in the desktop WRE as the environment does not support this parameter.
		 * @param {string} strHAlign This parameter specifies a horizontal position of paper where the image is printed out.

"left" : the image will be printed out on the left side of paper.
"center" : the image will be printed out at the center of paper.
"right" : the image will be printed out on the right side of paper.

The default value is "center".

* This parameter always works as if its value is "left" in the desktop WRE as the environment does not support this parameter.
		 * @param {boolean} bFitOnePage If the size of the image exceeds one page with this parameter set to "true", the image will be printed out, being squeezed within one page.
If the size of the image is smaller than one page with this parameter set to "true", the image will be printed on one page, being expanded as proportionally appropriate.

If this parameter is set to "false" in the same circumstances, the image will be printed out on multiple pages to fit the size.
In this case, the strVAlign and strHAlign parameters are automatically set to "top" and "left" respectively.

The default value is "false".

** This parameter always works as if its value is "false" in the desktop WRE as the environment does not support this parameter.
		 * @param {string} strOrientation This parameter determines paper orientation.

If you specify "portrait", the orientation will be portrait.
If you specify "landscape", the orientation will be landscape.

This parameter is applicable only when the bHideDialog parameter is set to "true".
The default value of this parameter is "portrait".

* This parameter is applicable only to the Windows NRE.
		 * @returns {boolean} 
		 */
		print(objComponent: object, bHideDialog?: boolean, strVAlign?: string, strHAlign?: string, bFitOnePage?: boolean, strOrientation?: string): boolean;
		requestDevicePermission(arrPermissionTypes: any[], strDescription?: string): null;
		/**
		 * This method returns the image of a specified component in the form of a Base64-encoded string.
		 * @param {object} objComponent This is an object representing a component whose image will be printed.
		 * @param {boolean} bWholeForm This parameter is applicable only when the component is a Form.

If you specify "true", the entire Form including the area out of sight will be printed as an image.
If you specify "false", only the area of the Form within sight of the current screen will be printed as an image.

The default value of this parameter is "false".
		 * @param {string} strImageType 
		 * @param {string} strOptions 
		 * @returns {string} 
		 */
		saveToImageBase64String(objComponent: object, bWholeForm?: boolean, strImageType?: string, strOptions?: string): string;
		/**
		 * This method is used to print the image of a specified component as a file.
		 * @param {object} objComponent This is an object representing a component whose image will be printed.
		 * @param {string} strFileName This is the name of an image file that will be printed.
		 * @param {string} strImageType This is the format of an image file that will be printed.

You can select a format among BMP, BMP_MONO, JPG, TIF, TIF_24, TIF_MONO, GIF and PNG.
		 * @param {string} strOptions This is a string that represents the options for printing an image file, such as a compression rate, compression type and DPI resolution.

You can set a compression rate only when the image type is JPG. You can set a rate with the format "Compression:rate".
The compression rate ranges from 0 to 100.
If you do not specify a compression rate when the image type is JPG, the rate will be set at 50 by default.

You can set a compression type only when the image type is TIF. You can set a type with the format "Compression:type".
You can select a compression type among NONE, LZW, CCITT3 and CCITT4.
If you do not specify a compression type when the image type is TIF, the compression type will be set to "LZW" by default.

As for DPI resolution, the formats for setting horizontal and vertical resolutions are "ResolutionX:resolution" and "ResolutionY:resolution"
The resolution is set in the form of an integer.
If you do not specify resolution, the both horizontal and vertical resolutions will be set at 96 by default.

Options are separated by semicolons like "Compress:95;ResolutionX:300".
		 * @param {boolean} bWholeForm This parameter is applicable only when the component is a Form.

If you specify "true", the entire Form including the area out of sight will be printed as an image.
If you specify "false", only the area of the Form within sight of the current screen will be printed as an image.

The default value of this parameter is "false".
		 * @returns {boolean} 
		 */
		saveToImageFile(objComponent: object, strFileName: string, strImageType: string, strOptions?: string, bWholeForm?: boolean): boolean;
		/**
		 * This method converts an x-coordinate based on the screen into an x-coordinate based on the client of the component.
		 * @param {object} objComp This is an object that serves as a base for the x-coordinate to convert.
		 * @param {number} nPosX This is a number representing the screen-based x-coordinate that will be converted.
		 * @returns {number} 
		 */
		screenToClientX(objComp: object, nPosX: number): number;
		/**
		 * This method converts a y-coordinate based on the screen into a y-coordinate based on the client of the component.
		 * @param {object} objComp This is an object that serves as a base for the y-coordinate to convert.
		 * @param {number} nPosY This is a number representing the screen-based y-coordinate that will be converted.
		 * @returns {number} 
		 */
		screenToClientY(objComp: object, nPosY: number): number;
		/**
		 * This method is used to save data to the clipboard of the system. The data is saved in the form of a defined type.
		 * @param {string} strFormat This is a string representing the data type to apply when the data is saved to the system clipboard.

If you specify "CF_TEXT", the data will be saved in the form of text.
If you specify "CF_UNICODETEXT", the data will be saved in the form of Unicode text.
If you specify "CF_CSV", the data will be saved in the CSV form.
		 * @param {string} varData This is a string that represents data to save.
		 */
		setClipboard(strFormat: string, varData: string): null;
		/**
		 * This method is used to display a dynamically-created ChildFrame in the form of a modal window that works in a synchronous manner.
		 * @param {object} objChildframe This a ChildFrame object that will be displayed as a modal window.
		 * @param {string} strID This is a string that represents the ID of a ChildFrame that will be opened as a modal window.

If you omit this parameter, the argument will adopt the name property of the ChildFrame.
		 * @param {object} objParentFrame This is an object representing the parent frame of the ChildFrame displayed as a modal window.

If you specify "null", the MainFrame will serve as a parent.
		 * @param {object} objArguList This a list of variables to add to a ChildFrame that takes the form of a modal window, with the format {variable name:variable value, variable name:variable value}.
		 * @param {object} objOpener This a Form object that will be the opener of the ChildFrame displayed as a modal window.

If unspecified, the opener will be the Form connected to the frame designated by the objParentFrame parameter.
If you specify "null" as a value of the objParentFrame parameter, this parameter will be undefined.
		 * @returns {boolean} 
		 */
		showModalSync(objChildframe: object, strID?: string, objParentFrame?: object, objArguList?: object, objOpener?: object): boolean;
		/**
		 * This method is used to display a dynamically-created ChildFrame in the form of a separate modal window.
		 * @param {object} objChildFrame This a ChildFrame object that will be displayed as a modal window.
		 * @param {string} strID This is a string that represents the ID of a ChildFrame that will be opened as a modal window.

If you omit this parameter, the argument will adopt the name property of the ChildFrame designated by the objChildFrame parameter.
		 * @param {object} objParentFrame This is an object representing the parent frame of the ChildFrame displayed as a modal window.

If you specify "null", nothing will be set as a parent.

If you specify an object other than a ChildFrame, an overlay color will not be displayed. An overlay color here indicates that the parent frame is not usable.
		 * @param {object} objArguList This a list of variables to add to a ChildFrame that takes the form of a modal window, with the format {variable name:variable value, variable name:variable value}.
		 * @param {object} objOpener This a Form object that will be the opener of the ChildFrame displayed as a modal window.

If unspecified, the opener will be the Form connected to the frame designated by the objParentFrame parameter.
If you specify "null" as a value of the objParentFrame parameter, this parameter will be undefined.
		 * @returns {string} 
		 */
		showModalWindow(objChildFrame: object, strID?: string, objParentFrame?: object, objArguList?: object, objOpener?: object): string;
	}
}

