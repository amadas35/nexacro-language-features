// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 4.3;
    
interface NexacroAPI {
    Point: nexacro.Point;
}

    
declare namespace nexacro {
    
	interface Point  {
	    /**
		 * @constructor
		 */
		new(): nexacro.Point;
	    /**
		 * This property is used to set the x-coordinate of a Point object.
		 */
		readonly x?: number;
		/**
		 * This property is used to set the y-coordinate of a Point object.
		 */
		readonly y?: number;
		/**
		 * @param {number} v This property is used to set the x-coordinate of a Point object.
		 * @returns {void} 
		 */
		set_x(v: number): void;
		/**
		 * @param {number} v This property is used to set the y-coordinate of a Point object.
		 * @returns {void} 
		 */
		set_y(v: number): void;
		/**
		 * This method is used to return a new Point object by copying the property values of the current Point object.
		 * @returns {object} 
		 */
		clone(): object;
		/**
		 * This method is used to copy delivered arguments as the values of the x and y properties of a Point object.
		 * @param {object} objPoint It is a Point object whose values of the x and y properties will be copied as the values of the x and y properties of the current Point object.
		 */
		copy(objPoint: object): null;
		/**
		 * This method is used to copy delivered arguments as the values of the x and y properties of a Point object.
		 * @param {number} nX It specifies a number that will be copied as a value of the x property of a Point object.
		 * @param {number} nY It specifies a number that will be copied as a value of the y property of a Point object.
		 */
		copy(nX: number, nY: number): null;
		/**
		 * This method is used to return whether the property values of the current Point object equals those of the Point object delivered as an argument.
		 * @param {object} objPoint It is a Point object whose x and y properties will be compared with those of the current Point object.
		 * @returns {boolean} 
		 */
		equals(objPoint: object): boolean;
		/**
		 * This method is used to return whether the property values of the current Point object equals those of the Point object delivered as an argument.
		 * @param {any[]} arrVal It is an array that contains two values, which will be compared with the x and y properties of the current Point object.
The first and second elements of the array will be compared with the the x and y properties respectively.
		 * @returns {boolean} 
		 */
		equals(arrVal: any[]): boolean;
		/**
		 * This method is used to return whether the property values of the current Point object equals those of the Point object delivered as an argument.
		 * @param {number} nX It specifies a number that will be compared with the x property of the current Point object.
		 * @param {number} nY It specifies a number that will be compared with the y property of the current Point object.
		 * @returns {boolean} 
		 */
		equals(nX: number, nY: number): boolean;
	}
}

