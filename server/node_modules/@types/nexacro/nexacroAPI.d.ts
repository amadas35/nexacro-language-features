// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 4.3;
    
declare var nexacro: NexacroAPI;
interface NexacroAPI {
    /**
	 * This method is used to add a user-defined error message to an application.
	 * @param {string} enumLang It specifies the language field to which an error message will be added.

If you specify "ko", the message will be added to the Korean field.
If you specify "en", the message will be added to the English field.
If you specify "ja", the message will be added to the Japanese field.
	 * @param {string} strCode It is the code of an error message to add.
	 * @param {string} strMsg It specifies an error message to add.
	 */
	addErrorMessage(enumLang: string, strCode: string, strMsg: string): null;
	/**
	 * This method is used to decode base64-encoded data.
	 * @param {string} strData This is a string representing base64-encoded data that will be decoded.
	 * @returns {string} 
	 */
	base64Decode(strData: string): string;
	/**
	 * This method is used to encode data in the Base64 scheme.
	 * @param {string} strData This is a string representing data that will be encoded in the Base64 scheme.
	 * @returns {object} 
	 */
	base64Encode(strData: string): object;
	/**
	 * This method rounds a numeric value upward to a value of the defined number of digits. Otherwise, this method rounds a numeric value off to its nearest integer.
	 * @param {number} nVal This is a numeric value that will be rounded up.
	 * @param {number} nFractionDigit This is the number of digits that the rounded-up value will hold.

If you specify 0, the decimal separator will be a base.
If you specify a positive number, the number of digits will fall on the fractional part.
If you specify a negative number, the number of digits will fall on the integer part.

The default value is 0.
	 * @returns {number} 
	 */
	ceil(nVal: number, nFractionDigit?: number): number;
	/**
	 * This method is used to delete the cache DB files and related temporary files of a current application.
	 */
	deleteCacheDB(): null;
	/**
	 * This method is used to flash the icon of an application on the taskbar.
	 * @param {string} enumType It determines the flash status of the application icon.

For "count", the icon flashes for the number of specified times.
For "timer", the icon flashes until the flashWindow() is called again with the "stop" argument.
For "timernofg", the icon flashes until the application's window comes to the foreground.
For "stop", the icon stop flashing.
	 * @param {number} nCount It specifies the number of times to flash the icon when the enumType parameter is specified as "count".

If the enumType parameter is not specified as "count", this value will be ignored.
	 * @param {number} nInterval It represents the interval of the icon's flashing, counted in millisecond.
	 */
	flashWindow(enumType: string, nCount: number, nInterval?: number): null;
	/**
	 * This method rounds a numeric value downward up to a value of the defined number of digits. Otherwise, this method rounds a numeric value downward to its nearest integer.
	 * @param {number} nVal This is a numeric value that will be rounded down.
	 * @param {number} nFractionDigit This is the number of digits that the rounded-down value will hold.

If you specify 0, the decimal separator will be a base.
If you specify a positive number, the number of digits will fall on the fractional part.
If you specify a negative number, the number of digits will fall on the integer part.

The default value is 0.
	 * @returns {number} 
	 */
	floor(nVal: number, nFractionDigit?: number): number;
	/**
	 * This method is used to immediately remove the data that remains unused in a memory.
	 */
	gc(): null;
	/**
	 * This method returns the Application object of a currently-executed application.
	 * @returns {object} 
	 */
	getApplication(): object;
	/**
	 * This method returns the value of a cookie defined in the Cookies area in Environment.
	 * @param {string} strID It is a string that represents the ID of a cookie whose value will be returned.
	 * @param {boolean} bSecure This parameter determines whether to obtain a cookie variable depending on the value of the Secure property.

For true, this method will obtain a cookie variable only when the Secure property is set to "true".
For false, this method will obtain a cookie variable only when the Secure property is set to "false".

If nothing is specified, this method will obtain a cookie variable regardless of the value of the Secure property.
	 * @returns {string} 
	 */
	getCookieVariable(strID: string, bSecure?: boolean): string;
	/**
	 * This method returns whether a zoom feature is set for the window, one of whose frame is designated as an argument.
	 * @param {object} objFrame This is an object representing a frame of the window that will be checked for the availability of a zoom feature.

This method will produce the same result whichever frame you specify from the same window.
	 * @returns {boolean} 
	 */
	getEnableWheelZoom(objFrame: object): boolean;
	/**
	 * This method returns the Environment object of a currently-executed application.
	 * @returns {object} 
	 */
	getEnvironment(): object;
	/**
	 * This method is used to return the value of a variable defined in the Variables field in Environment.
	 * @param {string} strID It specifies the ID of a variable whose value will be returned.
	 * @returns {string} 
	 */
	getEnvironmentVariable(strID: string): string;
	/**
	 * This method returns a variable defined in the HTTP Header of Environment.
	 * @param {string} strID It is a string resenting the ID of a variable whose value will be returned.
	 */
	getHTTPHeaderVariable(strID: string): null;
	getLogFilePath(): string;
	/**
	 * This method returns a list of ChildFrames opened in the window that includes the frame designated as an argument. The list is returned in the form of a collection.
	 * @param {object} objFrame It is an object representing a base frame.

If unspecified, a base frame may vary according to the conditions that are explained in the Remark section.
	 * @returns {any[]} 
	 */
	getPopupFrames(objFrame?: object): any[];
	/**
	 * This method is used to return a piece of individualized data that has been saved by an application.
	 * @param {string} strKey It is a key value that was specified when the relevant individualized data was saved.
	 * @returns {any} 
	 */
	getPrivateProfile(strKey: string): any;
	/**
	 * This method returns the execution path of an application.
	 * @returns {string} 
	 */
	getProjectPath(): string;
	/**
	 * This method returns the size of the area where text is displayed. The area is calculated based on the delivered arguments.
	 * @param {string} strText This is a string that represents the text to be displayed on the screen.
	 * @param {string} strFont This is a string representing a font to apply to the text set by the strText parameter.

You can apply a font among those defined by the font property of the relevant component.
	 * @param {number} nLimitWidth This is a number representing the maximum size of the text area, expressed in pixel.

If the strWordWrap parameter is set to "none" or "line", this parameter will be ignored.
If strWordWrap is set to "char" or "english", line wrap will be applied according to the value of this parameter.
	 * @param {string} strWordWrap This is a string that represents how to conduct line wrap.

If you specify "none", both the line feed characters included in the text and the value of the nLimitWidth parameter will be ignored. As a result, the text will be displayed on one line.
If you specify "line", line wrap can be conducted by applying the line feed characters included in the text while the value of nLimitWidth will be ignored .
If you specify "char", line wrap will be conducted between characters based on the value of nLimitWidth.
If you specify "english", line wrap will be conducted between characters based on the value of nLimitWidth.

With this parameter set to "char" or "english", line wrap can be caused by the line feed characters included in the text.
	 * @returns {object} 
	 */
	getTextSize(strText: string, strFont: string, nLimitWidth?: number, strWordWrap?: string): object;
	/**
	 * This method returns the zoom factor of the window, one of whose frame is designated as an argument.
	 * @param {object} objFrame This is an object representing a frame of the window that will be checked for its zoom factor.

This method will produce the same result whichever frame you specify from the same window.
	 * @returns {number} 
	 */
	getWheelZoom(objFrame: object): number;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is an alphabet letter.
	 * @param {number} nChar This is a decimal number representing a character code that will be checked.
	 * @returns {boolean} 
	 */
	isAlpha(nChar: number): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is an alphabet letter.
	 * @param {string} strChar This is a string that will be checked.
	 * @returns {boolean} 
	 */
	isAlpha(strChar: string): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is alphanumeric.
	 * @param {number} nChar This is a decimal number representing a character code that will be checked.
	 * @returns {boolean} 
	 */
	isAlphaNumeric(nChar: number): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is alphanumeric.
	 * @param {string} strChar This is a string that will be checked.
	 * @returns {boolean} 
	 */
	isAlphaNumeric(strChar: string): boolean;
	/**
	 * This method returns the existence of a certain cookie variable defined in the Cookies area in Environment.
	 * @param {string} strID It is a string that represents the ID of a cookie whose existence will be returned.
	 * @param {boolean} bSecure This parameter determines whether to return the existence of a certain cookie variable depending on the value of the Secure property.

If "true", this method will return "true" only when it finds a cookie variable whose ID corresponds with the value of the strID parameter and the Secure property is set to "true".
If "false", this method will return "true" only when it finds a cookie variable whose ID corresponds with the value of the strID parameter and the Secure property is set to "false".

If nothing is specified, this method will return the existence of a certain cookie variable depending on the value of the Secure property.
	 * @returns {boolean} 
	 */
	isExistCookieVariable(strID: string, bSecure?: boolean): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is lower case.
	 * @param {number} nChar This is a decimal number representing a character code that will be checked for the case.
	 * @returns {boolean} 
	 */
	isLower(nChar: number): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is lower case.
	 * @param {string} strChar This is a string that will be checked for the case.
	 * @returns {boolean} 
	 */
	isLower(strChar: string): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is a number.
	 * @param {number} nChar This is a decimal number representing a character code that will be checked.
	 * @returns {boolean} 
	 */
	isNumeric(nChar: number): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is a number.
	 * @param {string} strChar This is a string that will be checked.
	 * @returns {boolean} 
	 */
	isNumeric(strChar: string): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is a whitespace.
	 * @param {number} nChar This is a decimal number representing a character code that will be checked.
	 * @returns {boolean} 
	 */
	isSpace(nChar: number): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is a whitespace.
	 * @param {string} strChar This is a string that will be checked.
	 * @returns {boolean} 
	 */
	isSpace(strChar: string): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is upper case.
	 * @param {number} nChar This is a decimal number representing a character code that will be checked for the case.
	 * @returns {boolean} 
	 */
	isUpper(nChar: number): boolean;
	/**
	 * This method checks a character code or a string that is delivered as an argument. Then, this method returns whether the argument is upper case.
	 * @param {string} strChar This is a string that will be checked for the case.
	 * @returns {boolean} 
	 */
	isUpper(strChar: string): boolean;
	/**
	 * This method is used to load an XCSS file and apply it to an application.
	 * @param {string} strURL You can specify the path to an XCSS file with the format "xcssrc::[FileID]".

As "xcssrc::" is a predefined prefix, you cannot change it.
XCSS files should be located in the "./_resource_/_xcss_" directory under the Resource Service field.
	 */
	loadStyle(strURL: string): null;
	/**
	 * This method is used to display a dynamically-created ChildFrame in the form of a modeless window.
	 * @param {string} strID It specifies the ID of a ChildFrame to display as modeless window.
	 * @param {string} strFormURL It specifies the URL of a Form that will be loaded onto the ChildFrame displayed as a modeless window.
	 * @param {object} objParentFrame This is an object that will serve as the parent of the ChildFrame displayed as a modeless window.

If you specify "null", nothing will be defined as the parent.
	 * @param {object} objArguList It specifies a list of variables to add to a ChildFrame that will be displayed as a modeless window, with the format {variable name:variable value, variable name:variable value}.
	 * @param {string} strOpenStyle You can specify properties of a ChildFrame that will be displayed as a modeless window, with the format "Property1=value Property2=value".

You can set some properties of a ChildFrame and properties are separated by spaces.
You cannot set CSS-related properties (e.g. background, -nexa-border, font).

The value "all" of the dragmovetype property is supported only by the Windows NRE.
The layered property is supported only by the Windows NRE and macOS NRE.
The value "maximize" of the openstatus property is supported only by the Windows NRE and IE.
The values "normal" and "minimize" of the openstatus property is supported only by the Windows NRE.
The titlebar property is supported only by the Windows NRE.
The showstatusbar property is supported only by the Windows NRE and IE.
	 * @param {number} nLeft It specifies the coordinates of the left edge of a ChildFrame that will be displayed as a modeless window.
	 * @param {number} nTop It specifies the coordinates of the top edge of a ChildFrame that will be displayed as a modeless window..
	 * @param {number} nWidth It specifies the width of a ChildFrame that will be displayed as a modeless window..
	 * @param {number} nHeight It specifies the height of a ChildFrame that will be displayed as a modeless window..
	 * @param {object} objOpener It specifies a Form object that will serve as an opener.

If unspecified, this parameter will take the Form defined by the objParentFrame parameter.
	 * @param {string} strExtOpenStyle You can specify additional properties of the ChildFrame with the format "Property1=value1 Property2=value2".
Applicable properties vary according to environments and properties are separated by spaces.

* This parameter is supported only by IE11, and the default value set by the web browser will be applied if omitted.
You can determine whether to display the address bar of the web browser by setting the location property to true/false. (This property is supported only by some versions of IE11)
You can determine whether to display the menu bar of the web browser by setting the menubar property to true/false.
You can determine whether to display the toolbar of the web browser by setting the toolbar property to true/false.

* The noactivate property is applicable only to the Windows NRE, and the default value of the property is "false".
If you set the noactivate property to "true", the displayed ChildFrame will not be activated.
If you set noactivate to "false", the displayed ChildFrame will be activated and focused.
The noactivate property is used to prevent focus from going to the displayed ChildFrame.
	 * @returns {boolean} 
	 */
	open(strID: string, strFormURL: string, objParentFrame: object, objArguList: object, strOpenStyle: string, nLeft: number, nTop: number, nWidth?: number, nHeight?: number, objOpener?: object, strExtOpenStyle?: string): boolean;
	/**
	 * This method is used to parse a date string and returns the number of milliseconds between the date string and midnight of January 1, 1970.
	 * @param {string} strDate This is a string representing a date.

If the string fails to follow date formats, an error will occur.
	 * @returns {number} 
	 */
	parseDate(strDate: string): number;
	/**
	 * This method is used to remove a cookie from the Cookies area in Environment.
	 * @param {string} strID The ID of a cookie to remove
	 * @param {boolean} bSecure This parameter determine whether to remove a cookie variable depending on the value of the Secure property.

For true, this method will remove a cookie variable only when the Secure property is set to "true".
For false, this method will remove a cookie variable only when the Secure property is set to "false".

If nothing is specified, this method will remove a cookie variable regardless of the value of the Secure property.
	 */
	removeCookieVariable(strID: string, bSecure?: boolean): null;
	/**
	 * This method is used to remove a variable defined in the Variables field in Environment.
	 * @param {string} strID It specifies the ID of a variable that will be removed.
	 */
	removeEnvironmentVariable(strID: string): null;
	/**
	 * This method is used to remove a variable defined in the HTTP Header of Environment.
	 * @param {string} strID It is a string resenting the ID of a variable that will be removed.
	 */
	removeHTTPHeaderVariable(strID: string): null;
	/**
	 * This method replaces a certain string with a new string all through the defined range. Then, this method returns the new string entered as the result of the replacement.
	 * @param {string} strText This is a string representing the entire range where the original string is located.
	 * @param {string} strOrgText This is a string that is located in the range defined by the strText and will be replaced with a new string.
	 * @param {string} strRepText This is a string the will replace the string defined by the strOrgText parameter.
	 * @returns {string} 
	 */
	replaceAll(strText: string, strOrgText: string, strRepText: string): string;
	/**
	 * This method rounds a numeric value off to a value of the defined number of digits. Otherwise, this method rounds a numeric value off to its nearest integer.
	 * @param {number} nVal This is a numeric value that will be rounded off.
	 * @param {number} nFractionDigit This is the number of digits that the rounded-off value will hold.

If you specify 0, the decimal separator will be a base.
If you specify a positive number, the number of digits will fall on the fractional part.
If you specify a negative number, the number of digits will fall on the integer part.

The default value is 0.
	 * @returns {number} 
	 */
	round(nVal: number, nFractionDigit?: number): number;
	/**
	 * This method is used to add a cookie to the Cookies area in Environment.
	 * @param {string} strID The ID of a cookie to add
	 * @param {string} varVal The value of a cookie to add
	 * @param {boolean} bSecure This parameter determines whether to set the Secure property for the added cookie variable.

If "true", a cookie variable will not be included for an HTTP transaction.
However, a cookie variable will be included for an HTTPS transaction with the Secure property set.
If "false", a cookie variable will be included for all types of transactions without the Secure property set.

The default value is "false".
	 */
	setCookieVariable(strID: string, varVal: string, bSecure?: boolean): null;
	/**
	 * This method sets a zoom feature is set for the window, one of whose frame is designated as an argument.
	 * @param {object} objFrame This is an object representing a frame of the window whose zoom feature will be set.

This method will produce the same result whichever frame you specify from the same window.
	 * @param {boolean} bZoom If you specify "true", you will activate the zoom feature of the window, one of whose frame is designated as a value of the objFrame parameter.

If you specify "false", you will deactivate the zoom feature of the window, one of whose frame is designated as a value of the objFrame parameter.
	 */
	setEnableWheelZoom(objFrame: object, bZoom: boolean): null;
	/**
	 * This method is used to add a variable to the Variables area in Environment.
	 * @param {string} strID The ID of a variable to add
	 * @param {string} varVal The value of a variable to add
	 */
	setEnvironmentVariable(strID: string, varVal: string): null;
	/**
	 * This method is used to add variables to the HTTP Header area in Environment.
	 * @param {string} strID The ID of a variable to add to the HTTP Header area
	 * @param {string} varVal The value of a variable to add to the HTTP Header area
	 */
	setHTTPHeaderVariable(strID: string, varVal: string): null;
	/**
	 * This method is used in the web browser environment to set a variable in a global area beforethe loading of an application.
	 * @param {string} strType It is a string that represents a global area where a variable will be set.

If you specify “environment”, a variable will be set in the Variables field in Environment.
If you specify “cookie”, a variable will be set in the Cookies field in Environment.
If you specify “httpheader”, a variable will be set in the HTTPHeader field in Environment.
If you specify “application”, a variable will be set in the Variables field in an application.
	 * @param {string} strID It is a string that represents the ID of a global variable.
	 * @param {string} varVal It is a string that represents the value of a global variable.
	 */
	setInitialVariable(strType: string, strID: string, varVal: string): null;
	/**
	 * This method is used for an application to store individualized data.
	 * @param {string} strKey It is a key value for saving the relevant individualized data.

Since it will be used as a tag in an XML script, you cannot specify the characters that are not allowed as XML tags.
Moreover, you cannot use a colon (:).
	 * @param {any} varVal It is data to be saved as a individualized data piece.

You can apply basic data types (integer, float, string and boolean) and set a date for the data.
	 * @returns {boolean} 
	 */
	setPrivateProfile(strKey: string, varVal: any): boolean;
	/**
	 * This method is used to deliver the value of a setting to a communications protocol adapter.
	 * @param {string} strName It is the ID of a protocol adapter that is defined in the Protocols section of the TypeDefinition and to which the value of a setting will be delivered.
	 * @param {string} strKey It is a key that indicates the setting whose value will be delivered to a protocol adapter.
	 * @param {string} strValue It is the value of the setting.
	 */
	setProtocolVar(strName: string, strKey: string, strValue: string): null;
	/**
	 * This method is used to determine how to render a screen in the Windows NRE.
	 * @param {number} nType You can specify either 0 or 1 to determine the method of rendering conducted by Windows Nexacro Platform.

0 indicates the real-time method (existing one), which conducts rendering on a regular basis.
1 indicates the event-based method, which conducts rendering according to system rules.
	 */
	setRenderingType(nType: number): null;
	/**
	 * This method sets the zoom factor of the window, one of whose frame is designated as an argument.
	 * @param {object} objFrame This is an object representing a frame of the window whose zoom factor will be set.

This method will produce the same result whichever frame you specify from the same window.
	 * @param {number} nZoomScale This is a zoom factor you will set for the window, one of whose frame is designated as a value of the objFrame parameter. The zoom factor is expressed in percentage.

You should specify a number that can vary with the increments by 10% within the range from 50% to 200%.
If the number exceeds the range or does not follow the 10% increment, this method will not be executed.
	 */
	setWheelZoom(objFrame: object, nZoomScale: number): null;
	/**
	 * This method removes the quotation marks surrounding a string delivered as an argument and then returns the result.
	 * @param {object} strText This is a string whose quotation marks will be removed.
	 * @returns {string} 
	 */
	stripQuote(strText: object): string;
	/**
	 * This method returns the result of converting a string delivered as an argument into a number.
	 * @param {string} varValue This is a string that will be converted into a number.
	 * @param {number} varNanVal This is a value that will be returned when the result of the conversion is Not-a-Number (NaN).

The default value is "NaN".
	 * @param {number} varPinfVal This is a value that will be returned when the result of the conversion is positive infinity.

The default value is "POSITIVE_INFINITY".
	 * @param {number} varNinfVal This is a value that will be returned when the result of the conversion is negative infinity.

The default value is "NEGATIVE_INFINITY".
	 * @returns {number} 
	 */
	toNumber(varValue: string, varNanVal?: number, varPinfVal?: number, varNinfVal?: number): number;
	/**
	 * This method is used to remove white space or predefined characters from both sides of a string that is delivered as an argument.
	 * @param {string} strText It is a string whose white space or predefined characters will be removed from both ends.
	 * @param {string} strChar These are characters that will be removed from the both ends of the string specified as strText.

If you omit this parameter, this method will remove white space from the both ends.
	 * @returns {string} 
	 */
	trim(strText: string, strChar?: string): string;
	/**
	 * This method is used to remove white space or predefined characters from the left side of a string that is delivered as an argument.
	 * @param {string} strText It is a string whose white space or predefined characters will be removed from the left side.
	 * @param {string} strChar These are characters that will be removed from the left side of the string specified as strText.

If you omit this parameter, this method will remove white space from the left side.
	 * @returns {string} 
	 */
	trimLeft(strText: string, strChar?: string): string;
	/**
	 * This method is used to remove white space or predefined characters from the right side of a string that is delivered as an argument.
	 * @param {string} strText It is a string whose white space or predefined characters will be removed from the right side.
	 * @param {any} strChar 
	 * @returns {string} 
	 */
	trimRight(strText: string, strChar?: any): string;
	/**
	 * This method surrounds a string delivered as an argument with quotation marks and then returns the result.
	 * @param {string} strText This is a string that will be surrounded with quotation marks.
	 * @returns {string} 
	 */
	wrapQuote(strText: string): string;
}


