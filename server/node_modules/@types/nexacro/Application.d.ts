// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 4.3;
    
interface NexacroAPI {
    Application: nexacro.Application;
}

    
declare namespace nexacro {
    type ApplicationOmitKeys = 'new';
	
	interface Application extends Omit<nexacro.EventSinkObject, ApplicationOmitKeys> {
	    
	    /**
		 * This is a read-only property that holds all the objects registered in a certain application.
		 */
		readonly all?: any;
		/**
		 * This property is used to specify the path to the file that contains the information on a license.
		 */
		readonly licenseurl?: string;
		/**
		 * This read-only property holds the MainFrame of an application.
		 */
		readonly mainframe?: any;
		/**
		 * This property is used to specify the name of an application.
		 */
		readonly name?: any;
		/**
		 * It is Property to set whether to use same Instance for values of Key and XADL.
		 */
		readonly onlyone?: any;
		/**
		 * This property is used to set the IDs of screens applied to an application.
		 */
		readonly screenid?: string;
		/**
		 * This read-only property holds the information on the trays registered in an application.
		 */
		readonly trays?: any;
		/**
		 * This property is used to set the version of an application.
		 */
		readonly version?: any;
		/**
		 * This event occurs after a user confirmation dialog is closed.
		 */
		readonly onafteruserconfirm?: nexacro.EventObject<nexacro.Application, nexacro.EventInfo>;
		/**
		 * This event occurs before an application is closed.
		 */
		readonly onbeforeexit?: nexacro.EventObject<nexacro.Application, nexacro.ExitEventInfo>;
		/**
		 * This event occurs before a user confirmation dialog is displayed.
		 */
		readonly onbeforeuserconfirm?: nexacro.EventObject<nexacro.Application, nexacro.EventInfo>;
		/**
		 * This event is triggered by the duplicate execution of an application that does not permit duplicate execution.
		 */
		readonly onduplicateexecution?: nexacro.EventObject<nexacro.Application, nexacro.DuplicateExecutionEventInfo>;
		/**
		 * This event occurs when an error occurs in a transaction conducted in an Application.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.Application, nexacro.ErrorEventInfo>;
		/**
		 * This event occurs when an application is closed.
		 */
		readonly onexit?: nexacro.EventObject<nexacro.Application, nexacro.ExitEventInfo>;
		/**
		 * This event occurs after all the objects and data of an application are loaded.
		 */
		readonly onload?: nexacro.EventObject<nexacro.Application, nexacro.LoadEventInfo>;
		/**
		 * This event occurs after all the forms connected to a ChildFrame are loaded.
		 */
		readonly onloadforms?: nexacro.EventObject<nexacro.Application, nexacro.LoadEventInfo>;
		/**
		 * This event occurs after all the defined objects are created in the AppVariables field of an application.
		 */
		readonly onloadingappvariables?: nexacro.EventObject<nexacro.Application, nexacro.LoadEventInfo>;
		/**
		 * This event occurs when a mobile device receives a notification about Nexacro Platform.
		 */
		readonly onnotification?: nexacro.EventObject<nexacro.Application, nexacro.NotificationEventInfo>;
		/**
		 * @param {any} v This property is used to specify the name of an application.
		 * @returns {void} 
		 */
		set_name(v: any): void;
		/**
		 * @param {any} v This property is used to set the version of an application.
		 * @returns {void} 
		 */
		set_version(v: any): void;
		/**
		 * This method is used to add a handler to a certain event of an application.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of an application as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the funtion in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to add a dynamically-created tray to an application.
		 * @param {string} strTrayID This is the ID of a Tray object to add to an application.
		 * @param {object} objTray This is a Tray object to add to an application.
		 * @returns {number} 
		 */
		addTray(strTrayID: string, objTray: object): number;
		/**
		 * This method is used to add a variable to the AppVariables field of an application.
		 * @param {string} strID It is the ID of a variable to add.
		 * @param {string} varValue It is the value held by the variable to add.
		 * @returns {number} 
		 */
		addVariable(strID: string, varValue: string): number;
		/**
		 * This method is used to display an alert box in an application.
		 * @param {string} strText This is text to be displayed in the alert box.
		 */
		alert(strText: string): null;
		/**
		 * This method is used to cancel an ongoing transaction.
		 * @param {string} strSvcID This is the ID of a transaction you want to cancel.

If you specify nothing, this method will cancel a transaction forcibly in the same way you press the ESC key during a transaction.
		 */
		cancelTransaction(strSvcID?: string): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to display a dialog box in an application.
		 * @param {string} strText This is text to display in the dialog box.
		 * @param {string} strCaption This is text to display in the title bar of the dialog box.
		 * @param {string} strType This is a string that represents an icon displayed on the left side of the dialog box.

If you specify "error", the dialog box will display a red "X" icon.
If you specify "question", the dialog box will display a question mark (?) icon.
If you specify "warning", the dialog box will display a  exclamation mark (!) icon with the yellow background.
If you specify "information", the dialog box will display a  exclamation mark (!) icon with the blue background.

If you specify nothing, no icon will be displayed.
		 * @returns {boolean} 
		 */
		confirm(strText: string, strCaption?: string, strType?: string): boolean;
		/**
		 * It is Method to activate OnlyOne function to activate the application rather than a new application if same application is conducted.
		 * @returns {boolean} 
		 */
		enableOnlyOne(): boolean;
		/**
		 * This method is used to close a Nexacro Platform-based application.
		 */
		exit(): null;
		/**
		 * This method finds a handler in a certain event of an application and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns the currently-activated Form of an application.
		 * @returns {object} 
		 */
		getActiveForm(): object;
		/**
		 * This method returns the currently-activated frame of an application.
		 * @returns {object} 
		 */
		getActiveFrame(): object;
		/**
		 * This method returns a specific handler from a certain event of an application by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * It is Method to obtain Trust Domain list.
		 * @returns {object} 
		 */
		getTrustDomainList(): object;
		/**
		 * It is Method to obtain Trust Path list.
		 * @returns {object} 
		 */
		getTrustPathList(): object;
		/**
		 * This method is used to add a handler to a certain event of an application at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method returns the existence of a certain variable defined in the AppVariables field of an application.
		 * @param {string} strID It is the ID of a variable whose existence you want to check.
		 * @returns {boolean} 
		 */
		isExistVariable(strID: string): boolean;
		/**
		 * This method searches an entire application for the object delivered as an argument and returns the object.
		 * @param {string} strObjectID This is a string that represents the ID of an object you want to find.
		 * @returns {object} 
		 */
		lookup(strObjectID: string): object;
		/**
		 * This method is used to remove a handler in a certain event of an application.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of an application and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		removeTray(strID?: any): null;
		/**
		 * This method is used to remove a variable from the AppVariables field of an application.
		 * @param {string} strID It is the ID of a variable to remove.
		 */
		removeVariable(strID: string): null;
		/**
		 * This method is used to change the first handler in a certain event of an application.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc The handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of an application.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to add a variable to the AppVariables field of an application. This method is also used to set the value of a variable defined in the AppVariables field of an application.
		 * @param {string} strID It is the ID of a variable to add.
		 * @param {string} varValue It is the value held by the variable to add.
		 * @returns {number} 
		 */
		setVariable(strID: string, varValue: string): number;
		/**
		 * This method is used to leave a trace log.
		 * @param {string} strLog This is a string that you want to print as a log.
		 */
		trace(strLog: string): null;
		/**
		 * This method is used to call a service to update a Dataset defined in the domain of an Application and to conduct the a callback when transaction is finished.
		 * @param {string} strSvcID A string representing an ID to distinguish transactions.
		 * @param {string} strURL A string representing an address to request a transaction.
		 * @param {string} strInDatasets A string representing the ID of a Dataset sent to the server for a data transaction
The Dataset must be defined in AppVariables of an Application.
The argument is specified with the format "input ID=Dataset ID". You can specify multiple Datasets by dividing them with white spaces.

ex) "input1=DataSet00 input2=DataSet01"
		 * @param {string} strOutDatasets A string representing the ID of a Dataset for receiving data from the server for a data transaction
The Dataset must be defined in AppVariables of an Application.
The argument is specified with the format "Dataset ID=output ID". You can specify multiple Datasets by dividing them with white spaces.

ex) "DataSet00=output0 DataSet01=output1"
		 * @param {string} strArgument A string representing the information sent to the server page
An argument is specified with the format "variable ID=variable value" while you can specify multiple arguments by dividing them with white spaces.

ex) "argu0=test argu1=30"
		 * @param {string} strCallbackFunc A string representing a callback that will be called upon receiving the result of a transaction
The callback must be defined in the domain of a Form or an Application
		 * @param {boolean} bAsync It specifies whether the transaction is asynchronous.

For "true", a transaction will be conducted in the asynchronous manner. Therefore, the script will be executed regardless of the completion of the transaction.
For "false", a transaction will be conducted in the synchronous manner. Therefore, the script will be suspended until the completion of the transaction.

The default value is "true".
		 * @param {number} nDataType It determines the type of the data used in a transaction.
 
For 0, XML-formatted data will be used.
For 1, binary data will be used.
For 2, SSV-formatted data will be used.

The default value is 0.
		 * @param {boolean} bCompress It determines whether to compress data in a transaction.
 
For "true", data will be compressed in a transaction.
For "false", data will not be compressed in a transaction.

The default value is "false".
		 */
		transaction(strSvcID: string, strURL: string, strInDatasets: string, strOutDatasets: string, strArgument: string, strCallbackFunc: string, bAsync?: boolean, nDataType?: number, bCompress?: boolean): null;
	}
}

