// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    ListView: nexacro.ListView;
}

    
declare namespace nexacro {
    type ListViewOmitKeys = 'accessibilityaction'|'accessibilitydesclevel'|'accessibilitydescription'|'accessibilityenable'|'accessibilitylabel'|'accessibilityrole'|'boxShadow'|'expr'|'hotkey'|'id'|'padding'|'textAlign'|'textDecoration'|'verticalAlign'|'wordWrap'|'text'|'getDisplayText'|'getFocus'|'ondblclick';
	
	interface ListView extends Omit<nexacro.ComplexComponent, ListViewOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.ListView;
	    /**
		 * This property is used to define how the editable control of a ListView cell becomes activated when the cell is selected.
		 */
		readonly autoenter?: nexacro.Enum.GridAutoEnterType;
		/**
		 * This property is used to set the timing of applying a selected value when the cell is the Combo or Calendar type.
		 */
		readonly autoupdatetype?: nexacro.Enum.GridAutoUpdateType;
		/**
		 * This property is used to set the background of a ListView.
		 */
		readonly background?: string;
		/**
		 * This property determines how to display a detail band of a ListView.
		 */
		readonly bandexpandtype?: nexacro.Enum.ListView_BandExpandType;
		/**
		 * This property sets the width of the margin placed on the left side of the detail band of a ListView.
		 */
		readonly bandindentsize?: number;
		/**
		 * This property is used to set the initial state of the detail band when the bandexpandtype property is set to "expand".
		 */
		readonly bandinitstatus?: nexacro.Enum.ListView_BandInitStatus;
		/**
		 * This property is used to set the ID of a Dataset bound to the whole cells of a ListView.
		 */
		readonly binddataset?: string;
		/**
		 * This property is used to set the shape of the corners of a ListView.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a ListView's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to size the drop-down button of a cell whose type is Calendar.
		 */
		readonly cellcalendarbuttonsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to size a calendar that pops up from a cell whose type is Calendar.
		 */
		readonly cellcalendarpopupsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to determine how to display a pop-up calendar (a date picker) when a cell is calendar type.
		 */
		readonly cellcalendarpopuptype?: nexacro.Enum.CalendarPopupType;
		/**
		 * This property is used to size the checkbox in a cell when the type of the cell is a checkbox.
		 */
		readonly cellcheckboxsize?: number;
		/**
		 * This property is used to determine which area you need to click to change the value of a cell whose form is a checkbox.
		 */
		readonly cellclickbound?: nexacro.Enum.GridCellClickBound;
		/**
		 * This property is used to size the drop-down button of a cell whose type is Combo.
		 */
		readonly cellcombobuttonsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to size an item list that pops up from a cell whose type is Calendar.
		 */
		readonly cellcombopopupsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to determine how to display an item list when a cell is the Combo type.
		 */
		readonly cellcombopopuptype?: nexacro.Enum.PopupType;
		/**
		 * This property is used to set the color of the text displayed in a ListView.
		 */
		readonly color?: string;
		/**
		 * This property is used to set the style of a ListView by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a ListView.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to determine whether to enable a ListView.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a ListView.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property is used to redraw the screen automatically when a ListView is changed.
		 */
		readonly enableredraw?: boolean;
		/**
		 * This property sets a font used for a ListView.
		 */
		readonly font?: string;
		/**
		 * This property is used to specify the ID of a format that will be displayed on the ListView. The format is one of those defined by the formats property.
		 */
		readonly formatid?: string;
		/**
		 * This property holds the information on all the formats of a ListView.
		 */
		readonly formats?: string;
		/**
		 * This property is used to specify the height of a ListView.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the ID of an InitValue to be applied to an ListView.
		 */
		readonly initvalueid?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a ListView's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between characters (kerning) displayed in a ListView.
		 */
		readonly letterSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This property is used to set a locale applied to a ListView.
		 */
		readonly locale?: nexacro.Enum.LocaleCode;
		/**
		 * This property is used to set the maximum height of a ListView for the component to be displayed on the screen.
		 */
		readonly maxheight?: number;
		/**
		 * This property is used to set the maximum width of a ListView for the component to be displayed on the screen.
		 */
		readonly maxwidth?: number;
		/**
		 * This property is used to set the minimum height of a ListView for the component to be displayed on the screen.
		 */
		readonly minheight?: number;
		/**
		 * This property is used to set the minimum width of a ListView for the component to be displayed on the screen.
		 */
		readonly minwidth?: number;
		/**
		 * This property is used to specify the name of a ListView.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a ListView.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a ListView.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the path to an image that will be printed when the ListView has no data to display.
		 */
		readonly nodataimage?: string;
		/**
		 * This property is used to define the text that will be printed when the ListView has no data to display.
		 */
		readonly nodatatext?: string;
		/**
		 * This property is used to set the opacity of a ListView.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the parent object of a ListView.
		 */
		readonly parent?: object;
		/**
		 * This property is used to specify the index number of a step page where a ListView is displayed if the parent object uses the step feature.
		 */
		readonly positionstep?: number;
		/**
		 * This property determines whether a ListView is editable.
		 */
		readonly readonly?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a ListView's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to define the direction of printing internal contents or components in a ListView.
		 */
		readonly rtl?: boolean;
		/**
		 * This property is used to set the minimum size of the TrackBar control featured by the scrollbar of a ListView.
		 */
		readonly scrollbarbarminsize?: number;
		/**
		 * This property is used to set the base size of a scrollbar where its TrackBar control will disappear if the ListView becomes smaller than the specified size.
		 */
		readonly scrollbarbaroutsize?: number;
		/**
		 * This property is used to size the decreasing button (DecButton control) of the scrollbar fitted to a ListView.
		 */
		readonly scrollbardecbuttonsize?: number;
		/**
		 * This property is used to size the increasing button (IncButton control) of the scrollbar fitted to a ListView.
		 */
		readonly scrollbarincbuttonsize?: number;
		/**
		 * This property is used to size the scrollbar displayed in a ListView.
		 */
		readonly scrollbarsize?: number;
		/**
		 * This property is used to size the TrackBar control of a scrollbar displayed in a ListView.
		 */
		readonly scrollbartrackbarsize?: number;
		/**
		 * This property determines how scrollbars work in a ListView.
		 */
		readonly scrollbartype?: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`;
		/**
		 * This property is used to set the size of the scroll indicator bars displayed in a ListView.
		 */
		readonly scrollindicatorsize?: number;
		/**
		 * This property is used to set the types of scrolling applied to a ListView.
		 */
		readonly scrolltype?: nexacro.Enum.ScrollType;
		/**
		 * This property is used to determine the point when selection is made. This property is applicable when you click an item in a ListView to make the selection.
		 */
		readonly selectchangetype?: nexacro.Enum.GridSelectChangeType;
		/**
		 * This property determines the action taken as a result of a dragging operation in a ListView.
		 */
		readonly selectscrollmode?: nexacro.Enum.SelectScrollMode;
		/**
		 * This property is used to define the tab order number of a ListView. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 */
		readonly taborder?: number;
		/**
		 * This property determines whether a ListView receives focus when you move the focus between components by pressing the tab key.
		 */
		readonly tabstop?: boolean;
		/**
		 * This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a ListView.
		 */
		readonly tooltiptext?: string;
		/**
		 * This property is used to specify the position and type of a tooltip that appears in a ListView.
		 */
		readonly tooltiptype?: nexacro.Enum.TooltipType;
		/**
		 * This property is used to specify the value of the point that indicates the position of a ListView's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to determine whether to apply selection-related pseudo-classes when an item of the ListView is selected. Those pseudo-classes are defined by an XCSS file.
		 */
		readonly useselcolor?: boolean;
		/**
		 * This property is used to determine whether to open a virtual keyboard when a ListView cell receives focus and thus displays its editable control.
		 */
		readonly usesoftkeyboard?: boolean;
		/**
		 * This property is used to determine whether to make a ListView visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This read-only property holds the vertical scrollbar sub-control of a ListView.
		 */
		readonly vscrollbar?: object;
		/**
		 * This property is used to set the width of a ListView.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between words displayed in a ListView.
		 */
		readonly wordSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This event occurs when you click an area in the bands of a ListView other than cells.
		 */
		readonly onbandclick?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewClickEventInfo>;
		/**
		 * This event occurs when you double-click an area in the bands of a ListView other than cells.
		 */
		readonly onbanddblclick?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewClickEventInfo>;
		/**
		 * This event occurs when you click the expandbar of the body band in a ListView.
		 */
		readonly onbandexpandclick?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewClickEventInfo>;
		/**
		 * This event occurs after the detail band of a ListView appears or disappears.
		 */
		readonly onbandstatuschanged?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewBandStatusEventInfo>;
		/**
		 * This event occurs when you click a cell in the body or detail band of a ListView.
		 */
		readonly oncellclick?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewClickEventInfo>;
		/**
		 * This event occurs when you double-click a cell in the body or detail band of a ListView.
		 */
		readonly oncelldblclick?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewClickEventInfo>;
		/**
		 * This event occurs when you click the expand button placed on the right side of a cell in a ListView.
		 */
		readonly oncellexpandclick?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewClickEventInfo>;
		readonly oncellimeaction?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewKeyEventInfo>;
		/**
		 * This event occurs when the left button of a mouse is clicked in the area of a ListView whose format is undefined.
		 */
		readonly onclick?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewClickEventInfo>;
		/**
		 * This event occurs when a Combo item list or pop-up calendar is closed in a ListView.
		 */
		readonly oncloseup?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewEditEventInfo>;
		/**
		 * This event occurs when you right-click a ListView or touch a ListView for a certain duration.
		 */
		readonly oncontextmenu?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewContextMenuEventInfo>;
		readonly ondevicebuttonup?: nexacro.EventObject<nexacro.ListView, nexacro.DeviceButtonEventInfo>;
		/**
		 * This event occurs when you conduct a dragging action by pressing the left button of a mousewithin a ListView.
		 */
		readonly ondrag?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewDragEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a ListView while the pointer is dragging an object.
		 */
		readonly ondragenter?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewDragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a ListView while the pointer is dragging an object.
		 */
		readonly ondragleave?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewDragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves while the pointer is dragging an object within a ListView.
		 */
		readonly ondragmove?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewDragEventInfo>;
		/**
		 * This event occurs when you release a mouse button within the area of a ListView after you have pressed the button to drag an object.
		 */
		readonly ondrop?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewDragEventInfo>;
		/**
		 * This event occurs when a Combo item list or pop-up calendar is opened from a ListView cell.
		 */
		readonly ondropdown?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewEditEventInfo>;
		/**
		 * This event occurs when you press the enter key while the editable control of a ListView cell is activated.
		 */
		readonly onenterdown?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewEditEventInfo>;
		/**
		 * This event occurs when you attempt to enter a value to a ListView.
		 */
		readonly oninput?: nexacro.EventObject<nexacro.ListView, nexacro.InputEventInfo>;
		/**
		 * This event occurs when you press a key with a ListView focused.
		 */
		readonly onkeydown?: nexacro.EventObject<nexacro.ListView, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when you release a key with a ListView focused.
		 */
		readonly onkeyup?: nexacro.EventObject<nexacro.ListView, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when focus moves out of a ListView.
		 */
		readonly onkillfocus?: nexacro.EventObject<nexacro.ListView, nexacro.KillFocusEventInfo>;
		/**
		 * This event occurs when you press the left button of a mouse within the area of a ListView.
		 */
		readonly onlbuttondown?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewMouseEventInfo>;
		/**
		 * This event occurs when you release the left button of a mouse within the area of a ListView.
		 */
		readonly onlbuttonup?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewMouseEventInfo>;
		/**
		 * This event occurs when you press a button other than the left and right buttons of a mouse within the area of a ListView.
		 */
		readonly onmousedown?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewMouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a ListView.
		 */
		readonly onmouseenter?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewMouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a ListView.
		 */
		readonly onmouseleave?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewMouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves within a ListView.
		 */
		readonly onmousemove?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewMouseEventInfo>;
		/**
		 * This event occurs when you release a button other than the left and right buttons of a mouse within the area of a ListView.
		 */
		readonly onmouseup?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewMouseEventInfo>;
		/**
		 * This event occurs when you rotates your mouse wheel within a ListView.
		 */
		readonly onmousewheel?: nexacro.EventObject<nexacro.ListView, nexacro.MouseWheelEventInfo>;
		/**
		 * This event occurs when the position of a ListView changes.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.ListView, nexacro.MoveEventInfo>;
		/**
		 * This event occurs when you click an area in a ListView other than a cell or band.
		 */
		readonly onnodataareaclick?: nexacro.EventObject<nexacro.ListView, nexacro.ClickEventInfo>;
		/**
		 * This event occurs when you double-click an area in a ListView other than a cell or band.
		 */
		readonly onnodataareadblclick?: nexacro.EventObject<nexacro.ListView, nexacro.ClickEventInfo>;
		/**
		 * This event occurs when you press the right button of a mouse within the area of a ListView.
		 */
		readonly onrbuttondown?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewMouseEventInfo>;
		/**
		 * This event occurs when you release the right button of a mouse within the area of a ListView.
		 */
		readonly onrbuttonup?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewMouseEventInfo>;
		/**
		 * This event occurs after a change in the selection made in a ListView.
		 */
		readonly onselectchanged?: nexacro.EventObject<nexacro.ListView, nexacro.ListViewSelectEventInfo>;
		/**
		 * This event occurs when focus comes into a ListView.
		 */
		readonly onsetfocus?: nexacro.EventObject<nexacro.ListView, nexacro.SetFocusEventInfo>;
		/**
		 * This event occurs when the size of a ListView changes.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.ListView, nexacro.SizeEventInfo>;
		/**
		 * This event occurs when you touch and release the screen within the area of a ListView.
		 */
		readonly ontouchend?: nexacro.EventObject<nexacro.ListView, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is moved along the touch surface within a ListView.
		 */
		readonly ontouchmove?: nexacro.EventObject<nexacro.ListView, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is placed on the touch surface within a ListView.
		 */
		readonly ontouchstart?: nexacro.EventObject<nexacro.ListView, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when you move the vertical scrollbar of a ListView.
		 */
		readonly onvscroll?: nexacro.EventObject<nexacro.ListView, nexacro.ScrollEventInfo>;
		/**
		 * @param {nexacro.Enum.GridAutoEnterType} v This property is used to define how the editable control of a ListView cell becomes activated when the cell is selected.
		 * @returns {void} 
		 */
		set_autoenter(v: nexacro.Enum.GridAutoEnterType): void;
		/**
		 * @param {nexacro.Enum.GridAutoUpdateType} v This property is used to set the timing of applying a selected value when the cell is the Combo or Calendar type.
		 * @returns {void} 
		 */
		set_autoupdatetype(v: nexacro.Enum.GridAutoUpdateType): void;
		/**
		 * @param {string} v This property is used to set the background of a ListView.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {nexacro.Enum.ListView_BandExpandType} v This property determines how to display a detail band of a ListView.
		 * @returns {void} 
		 */
		set_bandexpandtype(v: nexacro.Enum.ListView_BandExpandType): void;
		/**
		 * @param {number} v This property sets the width of the margin placed on the left side of the detail band of a ListView.
		 * @returns {void} 
		 */
		set_bandindentsize(v: number): void;
		/**
		 * @param {nexacro.Enum.ListView_BandInitStatus} v This property is used to set the initial state of the detail band when the bandexpandtype property is set to "expand".
		 * @returns {void} 
		 */
		set_bandinitstatus(v: nexacro.Enum.ListView_BandInitStatus): void;
		/**
		 * @param {string} v This property is used to set the ID of a Dataset bound to the whole cells of a ListView.
		 * @returns {void} 
		 */
		set_binddataset(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a ListView.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a ListView's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size the drop-down button of a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_cellcalendarbuttonsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size a calendar that pops up from a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_cellcalendarpopupsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {nexacro.Enum.CalendarPopupType} v This property is used to determine how to display a pop-up calendar (a date picker) when a cell is calendar type.
		 * @returns {void} 
		 */
		set_cellcalendarpopuptype(v: nexacro.Enum.CalendarPopupType): void;
		/**
		 * @param {number} v This property is used to size the checkbox in a cell when the type of the cell is a checkbox.
		 * @returns {void} 
		 */
		set_cellcheckboxsize(v: number): void;
		/**
		 * @param {nexacro.Enum.GridCellClickBound} v This property is used to determine which area you need to click to change the value of a cell whose form is a checkbox.
		 * @returns {void} 
		 */
		set_cellclickbound(v: nexacro.Enum.GridCellClickBound): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size the drop-down button of a cell whose type is Combo.
		 * @returns {void} 
		 */
		set_cellcombobuttonsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size an item list that pops up from a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_cellcombopopupsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {nexacro.Enum.PopupType} v This property is used to determine how to display an item list when a cell is the Combo type.
		 * @returns {void} 
		 */
		set_cellcombopopuptype(v: nexacro.Enum.PopupType): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a ListView.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property is used to set the style of a ListView by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a ListView.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a ListView.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a ListView.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to redraw the screen automatically when a ListView is changed.
		 * @returns {void} 
		 */
		set_enableredraw(v: boolean): void;
		/**
		 * @param {string} v This property sets a font used for a ListView.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {string} v This property is used to specify the ID of a format that will be displayed on the ListView. The format is one of those defined by the formats property.
		 * @returns {void} 
		 */
		set_formatid(v: string): void;
		/**
		 * @param {string} v This property holds the information on all the formats of a ListView.
		 * @returns {void} 
		 */
		set_formats(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the height of a ListView.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a ListView's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between characters (kerning) displayed in a ListView.
		 * @returns {void} 
		 */
		set_letterSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * @param {nexacro.Enum.LocaleCode} v This property is used to set a locale applied to a ListView.
		 * @returns {void} 
		 */
		set_locale(v: nexacro.Enum.LocaleCode): void;
		/**
		 * @param {number} v This property is used to set the maximum height of a ListView for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the maximum width of a ListView for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxwidth(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum height of a ListView for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum width of a ListView for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minwidth(v: number): void;
		/**
		 * @param {string} v This property is used to specify the name of a ListView.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a ListView.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a ListView.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {string} v This property is used to set the path to an image that will be printed when the ListView has no data to display.
		 * @returns {void} 
		 */
		set_nodataimage(v: string): void;
		/**
		 * @param {string} v This property is used to define the text that will be printed when the ListView has no data to display.
		 * @returns {void} 
		 */
		set_nodatatext(v: string): void;
		/**
		 * @param {number} v This property is used to set the opacity of a ListView.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {number} v This property is used to specify the index number of a step page where a ListView is displayed if the parent object uses the step feature.
		 * @returns {void} 
		 */
		set_positionstep(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a ListView is editable.
		 * @returns {void} 
		 */
		set_readonly(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a ListView's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {number} v This property is used to set the minimum size of the TrackBar control featured by the scrollbar of a ListView.
		 * @returns {void} 
		 */
		set_scrollbarbarminsize(v: number): void;
		/**
		 * @param {number} v This property is used to set the base size of a scrollbar where its TrackBar control will disappear if the ListView becomes smaller than the specified size.
		 * @returns {void} 
		 */
		set_scrollbarbaroutsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the decreasing button (DecButton control) of the scrollbar fitted to a ListView.
		 * @returns {void} 
		 */
		set_scrollbardecbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the increasing button (IncButton control) of the scrollbar fitted to a ListView.
		 * @returns {void} 
		 */
		set_scrollbarincbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the scrollbar displayed in a ListView.
		 * @returns {void} 
		 */
		set_scrollbarsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the TrackBar control of a scrollbar displayed in a ListView.
		 * @returns {void} 
		 */
		set_scrollbartrackbarsize(v: number): void;
		/**
		 * @param {(nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`)} v This property determines how scrollbars work in a ListView.
		 * @returns {void} 
		 */
		set_scrollbartype(v: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`): void;
		/**
		 * @param {number} v This property is used to set the size of the scroll indicator bars displayed in a ListView.
		 * @returns {void} 
		 */
		set_scrollindicatorsize(v: number): void;
		/**
		 * @param {nexacro.Enum.ScrollType} v This property is used to set the types of scrolling applied to a ListView.
		 * @returns {void} 
		 */
		set_scrolltype(v: nexacro.Enum.ScrollType): void;
		/**
		 * @param {nexacro.Enum.GridSelectChangeType} v This property is used to determine the point when selection is made. This property is applicable when you click an item in a ListView to make the selection.
		 * @returns {void} 
		 */
		set_selectchangetype(v: nexacro.Enum.GridSelectChangeType): void;
		/**
		 * @param {nexacro.Enum.SelectScrollMode} v This property determines the action taken as a result of a dragging operation in a ListView.
		 * @returns {void} 
		 */
		set_selectscrollmode(v: nexacro.Enum.SelectScrollMode): void;
		/**
		 * @param {number} v This property is used to define the tab order number of a ListView. Tab order means the order of moving focus among components when the focus is moved by entering the tab key.
		 * @returns {void} 
		 */
		set_taborder(v: number): void;
		/**
		 * @param {boolean} v This property determines whether a ListView receives focus when you move the focus between components by pressing the tab key.
		 * @returns {void} 
		 */
		set_tabstop(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a ListView.
		 * @returns {void} 
		 */
		set_tooltiptext(v: string): void;
		/**
		 * @param {nexacro.Enum.TooltipType} v This property is used to specify the position and type of a tooltip that appears in a ListView.
		 * @returns {void} 
		 */
		set_tooltiptype(v: nexacro.Enum.TooltipType): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a ListView's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {boolean} v This property is used to determine whether to apply selection-related pseudo-classes when an item of the ListView is selected. Those pseudo-classes are defined by an XCSS file.
		 * @returns {void} 
		 */
		set_useselcolor(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to open a virtual keyboard when a ListView cell receives focus and thus displays its editable control.
		 * @returns {void} 
		 */
		set_usesoftkeyboard(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a ListView visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to set the width of a ListView.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between words displayed in a ListView.
		 * @returns {void} 
		 */
		set_wordSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * This method is used to declare a certain event and then add it to a ListView.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the ListView.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * This method is used to add a handler to a certain event of a ListView.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a ListView as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to cause a ListView to be displayed at the top on the screen. This method applies to among the components under the same parent.
		 */
		bringToFront(): null;
		/**
		 * This method is used to cause a ListView to be displayed one level higher on the screen. This method applies to among the components under the same parent.
		 */
		bringToPrev(): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to cancel the selection made in a ListView entirely.
		 */
		clearSelect(): null;
		/**
		 * This method is used to create a new ListView format, based on the information on the ListView and columns of the bound Dataset.
		 */
		createFormat(): null;
		/**
		 * This method is used to delete a ListView that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method is used to open a pop-up calendar from a ListView cell whose edittype property is set to "date". This method is applicable only when the cell is in the edit mode.
		 * @returns {boolean} 
		 */
		dropdownCalendar(): boolean;
		/**
		 * This method is used to open a Combo item list from a ListView cell whose edittype property is set to "combo". This method is applicable only when the cell is in the edit mode.
		 * @returns {boolean} 
		 */
		dropdownCombo(): boolean;
		/**
		 * This method finds a handler in a certain event of a ListView and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns whether the detail band of a certain item is displayed in a ListView.
		 * @param {number} nRow This is the index number of an item whose detail band will be checked for whether it is displayed.
		 * @returns {boolean} 
		 */
		getBandExpandStatus(nRow: number): boolean;
		/**
		 * This method returns the value of a certain property that applies to a certain band.
		 * @param {string} enumBand This parameter is used to specify the target band.

If you specify "body", the body band includes the target property.
If you specify "detail", the detail band includes the target property.
		 * @param {string} strPropID This is a string that represents a property whose value you want to obtain.
		 * @returns {string} 
		 */
		getBandProperty(enumBand: string, strPropID: string): string;
		/**
		 * This method returns the ID of a cell that is bound to a certain Dataset column.
		 * @param {string} enumBand This is a string representing a ListView band that is searched to find a ListView cell bound to the specified Dataset column. The layout of the bands is based on the current ListView format.

If you specify "body", the body band is searched for the cell.
If you specify "detail", the detail band is searched for the cell.
		 * @param {string} strColID This is a string representing the ID of a Dataset column.
		 * @returns {string} 
		 */
		getBindCellId(enumBand: string, strColID: string): string;
		/**
		 * This method returns the Dataset object that is set for the binddataset property of a ListView.
		 * @returns {object} 
		 */
		getBindDataset(): object;
		/**
		 * This method returns the number of the cells defined in a certain band of a ListView.
		 * @param {string} enumBand This parameter is used to specify the band whose number of cells you want to obtain. The counting is based on the current ListView format.

If you specify "body", the target will be the body band.
If you specify "detail", the target will be the detail band.
		 * @returns {number} 
		 */
		getCellCount(enumBand: string): number;
		/**
		 * This method returns the value of a certain property that applies to a certain cell.
		 * @param {string} enumBand This parameter is used to specify the band that includes the target cell.

If you specify "body", the body band includes the cell.
If you specify "detail", the detail band includes the cell.
		 * @param {string} strCellID This is a string representing the ID of the target cell.
		 * @param {string} strPropID This is a string that represents the name of the target property.
		 * @returns {string} 
		 */
		getCellProperty(enumBand: string, strCellID: string, strPropID: string): string;
		/**
		 * This method returns a Rect object that contains the position-related information of a certain cell.
		 * @param {number} nRow It is the index number of the item that contains a cell whose position-related information will be obtained.
		 * @param {string} strBandID It is a string representing the band that includes the target cell.

If you specify "body", the body band includes the target cell.
If you specify "detail", the detail band includes the target cell.
		 * @param {string} strCellID It is the ID of a cell whose position-related information will be obtained.
		 * @returns {object} 
		 */
		getCellRect(nRow: number, strBandID: string, strCellID: string): object;
		/**
		 * This method returns the text displayed on a certain cell.
		 * @param {number} nRow It is the index number of the item that contains a cell whose displayed text will be obtained.
		 * @param {string} strBandID It is a string representing the band that includes the target cell.

If you specify "body", the body band includes the target cell.
If you specify "detail", the detail band includes the target cell.
		 * @param {string} strCellID It is a string representing the ID of a cell whose displayed text will be obtained.
		 * @returns {string} 
		 */
		getCellText(nRow: number, strBandID: string, strCellID: string): string;
		/**
		 * This method returns the text of a certain cell.
		 * @param {number} nRow It is the index number of the item that contains a cell whose text property's value will be obtained.
		 * @param {string} strBandID It is a string representing the band that includes the target cell.

If you specify "body", the body band includes the target cell.
If you specify "detail", the detail band includes the target cell.
		 * @param {string} strCellID It is a string representing the ID of a cell whose text property's value will be obtained.
		 * @returns {string} 
		 */
		getCellValue(nRow: number, strBandID: string, strCellID: string): string;
		/**
		 * This method returns the value of the edittype property applied to a selected cell in a ListView.
		 * @returns {string} 
		 */
		getCurEditType(): string;
		/**
		 * This method returns an XML-formatted string that represents the current ListView format.
		 * @param {boolean} bOrginal This determines whether to apply dynamic changes to the format.

For "true", the format as designed will be returned, ignoring dynamic changes.
For "false", the format will be returned with dynamic changes applied.

The default value is "false".
		 * @returns {string} 
		 */
		getCurFormatString(bOrginal?: boolean): string;
		/**
		 * This method returns the index of the Dataset row that corresponds to a certain ListView item.
		 * @param {number} nRowIndex It is the index number of a ListView item.
		 * @returns {number} 
		 */
		getDatasetRow(nRowIndex: number): number;
		/**
		 * This method returns the index number of the caret's position when the cell is in the edit mode.
		 * @returns {number} 
		 */
		getEditCaret(): number;
		getEditingText(): string;
		getEditingValue(): string;
		/**
		 * This method returns an array containing the index numbers of the characters that are positioned respectively at the beginning and end of the selected area. This method is applicable only when the cell is in the edit mode.
		 * @returns {any[]} 
		 */
		getEditSelect(): any[];
		/**
		 * This method returns selected text when the cell is in the edit mode.
		 * @returns {string} 
		 */
		getEditSelectedText(): string;
		/**
		 * This method returns the text of the control of a cell that is in the edit mode.
		 * @returns {string} 
		 */
		getEditText(): string;
		getEditValue(): string;
		/**
		 * This method returns a specific handler from a certain event of a ListView by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		getFormatIdList(): object;
		/**
		 * This method returns the entire formats of a ListView as designed in the form of an XML string.
		 * @returns {string} 
		 */
		getFormatString(): string;
		/**
		 * This method is used to obtain the bottom position of a ListView in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * This method is used to obtain the height of a ListView in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the left position of a ListView in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * This method is used to obtain the right position of a ListView in pixel, based on the parent component's left side.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * This method is used to obtain the top position of a ListView in pixel, based on the parent component's top side.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * This method is used to obtain the width of a ListView in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method returns the value of a ListView's bottom property in pixel.
		 * @returns {number} 
		 */
		getPixelBottom(): number;
		/**
		 * This method returns the height of a ListView in pixel.
		 * @returns {number} 
		 */
		getPixelHeight(): number;
		/**
		 * This method returns the value of a ListView's left property in pixel.
		 * @returns {number} 
		 */
		getPixelLeft(): number;
		/**
		 * This method returns the value of a ListView's right property in pixel.
		 * @returns {number} 
		 */
		getPixelRight(): number;
		/**
		 * This method returns the value of a ListView's top property in pixel.
		 * @returns {number} 
		 */
		getPixelTop(): number;
		/**
		 * This method returns the width of a ListView in pixel.
		 * @returns {number} 
		 */
		getPixelWidth(): number;
		/**
		 * This method returns an array containing the index numbers of selected items from a ListView.
		 * @returns {any[]} 
		 */
		getSelectedRows(): any[];
		/**
		 * This method returns the current position of the thumb of a vertical scrollbar that appears in a ListView.
		 * @returns {number} 
		 */
		getVScrollPos(): number;
		/**
		 * This method is used to hide the detail band control of a certain item in a ListView.
		 * @param {number} nRow This is the index number of a item whose detail band control will be hidden.
		 */
		hideDetailBand(nRow: number): null;
		/**
		 * This method is used to initialize a ListView after creating it in a script dynamically.
		 * @param {string} strName It sets the ID of a ListView in the form of a string.
		 * @param {(string|number)} vLeft It specifies the value of the left property of a ListView in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop It specifies the value of the top property of a ListView in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth It specifies the value of the width property of a ListView in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight It specifies the value of the height property of a ListView in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight It specifies the value of the right property of a ListView in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom It specifies the value of the bottom property of a ListView in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vMinWidth It specifies a ListView's minimum width that can be displayed in the Form.
		 * @param {(string|number)} vMaxWidth It specifies a ListView's maximum width that can be displayed in the Form.

If this value is smaller than vMinWidth, it will be replaced by the value of vMinWidth.
		 * @param {(string|number)} vMinHeight It specifies a ListView's minimum height that can be displayed in the Form.
		 * @param {(string|number)} vMaxHeight It specifies a ListView's maximum height that can be displayed in the Form.

If this value is smaller than vMinHeight, it will be replaced by the value of vMinHeight.
		 */
		init(strName: string, vLeft: string|number, vTop: string|number, vWidth: string|number, vHeight: string|number, vRight?: string|number, vBottom?: string|number, vMinWidth?: string|number, vMaxWidth?: string|number, vMinHeight?: string|number, vMaxHeight?: string|number): null;
		/**
		 * This method is used to add a handler to a certain event of a ListView at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method returns whether a pop-up calendar is opened in a ListView.
		 * @returns {boolean} 
		 */
		isDropdownCalendar(): boolean;
		/**
		 * This method returns whether a Combo item list is opened in a ListView.
		 * @returns {boolean} 
		 */
		isDropdownCombo(): boolean;
		/**
		 * This method is used to change the position and size of a ListView.
		 * @param {(string|number)} vLeft This parameter defines the value of the left property of a ListView in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop This parameter defines the value of the top property of a ListView in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth This parameter defines the value of the width property of a ListView in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight This parameter defines the value of the height property of a ListView in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight This parameter defines the value of the right property of a ListView in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom This parameter defines the value of the bottom property of a ListView in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all defined.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 */
		move(vLeft: string|number, vTop: string|number, vWidth?: string|number, vHeight?: string|number, vRight?: string|number, vBottom?: string|number): null;
		/**
		 * This method is used to cause a ListView to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToNext(objComp: object): null;
		/**
		 * This method is used to cause a ListView to be displayed one level higher on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToNext(strComp: string): null;
		/**
		 * This method is used to move focus to the next editable cell in a ListView.
		 * @returns {boolean} 
		 */
		moveToNextCell(): boolean;
		/**
		 * This method is used to cause a ListView to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {object} objComp This is an object that represents the base component.
		 */
		moveToPrev(objComp: object): null;
		/**
		 * This method is used to cause a ListView to be displayed one level lower on the screen than the component delivered as an argument. In this situation, those two components must share the same parent.
		 * @param {string} strComp This is a string that represents the ID of the base component.
		 */
		moveToPrev(strComp: string): null;
		/**
		 * This method is used to move focus to the previous editable cell in a ListView.
		 * @returns {boolean} 
		 */
		moveToPrevCell(): boolean;
		/**
		 * This method is used to remove a certain event that is declared in a ListView.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the ListView.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * This method is used to remove a handler in a certain event of a ListView.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a ListView and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the size of a ListView.
		 * @param {(string|number)} vWidth This is the width of the ListView, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the width while the base component is ignored.
If you specify a number in percentage, the width of the ListView will be determined in proportion to the width of the base component.
		 * @param {(string|number)} vHeight This is the height of the ListView, specified in pixel or percentage (%).
You cannot specify a negative number.

* When you set this parameter with a base component set:
If you specify a number in pixel, the specified number will be the height while the base component is ignored.
If you specify a number in percentage, the height of the ListView will be determined in proportion to the height of the base component.
		 */
		resize(vWidth: string|number, vHeight: string|number): null;
		/**
		 * This method is used to select/deselect an item that belongs to a certain area of a ListView. The area is delivered as an argument.
		 * @param {number} nRowIdx This is the index number of an item whose selection state will be changed.

All the items will be deselected if the specified index number exceeds the total number of the items or constitutes a negative number.
		 * @param {boolean} bSelect For "true", the item will be selected regardless of its previous selection state.
For "false", the item will be deselected regardless of its previous selection state.

The default value is "true".
		 * @returns {boolean} 
		 */
		selectRow(nRowIdx: number, bSelect?: boolean): boolean;
		/**
		 * This method is used to cause a ListView to be displayed at the bottom on the screen. This method applies to among the components under the same parent.
		 */
		sendToBack(): null;
		/**
		 * This method is used to cause a ListView to be displayed one level lower on the screen. This method applies to among the components under the same parent.
		 */
		sendToNext(): null;
		/**
		 * This method is used to set the value of a certain property that applies to a certain band.
		 * @param {string} enumBand This parameter is a string that represents the target band.

If you specify "body", the body band includes the target property.
If you specify "detail", the detail band includes the target property.
		 * @param {string} strPropID This is a string that represents a property whose value you want to set.
		 * @param {string} varValue This is a string that represents a value set for the property designated by the strProgID parameter.
		 * @returns {boolean} 
		 */
		setBandProperty(enumBand: string, strPropID: string, varValue: string): boolean;
		/**
		 * This method is used to designate a Dataset for the binddataset property of a ListView.
		 * @param {object} objDataset This is an object representing a Dataset to designate for the binddataset property.
		 */
		setBindDataset(objDataset: object): null;
		/**
		 * This method is used to focus a certain cell that belongs to the currently-selected item in a ListView.
		 * @param {string} strBandID This parameter is a string that represents the band that includes the target cell.

If you specify "body", the body band includes the target cell.
If you specify "detail", the detail band includes the target cell.
		 * @param {string} strCellID It is a string presenting the ID of a cell to be focused.
		 * @returns {boolean} 
		 */
		setCellPos(strBandID: string, strCellID: string): boolean;
		/**
		 * This method is used to set the value of a certain property that applies to a certain cell.
		 * @param {string} enumBand This parameter is used to specify the band to which the target cell belongs.

If you specify "body", the body band includes the target cell.
If you specify "detail", the detail band includes the target cell.
		 * @param {string} strCellID This is the ID of the target cell.
		 * @param {string} strPropID This is a string that represents the name of the target property.
		 * @param {any} varValue This the value of the property represented by the strPropID parameter.
		 * @returns {boolean} 
		 */
		setCellProperty(enumBand: string, strCellID: string, strPropID: string, varValue: any): boolean;
		setEditingValue(strValue: string): null;
		/**
		 * This method is used to select text in a cell that is in the edit mode. The selected area is determined according to the arguments.
		 * @param {number} nBegin It is an index number indicating the beginning of the selected area.

The index ranges from 0 to the length of the text.
If you specify -1, the caret will be positioned at the index 0 without selecting the text.
		 * @param {number} nEnd It is an index number indicating the end of the selected area.

The index ranges from 0 to the length of the text.
If you specify -1, the selected area will stretch to the right end of the text.

The default value is -1.
		 * @returns {boolean} 
		 */
		setEditSelect(nBegin: number, nEnd?: number): boolean;
		setEditValue(strValue: string): null;
		/**
		 * This method is used to change the first handler in a certain event of a ListView.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a ListView.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to give focus to a ListView.
		 * @param {boolean} bMoveScroll If scrolling is enabled in the parent component, it will determine whether to scroll based on the ListView.

For "true", the parent component will scroll so that the ListView will show.
For "false", the parent component will not scroll regardless of the ListView's position.

The default value is "true".
		 * @param {boolean} bInnerFocus If a ListView is a container component, this parameter determines whether to move focus to a child component.

For "true", focus will be given to the first child component that can receive focus.
For "false", focus will be given to the ListView.

The default value is "true" if a ListView is a container component.
		 * @returns {object} 
		 */
		setFocus(bMoveScroll?: boolean, bInnerFocus?: boolean): object;
		/**
		 * This method is used to set the ID of a format that will be reflected by the ListView.
		 * @param {string} strFormatID This is a string that represents the ID of a format that will be reflected by the ListView.
		 * @returns {boolean} 
		 */
		setFormat(strFormatID: string): boolean;
		/**
		 * This method is used to specify the bottom position of a ListView in pixel, based on the parent component's top position.
		 * @param {number} nBottom It is a pixel value representing the bottom position of a ListView, calculated based on the parent component's top position.
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * This method is used to specify the height of a ListView in pixel.
		 * @param {number} nHeight It is a pixel value representing the height of a ListView.
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * This method is used to specify the left position of a ListView in pixel, based on the parent component's left position.
		 * @param {number} nLeft It is a pixel value representing the left position of a ListView, calculated based on the parent component's left position.
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * This method is used to specify the right position of a ListView in pixel, based on the parent component's left position.
		 * @param {number} nRight It is a pixel value representing the right position of a ListView, calculated based on the parent component's left position.
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * This method is used to specify the top position of a ListView in pixel, based on the parent component's top position.
		 * @param {number} nTop It is a pixel value representing the top position of a ListView, calculated based on the parent component's top position.
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * This method is used to specify the width of a ListView in pixel.
		 * @param {number} nWidth It is a pixel value representing the width of a ListView.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * This method is used to display a ListView on the screen. The ListView mentioned here refers to the one that is dynamically created through a script.
		 */
		show(): null;
		/**
		 * This method is used to show the detail band control of a certain item in a ListView.
		 * @param {number} nRow This is the index number of an item whose detail band control will be displayed.
		 */
		showDetailBand(nRow: number): null;
		/**
		 * This method is used to determine whether to open an editable control when a selected cell is editable.
		 * @param {boolean} bShow This parameter indicates whether to open an editable control in the currently-selected cell.

If you specify "true" with the cell in the edit mode, the editable control will be opened.
If you specify "false", an editable control will not be opened with the cell quitting the edit mode.
		 * @returns {boolean} 
		 */
		showEditor(bShow: boolean): boolean;
	}
}

