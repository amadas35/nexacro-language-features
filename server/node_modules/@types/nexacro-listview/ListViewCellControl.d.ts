// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    _ListViewCellControl: nexacro.ListViewCellControl;
}

    
declare namespace nexacro {
    type ListViewCellControlOmitKeys = 'boxShadow'|'enable'|'enableevent'|'hotkey'|'id'|'initvalueid'|'parent'|'positionstep'|'rtl'|'taborder'|'tabstop'|'visible'|'addEvent'|'addEventHandler'|'addEventHandlerLookup'|'bringToFront'|'bringToPrev'|'clearEventHandler'|'destroy'|'findEventHandler'|'getDisplayText'|'getEventHandler'|'getFocus'|'getOffsetBottom'|'getOffsetHeight'|'getOffsetLeft'|'getOffsetRight'|'getOffsetTop'|'getOffsetWidth'|'getPixelBottom'|'getPixelHeight'|'getPixelLeft'|'getPixelRight'|'getPixelTop'|'getPixelWidth'|'init'|'insertEventHandler'|'move'|'moveToNext'|'moveToPrev'|'removeEvent'|'removeEventHandler'|'removeEventHandlerLookup'|'resize'|'sendToBack'|'sendToNext'|'setEventHandler'|'setEventHandlerLookup'|'setFocus'|'setOffsetBottom'|'setOffsetHeight'|'setOffsetLeft'|'setOffsetRight'|'setOffsetTop'|'setOffsetWidth'|'show'|'onclick'|'oncontextmenu'|'ondblclick'|'ondrag'|'ondragenter'|'ondragleave'|'ondragmove'|'ondrop'|'oninput'|'onkeydown'|'onkeyup'|'onkillfocus'|'onlbuttondown'|'onlbuttonup'|'onmousedown'|'onmouseenter'|'onmouseleave'|'onmousemove'|'onmouseup'|'onmousewheel'|'onmove'|'onrbuttondown'|'onrbuttonup'|'onsetfocus'|'onsize'|'ontouchend'|'ontouchmove'|'ontouchstart';
	
	interface ListViewCellControl extends Omit<nexacro.Component, ListViewCellControlOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.ListViewCellControl;
	    /**
		 * This property is used to set the background of a ListViewCellControl.
		 */
		readonly background?: string;
		/**
		 * This property is used to set the shape of the corners of a cell.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a cell's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property determines whether to select all text when the editable control is activated. This property is applicable when the edittype property of the cell is set to "date".
		 */
		readonly calendarautoselect?: boolean;
		readonly calendarbackgroundcol?: string;
		readonly calendarbordercol?: string;
		/**
		 * This property is used to size the drop-down button of a cell whose type is Calendar.
		 */
		readonly calendarbuttonsize?: number | `${number}` | `${number} ${number}`;
		readonly calendardataset?: string;
		readonly calendardatecol?: string;
		/**
		 * This property is used to set the format of a displayed date when the displaytype property of a cell is set to "date" or "calendarcontrol".
		 */
		readonly calendardateformat?: string;
		/**
		 * This property is used to size each date area of the pop-up calendar of a cell whose type is Calendar.
		 */
		readonly calendardaysize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property sets a string that will be displayed in a calendar-type cell if the data bound to the cell is not valid.
		 */
		readonly calendardisplayinvalidtext?: string;
		/**
		 * This property determines what type of result is displayed in a calendar-type cell if the data bound to the cell is not valid.
		 */
		readonly calendardisplayinvalidtype?: nexacro.Enum.CellDpInvalidType;
		/**
		 * This property is used to define the text displayed in a cell when the calendardisplaynulltype property of the cell is set to "nulltext".
		 */
		readonly calendardisplaynulltext?: string;
		/**
		 * This property is used to define the type of a value displayed in a cell when the cell's displaytype property is set to "date" or "calendarcontrol". This property is applicable when the bound value is null.
		 */
		readonly calendardisplaynulltype?: nexacro.Enum.GridDateNullType;
		/**
		 * This property is used to set the format of a date input when the edittype property of a cell is set to "date".
		 */
		readonly calendareditformat?: string;
		/**
		 * This property is used to set the order of a year and month, displayed at the top of the pop-up calendar of a cell whose type is Calendar.
		 */
		readonly calendarheadformat?: string;
		/**
		 * This property is used to set the height of the head of a popup calendar. This property applies when the type of a cell is a Calendar. The head is an area where a year and month is displayed.
		 */
		readonly calendarheadheight?: number;
		/**
		 * This property is used to size a calendar that pops up from a cell whose type is Calendar.
		 */
		readonly calendarpopupsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to determine how to display a pop-up calendar (a date picker) when a cell is calendar type.
		 */
		readonly calendarpopuptype?: nexacro.Enum.CalendarPopupType;
		/**
		 * This property determines whether to always display spin buttons for changing the month at the top of the pop-up calendar of a cell whose type is Calendar.
		 */
		readonly calendarshowmonthspin?: boolean;
		/**
		 * This property determines whether to always display spin buttons for changing the year at the top of the pop-up calendar of a cell whose type is Calendar.
		 */
		readonly calendarshowyearspin?: boolean;
		readonly calendartextcolorcol?: string;
		/**
		 * This property is used to set the type of the calendar if a cell constitutes a calendar.
		 */
		readonly calendartype?: nexacro.Enum.GridDateType;
		/**
		 * This property determines whether to display trailing days, which come from the previous and following months that appear on the current month calendar. Those days are displayed on the empty areas at the beginning and end of the pop-up calendar. This property is applicable when a cell is the Calendar type.
		 */
		readonly calendarusetrailingday?: boolean;
		/**
		 * This property is used to define how to mark weekdays in the pop-up calendar of a cell whose type is Calendar.
		 */
		readonly calendarweekformat?: string;
		/**
		 * This property is used to size the checkbox in a cell when the type of the cell is a checkbox.
		 */
		readonly checkboxsize?: number;
		/**
		 * This property is used to set the color of the text displayed in a cell.
		 */
		readonly color?: string;
		/**
		 * This property determines whether to select all text when the editable control is activated. This property is applicable when the the cell is a Combo type.
		 */
		readonly comboautoselect?: boolean;
		/**
		 * This property is used to size the drop-down button of a cell whose type is Combo.
		 */
		readonly combobuttonsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to designate a Dataset column whose values will be used as codes of combo items. This property is applicable when a cell is the Combo type.
		 */
		readonly combocodecol?: string;
		/**
		 * This property is used to designate a Dataset column whose values will be used as data of combo items. This property is applicable when a cell is the Combo type.
		 */
		readonly combodatacol?: string;
		/**
		 * This property is used to specify the ID of a Dataset that will form the combo item of a cell whose type is Combo.
		 */
		readonly combodataset?: string;
		/**
		 * This property is used to specify the text that will be displayed when there is no item in a combo list, that corresponds with a certain bound value. This property is applicable when a cell is the Combo type.
		 */
		readonly combodisplaynulltext?: string;
		/**
		 * This property is used to specify the type of a value that will be displayed when no item in a combo list corresponds with a certain bound value. This property is applicable when a cell is the Combo type.
		 */
		readonly combodisplaynulltype?: nexacro.Enum.GridComboNullType;
		/**
		 * This property is used to specify the number of items that will be shown simultaneously in the drop-down portion without scrolling. This property is applicable when a cell is the Combo type.
		 */
		readonly combodisplayrowcount?: number;
		/**
		 * This property is used to specify a default language used in a cell whose type is Combo.
		 */
		readonly comboimemode?: nexacro.Enum.ImeModeType;
		/**
		 * This property is used to set the height of a row where each item is displayed. This property applies when the type of a cell is Combo.
		 */
		readonly comboitemheight?: number;
		/**
		 * This property is used to size an item list that pops up from a cell whose type is Combo.
		 */
		readonly combopopupsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to determine how to display an item list when a cell is the Combo type.
		 */
		readonly combopopuptype?: nexacro.Enum.PopupType;
		/**
		 * This property is used to specify the width of the scrollbar displayed in a cell whose type is Combo. The scrollbar is included in the item list of the Combo.
		 */
		readonly comboscrollbarsize?: number;
		/**
		 * This property is used to define how the Combo control works when a cell is the Combo type.
		 */
		readonly combotype?: nexacro.Enum.ComboType;
		/**
		 * This property is used to set the style of a cell by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a cell.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to define how bound data will be displayed in a cell that is not being edited.
		 */
		readonly displaytype?: nexacro.Enum.ListView_DispType;
		/**
		 * This property determines whether to select all text when the editable control is activated. This property is applicable when the edittype property of the cell is set to "text".
		 */
		readonly editautoselect?: boolean;
		readonly editimeaction?: nexacro.Enum.CellImeActionType;
		/**
		 * This property is used to specify a default language used in the editable control of a cell whose edittype property is set to "text".
		 */
		readonly editimemode?: nexacro.Enum.ImeModeType;
		/**
		 * This property is used to prevent certain types of input to the editable control of a cell when the edittype property of the cell is set to "text". The restriction is imposed when you edit the cell.
		 */
		readonly editinputfilter?: nexacro.Enum.InputFilterType;
		/**
		 * This property is used to set the case of an English input to the editable control of a cell whose edittype property is set to "text". This property determines whether to convert the input into upper case or lower case.
		 */
		readonly editinputmode?: nexacro.Enum.InputModeType;
		/**
		 * This property is used to determine the character types permitted as an input to the editable control of a cell whose edittype property is set to "text".
		 */
		readonly editinputtype?: nexacro.Enum.InputType;
		/**
		 * The property is used to specify the maximum length of a string that is entered to the editable control of a cell when the edittype property is set to "text".
		 */
		readonly editmaxlength?: number;
		/**
		 * This property is used to determine the type of an editable field for a focused cell.
		 */
		readonly edittype?: nexacro.Enum.ListView_EditType;
		/**
		 * This property is used to specify the text displayed in the Expand button of a cell.
		 */
		readonly expandchar?: string;
		/**
		 * This property is used to specify the location of an image file that will be displayed in the Expand button of a cell. The image is displayed along with text.
		 */
		readonly expandimage?: string;
		/**
		 * This property is used to determine whether to display an Expand button on the right side of a cell.
		 */
		readonly expandshow?: nexacro.Enum.GridExpandShow;
		/**
		 * This property is used to size the expand button displayed on the right part of a cell.
		 */
		readonly expandsize?: number;
		/**
		 * This property is used to specify an expression for dynamically creating the value of the text property of a cell.
		 */
		readonly expr?: string;
		/**
		 * This property sets a font used for a cell.
		 */
		readonly font?: string;
		/**
		 * This property is used to set the height of a cell.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to determine how to enlarge/reduce an image to fit a cell.
		 */
		readonly imagestretch?: nexacro.Enum.Stretch;
		/**
		 * This property is used to specify the value of the point that indicates the position of a cell's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between characters (kerning) displayed in a cell.
		 */
		readonly letterSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This property is used to set a locale applied to a cell.
		 */
		readonly locale?: nexacro.Enum.LocaleCode;
		/**
		 * This property determines whether to select all text when the editable control is activated. this property is applicable when the edittype property of the cell is set to "mask".
		 */
		readonly maskeditautoselect?: boolean;
		/**
		 * This property determines how to deal with non-entered masks of a cell whose maskeditformat property is set.
		 */
		readonly maskeditclipmode?: nexacro.Enum.ClipModeType;
		/**
		 * This property is used to define the format of an input when the edittype property of a cell is set to "mask".
		 */
		readonly maskeditformat?: string;
		readonly maskeditimeaction?: nexacro.Enum.CellImeActionType;
		/**
		 * This property applies to a cell representing a MaskEdit that receives a numerical input. This property is used to determine which part of a number the mask values apply to.
		 */
		readonly maskeditlimitbymask?: nexacro.Enum.LimitByMask;
		/**
		 * This property is used to specify a character to be displayed in the position of a mask, which is defined by the maskeditformat property of a cell.
		 */
		readonly maskeditmaskchar?: string;
		readonly maskeditpostfixtext?: string;
		/**
		 * This property determines how to deal with the empty spaces on the left and right parts of a cell whose maskeditformat property is set.
		 */
		readonly maskedittrimtype?: nexacro.Enum.TrimType;
		/**
		 * This property is used to specify the form of an input to a cell whose edittype property is set to "mask".
		 */
		readonly maskedittype?: nexacro.Enum.MaskEditType;
		/**
		 * This property is used to set the maximum height of a cell for the component to be displayed on the screen.
		 */
		readonly maxheight?: number;
		/**
		 * This property is used to set the maximum width of a cell for the component to be displayed on the screen.
		 */
		readonly maxwidth?: number;
		/**
		 * This property is used to set the minimum height of a cell for the component to be displayed on the screen.
		 */
		readonly minheight?: number;
		/**
		 * This property is used to set the minimum width of a cell for the component to be displayed on the screen.
		 */
		readonly minwidth?: number;
		/**
		 * This property is used to specify the name of a ListViewCellControl.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a cell.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a cell.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the padding, an inner margin, of a cell.
		 */
		readonly padding?: string;
		/**
		 * This property is used to set the horizontal alignment of the text or contents displayed in a cell.
		 */
		readonly textAlign?: nexacro.Enum.HorizontalAlign;
		/**
		 * This property is used to set the effects applied to the text displayed in a cell.
		 */
		readonly textDecoration?: nexacro.Enum.TextDecorationLine;
		/**
		 * This property is used to set the vertical alignment of the text or contents displayed in a cell.
		 */
		readonly verticalAlign?: nexacro.Enum.VerticalAlign;
		/**
		 * This property is used to set line wrap, automatically conducted when the length of text in a cell exceeds the output area.
		 */
		readonly wordWrap?: nexacro.Enum.WordWrapType;
		/**
		 * This property is used to set the opacity of a cell.
		 */
		readonly opacity?: number;
		/**
		 * This property is used to set the gap between blocks, with which a progress bar is filled to indicate the progress of a certain task. This property is applicable when the displaytype property of a cell is set to "progressbarcontrol".
		 */
		readonly progressbarblockgap?: number;
		/**
		 * This property is used to set the width of blocks, with which a progress bar is filled to indicate the progress of a certain task. This property is applicable when the displaytype property of a cell is set to "progressbarcontrol".
		 */
		readonly progressbarblocksize?: number;
		/**
		 * This property is used to set the direction in which a progress bar is filled. This property is applicable when the displaytype property of a cell is set to "progressbarcontrol".
		 */
		readonly progressbardirection?: nexacro.Enum.ProgressBarDirection;
		/**
		 * This property is used to set the style of a progress bar. This property is applicable when the displaytype property of a cell is set to "progressbarcontrol".
		 */
		readonly progressbarsmooth?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a cell's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to define the text to display on a cell.
		 */
		readonly text?: string;
		/**
		 * This property is used to define how the enter key works in a cell whose edittype property is set to "textarea".
		 */
		readonly textareaacceptsenter?: boolean;
		/**
		 * This property determines whether to select all text when the editable control is activated. this property is applicable when the edittype property of the cell is set to "textarea".
		 */
		readonly textareaautoselect?: boolean;
		/**
		 * This property is used to specify a default language used in the editable control of a cell whose edittype property is set to "textarea".
		 */
		readonly textareaimemode?: nexacro.Enum.ImeModeType;
		/**
		 * This property is used to prevent certain types of input to the editable control of a cell whose edittype property is set to "textarea".
		 */
		readonly textareainputfilter?: nexacro.Enum.InputFilterType;
		/**
		 * This property is used to set the case of an English input to the editable control of a cell whose edittype property is set to "textarea". This property determines whether to convert the input into upper case or lower case.
		 */
		readonly textareainputmode?: nexacro.Enum.InputModeType;
		/**
		 * This property is used to determine the character types permitted as an input to the editable control of a cell whose edittype property is set to "textarea".
		 */
		readonly textareainputtype?: nexacro.Enum.InputType;
		/**
		 * The property is used to specify the maximum length of a string that is entered to the editable control when the edittype property of a cell is set to "textarea".
		 */
		readonly textareamaxlength?: number;
		/**
		 * This property is used to size the scrollbar displayed in a cell whose type is TextArea.
		 */
		readonly textareascrollbarsize?: number;
		/**
		 * This property determines how scrollbars work in the editable control when the edittype property of a cell is set to"textarea".
		 */
		readonly textareascrollbartype?: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`;
		/**
		 * This property is used to set the types of scrolling applied to the editable control of a cell whose edittype property is set to "textarea".
		 */
		readonly textareascrolltype?: nexacro.Enum.ScrollType;
		/**
		 * This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a cell.
		 */
		readonly tooltiptext?: string;
		/**
		 * This property is used to define the position and type of a tooltip that appears in a cell.
		 */
		readonly tooltiptype?: nexacro.Enum.TooltipType;
		/**
		 * This property is used to specify the value of the point that indicates the position of a cell's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the width of a cell.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between words displayed in a cell.
		 */
		readonly wordSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * @param {string} v This property is used to set the background of a ListViewCellControl.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a cell.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a cell's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {boolean} v This property determines whether to select all text when the editable control is activated. This property is applicable when the edittype property of the cell is set to "date".
		 * @returns {void} 
		 */
		set_calendarautoselect(v: boolean): void;
		set_calendarbackgroundcol(v: string): void;
		set_calendarbordercol(v: string): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size the drop-down button of a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_calendarbuttonsize(v: number | `${number}` | `${number} ${number}`): void;
		set_calendardataset(v: string): void;
		set_calendardatecol(v: string): void;
		/**
		 * @param {string} v This property is used to set the format of a displayed date when the displaytype property of a cell is set to "date" or "calendarcontrol".
		 * @returns {void} 
		 */
		set_calendardateformat(v: string): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size each date area of the pop-up calendar of a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_calendardaysize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {string} v This property sets a string that will be displayed in a calendar-type cell if the data bound to the cell is not valid.
		 * @returns {void} 
		 */
		set_calendardisplayinvalidtext(v: string): void;
		/**
		 * @param {nexacro.Enum.CellDpInvalidType} v This property determines what type of result is displayed in a calendar-type cell if the data bound to the cell is not valid.
		 * @returns {void} 
		 */
		set_calendardisplayinvalidtype(v: nexacro.Enum.CellDpInvalidType): void;
		/**
		 * @param {string} v This property is used to define the text displayed in a cell when the calendardisplaynulltype property of the cell is set to "nulltext".
		 * @returns {void} 
		 */
		set_calendardisplaynulltext(v: string): void;
		/**
		 * @param {nexacro.Enum.GridDateNullType} v This property is used to define the type of a value displayed in a cell when the cell's displaytype property is set to "date" or "calendarcontrol". This property is applicable when the bound value is null.
		 * @returns {void} 
		 */
		set_calendardisplaynulltype(v: nexacro.Enum.GridDateNullType): void;
		/**
		 * @param {string} v This property is used to set the format of a date input when the edittype property of a cell is set to "date".
		 * @returns {void} 
		 */
		set_calendareditformat(v: string): void;
		/**
		 * @param {string} v This property is used to set the order of a year and month, displayed at the top of the pop-up calendar of a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_calendarheadformat(v: string): void;
		/**
		 * @param {number} v This property is used to set the height of the head of a popup calendar. This property applies when the type of a cell is a Calendar. The head is an area where a year and month is displayed.
		 * @returns {void} 
		 */
		set_calendarheadheight(v: number): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size a calendar that pops up from a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_calendarpopupsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {nexacro.Enum.CalendarPopupType} v This property is used to determine how to display a pop-up calendar (a date picker) when a cell is calendar type.
		 * @returns {void} 
		 */
		set_calendarpopuptype(v: nexacro.Enum.CalendarPopupType): void;
		/**
		 * @param {boolean} v This property determines whether to always display spin buttons for changing the month at the top of the pop-up calendar of a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_calendarshowmonthspin(v: boolean): void;
		/**
		 * @param {boolean} v This property determines whether to always display spin buttons for changing the year at the top of the pop-up calendar of a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_calendarshowyearspin(v: boolean): void;
		set_calendartextcolorcol(v: string): void;
		/**
		 * @param {nexacro.Enum.GridDateType} v This property is used to set the type of the calendar if a cell constitutes a calendar.
		 * @returns {void} 
		 */
		set_calendartype(v: nexacro.Enum.GridDateType): void;
		/**
		 * @param {boolean} v This property determines whether to display trailing days, which come from the previous and following months that appear on the current month calendar. Those days are displayed on the empty areas at the beginning and end of the pop-up calendar. This property is applicable when a cell is the Calendar type.
		 * @returns {void} 
		 */
		set_calendarusetrailingday(v: boolean): void;
		/**
		 * @param {string} v This property is used to define how to mark weekdays in the pop-up calendar of a cell whose type is Calendar.
		 * @returns {void} 
		 */
		set_calendarweekformat(v: string): void;
		/**
		 * @param {number} v This property is used to size the checkbox in a cell when the type of the cell is a checkbox.
		 * @returns {void} 
		 */
		set_checkboxsize(v: number): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a cell.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {boolean} v This property determines whether to select all text when the editable control is activated. This property is applicable when the the cell is a Combo type.
		 * @returns {void} 
		 */
		set_comboautoselect(v: boolean): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size the drop-down button of a cell whose type is Combo.
		 * @returns {void} 
		 */
		set_combobuttonsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {string} v This property is used to designate a Dataset column whose values will be used as codes of combo items. This property is applicable when a cell is the Combo type.
		 * @returns {void} 
		 */
		set_combocodecol(v: string): void;
		/**
		 * @param {string} v This property is used to designate a Dataset column whose values will be used as data of combo items. This property is applicable when a cell is the Combo type.
		 * @returns {void} 
		 */
		set_combodatacol(v: string): void;
		/**
		 * @param {string} v This property is used to specify the ID of a Dataset that will form the combo item of a cell whose type is Combo.
		 * @returns {void} 
		 */
		set_combodataset(v: string): void;
		/**
		 * @param {string} v This property is used to specify the text that will be displayed when there is no item in a combo list, that corresponds with a certain bound value. This property is applicable when a cell is the Combo type.
		 * @returns {void} 
		 */
		set_combodisplaynulltext(v: string): void;
		/**
		 * @param {nexacro.Enum.GridComboNullType} v This property is used to specify the type of a value that will be displayed when no item in a combo list corresponds with a certain bound value. This property is applicable when a cell is the Combo type.
		 * @returns {void} 
		 */
		set_combodisplaynulltype(v: nexacro.Enum.GridComboNullType): void;
		/**
		 * @param {number} v This property is used to specify the number of items that will be shown simultaneously in the drop-down portion without scrolling. This property is applicable when a cell is the Combo type.
		 * @returns {void} 
		 */
		set_combodisplayrowcount(v: number): void;
		/**
		 * @param {nexacro.Enum.ImeModeType} v This property is used to specify a default language used in a cell whose type is Combo.
		 * @returns {void} 
		 */
		set_comboimemode(v: nexacro.Enum.ImeModeType): void;
		/**
		 * @param {number} v This property is used to set the height of a row where each item is displayed. This property applies when the type of a cell is Combo.
		 * @returns {void} 
		 */
		set_comboitemheight(v: number): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to size an item list that pops up from a cell whose type is Combo.
		 * @returns {void} 
		 */
		set_combopopupsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {nexacro.Enum.PopupType} v This property is used to determine how to display an item list when a cell is the Combo type.
		 * @returns {void} 
		 */
		set_combopopuptype(v: nexacro.Enum.PopupType): void;
		/**
		 * @param {number} v This property is used to specify the width of the scrollbar displayed in a cell whose type is Combo. The scrollbar is included in the item list of the Combo.
		 * @returns {void} 
		 */
		set_comboscrollbarsize(v: number): void;
		/**
		 * @param {nexacro.Enum.ComboType} v This property is used to define how the Combo control works when a cell is the Combo type.
		 * @returns {void} 
		 */
		set_combotype(v: nexacro.Enum.ComboType): void;
		/**
		 * @param {string} v This property is used to set the style of a cell by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a cell.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {nexacro.Enum.ListView_DispType} v This property is used to define how bound data will be displayed in a cell that is not being edited.
		 * @returns {void} 
		 */
		set_displaytype(v: nexacro.Enum.ListView_DispType): void;
		/**
		 * @param {boolean} v This property determines whether to select all text when the editable control is activated. This property is applicable when the edittype property of the cell is set to "text".
		 * @returns {void} 
		 */
		set_editautoselect(v: boolean): void;
		set_editimeaction(v: nexacro.Enum.CellImeActionType): void;
		/**
		 * @param {nexacro.Enum.ImeModeType} v This property is used to specify a default language used in the editable control of a cell whose edittype property is set to "text".
		 * @returns {void} 
		 */
		set_editimemode(v: nexacro.Enum.ImeModeType): void;
		/**
		 * @param {nexacro.Enum.InputFilterType} v This property is used to prevent certain types of input to the editable control of a cell when the edittype property of the cell is set to "text". The restriction is imposed when you edit the cell.
		 * @returns {void} 
		 */
		set_editinputfilter(v: nexacro.Enum.InputFilterType): void;
		/**
		 * @param {nexacro.Enum.InputModeType} v This property is used to set the case of an English input to the editable control of a cell whose edittype property is set to "text". This property determines whether to convert the input into upper case or lower case.
		 * @returns {void} 
		 */
		set_editinputmode(v: nexacro.Enum.InputModeType): void;
		/**
		 * @param {nexacro.Enum.InputType} v This property is used to determine the character types permitted as an input to the editable control of a cell whose edittype property is set to "text".
		 * @returns {void} 
		 */
		set_editinputtype(v: nexacro.Enum.InputType): void;
		/**
		 * @param {number} v The property is used to specify the maximum length of a string that is entered to the editable control of a cell when the edittype property is set to "text".
		 * @returns {void} 
		 */
		set_editmaxlength(v: number): void;
		/**
		 * @param {nexacro.Enum.ListView_EditType} v This property is used to determine the type of an editable field for a focused cell.
		 * @returns {void} 
		 */
		set_edittype(v: nexacro.Enum.ListView_EditType): void;
		/**
		 * @param {string} v This property is used to specify the text displayed in the Expand button of a cell.
		 * @returns {void} 
		 */
		set_expandchar(v: string): void;
		/**
		 * @param {string} v This property is used to specify the location of an image file that will be displayed in the Expand button of a cell. The image is displayed along with text.
		 * @returns {void} 
		 */
		set_expandimage(v: string): void;
		/**
		 * @param {nexacro.Enum.GridExpandShow} v This property is used to determine whether to display an Expand button on the right side of a cell.
		 * @returns {void} 
		 */
		set_expandshow(v: nexacro.Enum.GridExpandShow): void;
		/**
		 * @param {number} v This property is used to size the expand button displayed on the right part of a cell.
		 * @returns {void} 
		 */
		set_expandsize(v: number): void;
		/**
		 * @param {string} v This property is used to specify an expression for dynamically creating the value of the text property of a cell.
		 * @returns {void} 
		 */
		set_expr(v: string): void;
		/**
		 * @param {string} v This property sets a font used for a cell.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to set the height of a cell.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {nexacro.Enum.Stretch} v This property is used to determine how to enlarge/reduce an image to fit a cell.
		 * @returns {void} 
		 */
		set_imagestretch(v: nexacro.Enum.Stretch): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a cell's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between characters (kerning) displayed in a cell.
		 * @returns {void} 
		 */
		set_letterSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * @param {nexacro.Enum.LocaleCode} v This property is used to set a locale applied to a cell.
		 * @returns {void} 
		 */
		set_locale(v: nexacro.Enum.LocaleCode): void;
		/**
		 * @param {boolean} v This property determines whether to select all text when the editable control is activated. this property is applicable when the edittype property of the cell is set to "mask".
		 * @returns {void} 
		 */
		set_maskeditautoselect(v: boolean): void;
		/**
		 * @param {nexacro.Enum.ClipModeType} v This property determines how to deal with non-entered masks of a cell whose maskeditformat property is set.
		 * @returns {void} 
		 */
		set_maskeditclipmode(v: nexacro.Enum.ClipModeType): void;
		/**
		 * @param {string} v This property is used to define the format of an input when the edittype property of a cell is set to "mask".
		 * @returns {void} 
		 */
		set_maskeditformat(v: string): void;
		set_maskeditimeaction(v: nexacro.Enum.CellImeActionType): void;
		/**
		 * @param {nexacro.Enum.LimitByMask} v This property applies to a cell representing a MaskEdit that receives a numerical input. This property is used to determine which part of a number the mask values apply to.
		 * @returns {void} 
		 */
		set_maskeditlimitbymask(v: nexacro.Enum.LimitByMask): void;
		/**
		 * @param {string} v This property is used to specify a character to be displayed in the position of a mask, which is defined by the maskeditformat property of a cell.
		 * @returns {void} 
		 */
		set_maskeditmaskchar(v: string): void;
		set_maskeditpostfixtext(v: string): void;
		/**
		 * @param {nexacro.Enum.TrimType} v This property determines how to deal with the empty spaces on the left and right parts of a cell whose maskeditformat property is set.
		 * @returns {void} 
		 */
		set_maskedittrimtype(v: nexacro.Enum.TrimType): void;
		/**
		 * @param {nexacro.Enum.MaskEditType} v This property is used to specify the form of an input to a cell whose edittype property is set to "mask".
		 * @returns {void} 
		 */
		set_maskedittype(v: nexacro.Enum.MaskEditType): void;
		/**
		 * @param {number} v This property is used to set the maximum height of a cell for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the maximum width of a cell for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_maxwidth(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum height of a cell for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minheight(v: number): void;
		/**
		 * @param {number} v This property is used to set the minimum width of a cell for the component to be displayed on the screen.
		 * @returns {void} 
		 */
		set_minwidth(v: number): void;
		/**
		 * @param {string} v This property is used to specify the name of a ListViewCellControl.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a cell.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a cell.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {string} v This property is used to set the padding, an inner margin, of a cell.
		 * @returns {void} 
		 */
		set_padding(v: string): void;
		/**
		 * @param {nexacro.Enum.HorizontalAlign} v This property is used to set the horizontal alignment of the text or contents displayed in a cell.
		 * @returns {void} 
		 */
		set_textAlign(v: nexacro.Enum.HorizontalAlign): void;
		/**
		 * @param {nexacro.Enum.TextDecorationLine} v This property is used to set the effects applied to the text displayed in a cell.
		 * @returns {void} 
		 */
		set_textDecoration(v: nexacro.Enum.TextDecorationLine): void;
		/**
		 * @param {nexacro.Enum.VerticalAlign} v This property is used to set the vertical alignment of the text or contents displayed in a cell.
		 * @returns {void} 
		 */
		set_verticalAlign(v: nexacro.Enum.VerticalAlign): void;
		/**
		 * @param {nexacro.Enum.WordWrapType} v This property is used to set line wrap, automatically conducted when the length of text in a cell exceeds the output area.
		 * @returns {void} 
		 */
		set_wordWrap(v: nexacro.Enum.WordWrapType): void;
		/**
		 * @param {number} v This property is used to set the opacity of a cell.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {number} v This property is used to set the gap between blocks, with which a progress bar is filled to indicate the progress of a certain task. This property is applicable when the displaytype property of a cell is set to "progressbarcontrol".
		 * @returns {void} 
		 */
		set_progressbarblockgap(v: number): void;
		/**
		 * @param {number} v This property is used to set the width of blocks, with which a progress bar is filled to indicate the progress of a certain task. This property is applicable when the displaytype property of a cell is set to "progressbarcontrol".
		 * @returns {void} 
		 */
		set_progressbarblocksize(v: number): void;
		/**
		 * @param {nexacro.Enum.ProgressBarDirection} v This property is used to set the direction in which a progress bar is filled. This property is applicable when the displaytype property of a cell is set to "progressbarcontrol".
		 * @returns {void} 
		 */
		set_progressbardirection(v: nexacro.Enum.ProgressBarDirection): void;
		/**
		 * @param {boolean} v This property is used to set the style of a progress bar. This property is applicable when the displaytype property of a cell is set to "progressbarcontrol".
		 * @returns {void} 
		 */
		set_progressbarsmooth(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a cell's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {string} v This property is used to define the text to display on a cell.
		 * @returns {void} 
		 */
		set_text(v: string): void;
		/**
		 * @param {boolean} v This property is used to define how the enter key works in a cell whose edittype property is set to "textarea".
		 * @returns {void} 
		 */
		set_textareaacceptsenter(v: boolean): void;
		/**
		 * @param {boolean} v This property determines whether to select all text when the editable control is activated. this property is applicable when the edittype property of the cell is set to "textarea".
		 * @returns {void} 
		 */
		set_textareaautoselect(v: boolean): void;
		/**
		 * @param {nexacro.Enum.ImeModeType} v This property is used to specify a default language used in the editable control of a cell whose edittype property is set to "textarea".
		 * @returns {void} 
		 */
		set_textareaimemode(v: nexacro.Enum.ImeModeType): void;
		/**
		 * @param {nexacro.Enum.InputFilterType} v This property is used to prevent certain types of input to the editable control of a cell whose edittype property is set to "textarea".
		 * @returns {void} 
		 */
		set_textareainputfilter(v: nexacro.Enum.InputFilterType): void;
		/**
		 * @param {nexacro.Enum.InputModeType} v This property is used to set the case of an English input to the editable control of a cell whose edittype property is set to "textarea". This property determines whether to convert the input into upper case or lower case.
		 * @returns {void} 
		 */
		set_textareainputmode(v: nexacro.Enum.InputModeType): void;
		/**
		 * @param {nexacro.Enum.InputType} v This property is used to determine the character types permitted as an input to the editable control of a cell whose edittype property is set to "textarea".
		 * @returns {void} 
		 */
		set_textareainputtype(v: nexacro.Enum.InputType): void;
		/**
		 * @param {number} v The property is used to specify the maximum length of a string that is entered to the editable control when the edittype property of a cell is set to "textarea".
		 * @returns {void} 
		 */
		set_textareamaxlength(v: number): void;
		/**
		 * @param {number} v This property is used to size the scrollbar displayed in a cell whose type is TextArea.
		 * @returns {void} 
		 */
		set_textareascrollbarsize(v: number): void;
		/**
		 * @param {(nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`)} v This property determines how scrollbars work in the editable control when the edittype property of a cell is set to"textarea".
		 * @returns {void} 
		 */
		set_textareascrollbartype(v: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`): void;
		/**
		 * @param {nexacro.Enum.ScrollType} v This property is used to set the types of scrolling applied to the editable control of a cell whose edittype property is set to "textarea".
		 * @returns {void} 
		 */
		set_textareascrolltype(v: nexacro.Enum.ScrollType): void;
		/**
		 * @param {string} v This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a cell.
		 * @returns {void} 
		 */
		set_tooltiptext(v: string): void;
		/**
		 * @param {nexacro.Enum.TooltipType} v This property is used to define the position and type of a tooltip that appears in a cell.
		 * @returns {void} 
		 */
		set_tooltiptype(v: nexacro.Enum.TooltipType): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to specify the value of the point that indicates the position of a cell's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v This property is used to set the width of a cell.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between words displayed in a cell.
		 * @returns {void} 
		 */
		set_wordSpacing(v: number|nexacro.Unit.PixelNegative): void;
	}
}

