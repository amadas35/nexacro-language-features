// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    AnimationTimeline: nexacro.AnimationTimeline;
}

    
declare namespace nexacro {
    type AnimationTimelineOmitKeys = 'beziercurve'|'delay'|'direction'|'duration'|'easing'|'elasticity'|'id'|'loop'|'loopcount'|'addTarget';
	
	interface AnimationTimeline extends Omit<nexacro.Animation, AnimationTimelineOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.AnimationTimeline;
	    /**
		 * This read-only property holds all the AnimationTimelineItem objects that are register to an AnimationTimeline object.
		 */
		readonly items?: object;
		/**
		 * This property is used to specify the name of an AnimationTimeline object.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the parent object of a AnimationTimeline.
		 */
		readonly parent?: object;
		/**
		 * This event occurs when an animation begins to take effect.
		 */
		readonly onbegin?: nexacro.EventObject<nexacro.AnimationTimeline, nexacro.AnimationEventInfo>;
		/**
		 * This event occurs when an animation finishes.
		 */
		readonly oncomplete?: nexacro.EventObject<nexacro.AnimationTimeline, nexacro.AnimationEventInfo>;
		/**
		 * This event occurs for every tick when the animation is being performed.
		 */
		readonly onrun?: nexacro.EventObject<nexacro.AnimationTimeline, nexacro.AnimationEventInfo>;
		/**
		 * This event occurs for every tick after the calling of the play() method and until the animation finishes.
		 */
		readonly onupdate?: nexacro.EventObject<nexacro.AnimationTimeline, nexacro.AnimationEventInfo>;
		/**
		 * @param {string} v This property is used to specify the name of an AnimationTimeline object.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * This method is used to add an Animation object to an AnimationTimeline object as an item.
		 * @param {string} strID It is a string that represents the ID of an AnimationTimelineItem object to be added to an AnimationTimeline object.
		 * @param {object} objAnimation It is an Animation object in which an animation effect is defined.
		 * @param {number} nOffset It is the length of a delay in an animation. specified in millisecond.

The animation of a current AnimationTimelineItem will be delayed for specified time after the previous animation finishes.
		 * @returns {number} 
		 */
		addTarget(strID: string, objAnimation: object, nOffset: number): number;
		/**
		 * This method is used to delete a AnimationTimeline that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method is used to insert an Animation object into an AnimationTimeline object as an item.
		 * @param {number} nIndex It is a number representing the index number of a position to which an AnimationTimelineItem will be inserted.

An index number ranges from 0 to the number of items.
If you specify an invalid number, the object will be added to the end.
		 * @param {string} strID It is a string that represents the ID of an AnimationTimelineItem object to be inserted into an AnimationTimeline object.
		 * @param {object} objAnimation It is an Animation object in which an animation effect is defined.
		 * @param {number} nOffset It is the length of a delay in an animation. specified in millisecond.

The animation of a current AnimationTimelineItem will be delayed for specified time after the previous animation finishes.
		 */
		insertTarget(nIndex: number, strID: string, objAnimation: object, nOffset: number): null;
		/**
		 * This method is used to pause an ongoing animation.
		 * @returns {boolean} 
		 */
		pause(): boolean;
		/**
		 * This method is used to start an animation.
		 * @returns {boolean} 
		 */
		play(): boolean;
		/**
		 * This method is used to remove an AnimationTimelineItem object that is added as an item of an AnimationTimeline object.
		 * @param {string} strID It is a string that represents the ID of an AnimationTimelineItem object to be removed from the AnimationTimeline object.
		 * @returns {object} 
		 */
		removeTarget(strID: string): object;
		/**
		 * This method is used to reverse the direction of an animation.
		 * @returns {boolean} 
		 */
		reverse(): boolean;
		/**
		 * This method is used to move the playback position of an animation to a certain point.
		 * @param {number} nMSecond It is a number representing the point of time to which the playback position will move.

The number should fall within the range of the entire duration of the animations.
If the number falls outside the range, the number will be adjusted to the minimum or maximum value.
		 * @returns {number} 
		 */
		seek(nMSecond: number): number;
		/**
		 * This method is used to stop an ongoing animation.
		 * @returns {boolean} 
		 */
		stop(): boolean;
	}
}

