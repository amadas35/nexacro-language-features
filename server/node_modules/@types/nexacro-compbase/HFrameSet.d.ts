// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    HFrameSet: nexacro.HFrameSet;
}

    
declare namespace nexacro {
    type HFrameSetOmitKeys = 'accessibilityaction'|'accessibilitydesclevel'|'accessibilitydescription'|'accessibilityenable'|'accessibilitylabel'|'accessibilityrole'|'boxShadow'|'expr'|'id'|'letterSpacing'|'maxheight'|'maxwidth'|'minheight'|'minwidth'|'padding'|'textAlign'|'textDecoration'|'verticalAlign'|'wordWrap'|'parent'|'positionstep'|'rtl'|'taborder'|'tabstop'|'text'|'tooltiptext'|'tooltiptype'|'wordSpacing'|'addEvent'|'bringToFront'|'bringToPrev'|'getDisplayText'|'getFocus'|'getPixelBottom'|'getPixelHeight'|'getPixelLeft'|'getPixelRight'|'getPixelTop'|'getPixelWidth'|'init'|'moveToNext'|'moveToPrev'|'removeEvent'|'resize'|'sendToBack'|'sendToNext'|'onclick'|'oncontextmenu'|'ondblclick'|'ondrag'|'ondragenter'|'ondragleave'|'ondragmove'|'ondrop'|'oninput'|'onkeydown'|'onkeyup'|'onkillfocus'|'onlbuttondown'|'onlbuttonup'|'onmousedown'|'onmouseenter'|'onmouseleave'|'onmousemove'|'onmouseup'|'onmousewheel'|'onrbuttondown'|'onrbuttonup'|'onsetfocus'|'ontouchend'|'ontouchmove'|'ontouchstart';
	
	interface HFrameSet extends Omit<nexacro.Component, HFrameSetOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.HFrameSet;
	    /**
		 * This is a read-only property that holds the frames registered in a HFrameSet.
		 */
		readonly all?: any;
		/**
		 * This property is used to set the background of a HFrameSet.
		 */
		readonly background?: string;
		/**
		 * This property is used to set the shape of the corners of a HFrameSet.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a HFrameSet's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent;
		/**
		 * This property is used to set the color of the text displayed in a HFrameSet.
		 */
		readonly color?: string;
		/**
		 * This property is used to set the style of a HFrameSet by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a HFrameSet.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to determine whether to enable a HFrameSet.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a HFrameSet.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property sets a font used for a HFrameSet.
		 */
		readonly font?: string;
		/**
		 * This is a read-only property that holds a collection of child frames registered in a HFrameSet.
		 */
		readonly frames?: any;
		/**
		 * This property is used to specify the height of a HFrameSet.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent;
		/**
		 * This property is used to set a hotkey for conducting the default action of a HFrameSet.
		 */
		readonly hotkey?: nexacro.Enum.HotKeyModifier;
		/**
		 * This property is used to set the ID of an InitValue to be applied to an HFrameSet.
		 */
		readonly initvalueid?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a HFrameSet's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent;
		/**
		 * This property is used to specify the name of a HFrameSet.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a HFrameSet.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a HFrameSet.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the opacity of a HFrameSet.
		 */
		readonly opacity?: number;
		/**
		 * This property is used to set the direction of filling the progress bar displayed on the status bar of an HFrameSet.
		 */
		readonly progressbardirection?: any;
		/**
		 * This property is used to set the spacing of the right-hand side of a progress bar displayed in the status bar of an HFrameSet.
		 */
		readonly progressbargap?: any;
		/**
		 * This property is used to set the width of a progress bar displayed in the status bar of an HFrameSet.
		 */
		readonly progressbarsize?: any;
		/**
		 * This property is used to determine whether to use a "continuous" style progress bar for the one displayed in the status bar of a MainFrame.
		 */
		readonly progressbarsmooth?: any;
		/**
		 * This property is used to specify the value of the point that indicates the position of a HFrameSet's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent;
		/**
		 * This property is used to set the widths of each child frame of an HFrameSet.
		 */
		readonly separatesize?: string;
		/**
		 * This property is used to determine whether the status bar of an HFrameSet will display the values of the statustext properties of child frames and forms.
		 */
		readonly showcascadestatustext?: any;
		/**
		 * This property is used to determine whether the title bar of a HFrameSet includes the title text of subordinate frames and Forms.
		 */
		readonly showcascadetitletext?: boolean;
		/**
		 * This property is used to determine whether a status bar is displayed in a HFrameSet.
		 */
		readonly showstatusbar?: boolean;
		/**
		 * This property is used to determine whether a title bar is displayed in a HFrameSet.
		 */
		readonly showtitlebar?: boolean;
		/**
		 * This property is used to determine whether to display an icon on the titlebar of a HFrameSet.
		 */
		readonly showtitleicon?: boolean;
		/**
		 * This property holds the status bar of a HFrameSet.
		 */
		readonly statusbar?: object;
		/**
		 * This property is used to set the height of the status bar of a HFrameSet.
		 */
		readonly statusbarheight?: any;
		/**
		 * This property is used to set the text displayed on the status bar of a HFrameSet.
		 */
		readonly statustext?: string;
		/**
		 * This property holds the title bar of a HFrameSet.
		 */
		readonly titlebar?: object;
		/**
		 * This property is used to set the gaps between the system buttons displayed on the title bar of an HFrameSet.
		 */
		readonly titlebarbuttongap?: any;
		/**
		 * This property is used to set the size of the system buttons displayed on the title bar of a HFrameSet.
		 */
		readonly titlebarbuttonsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to set the height of the title bar of a HFrameSet.
		 */
		readonly titlebarheight?: number;
		/**
		 * This property is used to specify the text to be displayed on the title bar of a HFrameSet.
		 */
		readonly titletext?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a HFrameSet's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent;
		/**
		 * This property is used to determine whether to make a HFrameSet visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to specify the width of a HFrameSet.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent;
		/**
		 * This is an event that occurs when an HFrameSet becomes activated.
		 */
		readonly onactivate?: nexacro.EventObject<nexacro.HFrameSet, nexacro.ActivateEventInfo>;
		/**
		 * This is an event that occurs before a HFrameSet is closed.
		 */
		readonly onbeforeclose?: nexacro.EventObject<nexacro.HFrameSet, nexacro.CloseEventInfo>;
		/**
		 * This event occurs when a HFrameSet is closed.
		 */
		readonly onclose?: nexacro.EventObject<nexacro.HFrameSet, nexacro.CloseEventInfo>;
		/**
		 * This is an event that occurs when an HFrameSet becomes deactivated.
		 */
		readonly ondeactivate?: nexacro.EventObject<nexacro.HFrameSet, nexacro.ActivateEventInfo>;
		/**
		 * This event occurs when the position of a HFrameSet changes.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.HFrameSet, nexacro.MoveEventInfo>;
		/**
		 * This event occurs when the orientation of a mobile device's screen changes.
		 */
		readonly onorientationchange?: nexacro.EventObject<nexacro.HFrameSet, nexacro.OrientationChangeEventInfo>;
		/**
		 * This event occurs when the size of a HFrameSet changes.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.HFrameSet, nexacro.SizeEventInfo>;
		/**
		 * This event occurs when a system command message comes into a HFrameSet.
		 */
		readonly onsyscommand?: nexacro.EventObject<nexacro.HFrameSet, nexacro.SysCommandEventInfo>;
		/**
		 * @param {string} v This property is used to set the background of a HFrameSet.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a HFrameSet.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the value of the point that indicates the position of a HFrameSet's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a HFrameSet.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property is used to set the style of a HFrameSet by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a HFrameSet.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a HFrameSet.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a HFrameSet.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {string} v This property sets a font used for a HFrameSet.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the height of a HFrameSet.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * @param {nexacro.Enum.HotKeyModifier} v This property is used to set a hotkey for conducting the default action of a HFrameSet.
		 * @returns {void} 
		 */
		set_hotkey(v: nexacro.Enum.HotKeyModifier): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the value of the point that indicates the position of a HFrameSet's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * @param {string} v This property is used to specify the name of a HFrameSet.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a HFrameSet.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a HFrameSet.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {number} v This property is used to set the opacity of a HFrameSet.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {any} v This property is used to set the direction of filling the progress bar displayed on the status bar of an HFrameSet.
		 * @returns {void} 
		 */
		set_progressbardirection(v: any): void;
		/**
		 * @param {any} v This property is used to set the spacing of the right-hand side of a progress bar displayed in the status bar of an HFrameSet.
		 * @returns {void} 
		 */
		set_progressbargap(v: any): void;
		/**
		 * @param {any} v This property is used to set the width of a progress bar displayed in the status bar of an HFrameSet.
		 * @returns {void} 
		 */
		set_progressbarsize(v: any): void;
		/**
		 * @param {any} v This property is used to determine whether to use a "continuous" style progress bar for the one displayed in the status bar of a MainFrame.
		 * @returns {void} 
		 */
		set_progressbarsmooth(v: any): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the value of the point that indicates the position of a HFrameSet's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * @param {string} v This property is used to set the widths of each child frame of an HFrameSet.
		 * @returns {void} 
		 */
		set_separatesize(v: string): void;
		/**
		 * @param {any} v This property is used to determine whether the status bar of an HFrameSet will display the values of the statustext properties of child frames and forms.
		 * @returns {void} 
		 */
		set_showcascadestatustext(v: any): void;
		/**
		 * @param {boolean} v This property is used to determine whether the title bar of a HFrameSet includes the title text of subordinate frames and Forms.
		 * @returns {void} 
		 */
		set_showcascadetitletext(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether a status bar is displayed in a HFrameSet.
		 * @returns {void} 
		 */
		set_showstatusbar(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether a title bar is displayed in a HFrameSet.
		 * @returns {void} 
		 */
		set_showtitlebar(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to display an icon on the titlebar of a HFrameSet.
		 * @returns {void} 
		 */
		set_showtitleicon(v: boolean): void;
		/**
		 * @param {any} v This property is used to set the height of the status bar of a HFrameSet.
		 * @returns {void} 
		 */
		set_statusbarheight(v: any): void;
		/**
		 * @param {string} v This property is used to set the text displayed on the status bar of a HFrameSet.
		 * @returns {void} 
		 */
		set_statustext(v: string): void;
		/**
		 * @param {any} v This property is used to set the gaps between the system buttons displayed on the title bar of an HFrameSet.
		 * @returns {void} 
		 */
		set_titlebarbuttongap(v: any): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to set the size of the system buttons displayed on the title bar of a HFrameSet.
		 * @returns {void} 
		 */
		set_titlebarbuttonsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {number} v This property is used to set the height of the title bar of a HFrameSet.
		 * @returns {void} 
		 */
		set_titlebarheight(v: number): void;
		/**
		 * @param {string} v This property is used to specify the text to be displayed on the title bar of a HFrameSet.
		 * @returns {void} 
		 */
		set_titletext(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the value of the point that indicates the position of a HFrameSet's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a HFrameSet visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the width of a HFrameSet.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * This method is used to add a dynamically-created frame as a child frame to a HFrameSet.
		 * @param {string} strChildID ID of a child frame to add
		 * @param {object} objFrame It specifies an object to be added as a child frame.
		 * @returns {number} 
		 */
		addChild(strChildID: string, objFrame: object): number;
		/**
		 * This method is used to add a handler to a certain event of a HFrameSet.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a HFrameSet as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to display a alert box of an HFrameSet.
		 * @param {string} strText Text to be displayed on the dialog
		 */
		alert(strText: string): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to display a confirm dialog box of an HFrameSet.
		 * @param {string} strText Text to be displayed on the confirm dialog
		 * @param {string} strCaption Text to be display on the title bar of the confirm dialog
		 * @param {string} strType You can determine type of the icon displayed on the left area of the dialog by entering a string. 

If you enter "error," the box will display an X-shaped icon in red color.
If you enter "question," the box will display a question mark icon.
If you enter "warning," the box will display an exclamation mark icon on a yellow background.
If you enter "information," the box will display an exclamation mark icon on a blue background.

If you do not enter the value, no icon will be displayed.
		 * @returns {boolean} 
		 */
		confirm(strText: string, strCaption?: string, strType?: string): boolean;
		/**
		 * This method is used to delete a HFrameSet that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method finds a handler in a certain event of a HFrameSet and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to return the activated Frame object among the child frames of an HFrameSet.
		 * @returns {object} 
		 */
		getActiveFrame(): object;
		/**
		 * This method returns a specific handler from a certain event of a HFrameSet by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		getNativeHandle(): number;
		/**
		 * This method is used to obtain the bottom position of a HFrameSet in pixel, based on the parent frame's top side.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * This method is used to obtain the height of a HFrameSet in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the left position of a HFrameSet in pixel, based on the parent frame's left side.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * This method is used to obtain the right position of a HFrameSet in pixel, based on the parent frame's left side.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * This method is used to obtain the top position of a HFrameSet in pixel, based on the parent frame's top side.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * This method is used to obtain the width of a HFrameSet in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method is used to return the parent frame to which an HFrameSet belongs.
		 * @returns {object} 
		 */
		getOwnerFrame(): object;
		/**
		 * This method is used to initialize a HFrameSet after the component is created in a script dynamically.
		 * @param {string} strName This is a string that represents the ID of a HFrameSet.
		 * @param {number} nLeft This parameter is used to set the left property of the HFrameSet based on the top-left side of the parent frame.
The value can be expressed in pixel or percent (%).
		 * @param {number} nTop This parameter is used to set the top property of the HFrameSet based on the top-left side of the parent frame.
The value can be expressed in pixel or percent (%).
		 * @param {number} nWidth This parameter is used to set the width property of the HFrameSet.
The value can be expressed in pixel or percent (%).
		 * @param {number} nHeight This parameter is used to set the height property of the HFrameSet.
The value can be expressed in pixel or percent (%).
		 * @param {number} nRight This parameter is used to set the right property of the HFrameSet based on the bottom-right side of the parent frame.
The value can be expressed in pixel or percent (%).
If you set the nLeft and nWidth parameters all, this parameter will be ignored.
		 * @param {number} nBottom This parameter is used to set the bottom property of the HFrameSet based on the bottom-right side of the parent frame.
The value can be expressed in pixel or percent (%).
If you set the nTop and nHeight parameters all, this parameter will be ignored.
		 */
		init(strName: string, nLeft: number, nTop: number, nWidth: number, nHeight: number, nRight?: number, nBottom?: number): null;
		/**
		 * This method is used to insert a dynamically-created frame as a child to a HFrameSet. The frame is added in a specified place in order.
		 * @param {number} nIdx It specifies the index of the place in which a child will be added.
If you specify -1, a child will be added at the end following other child frames.
		 * @param {string} strChildID ID of a child frame to add
		 * @param {object} objComp It specifies an object to be added as a child.
		 * @returns {number} 
		 */
		insertChild(nIdx: number, strChildID: string, objComp: object): number;
		/**
		 * This method is used to add a handler to a certain event of a HFrameSet at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		move(nLeft: any, nTop: any, nWidth?: any, nHeight?: any, nRight?: any, nBottom?: any): null;
		/**
		 * This method is used to remove a frame that has been dynamically added to a HFrameSet.
		 * @param {string} strChildID A string that represents the ID of a frame to remove
		 * @returns {object} 
		 */
		removeChild(strChildID: string): object;
		/**
		 * This method is used to remove a handler in a certain event of a HFrameSet.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a HFrameSet and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the first handler in a certain event of a HFrameSet.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a HFrameSet.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to activate and give a focus to an HFrameSet.
		 * @returns {object} 
		 */
		setFocus(): object;
		/**
		 * This method is used to specify the bottom position of a HFrameSet in pixel when the HFrameSet belongs to a FrameSet.
		 * @param {number} nBottom It is a pixel value representing the bottom position of a HFrameSet, calculated based on the parent FrameSet's top position.
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * This method is used to specify the height of a HFrameSet in pixel when the HFrameSet belongs to a FrameSet.
		 * @param {number} nHeight It is a pixel value representing the height of a HFrameSet.
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * This method is used to specify the left position of a HFrameSet in pixel when the HFrameSet belongs to a FrameSet.
		 * @param {number} nLeft It is a pixel value representing the left position of a HFrameSet, calculated based on the parent FrameSet's left position.
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * This method is used to specify the right position of a HFrameSet in pixel when the HFrameSet belongs to a FrameSet.
		 * @param {number} nRight It is a pixel value representing the right position of a HFrameSet, calculated based on the parent FrameSet's left position.
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * This method is used to specify the top position of a HFrameSet in pixel when the HFrameSet belongs to a FrameSet.
		 * @param {number} nTop It is a pixel value representing the top position of a HFrameSet, calculated based on the parent FrameSet's top position.
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * This method is used to specify the width of a HFrameSet in pixel when the HFrameSet belongs to a FrameSet.
		 * @param {number} nWidth It is a pixel value representing the width of a HFrameSet.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * This method is used to display a HFrameSet on the screen. The HFrameSet mentioned here refers to the one that is dynamically created through a script.
		 */
		show(): null;
	}
}

