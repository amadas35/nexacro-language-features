// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    Component: nexacro.Component;
}

    
declare namespace nexacro {
    type ComponentOmitKeys = 'id';
	
	interface Component extends Omit<nexacro.EventSinkObject, ComponentOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.Component;
	    readonly accessibilityaction?: string;
		readonly accessibilitydesclevel?: nexacro.Enum.DescLevel;
		readonly accessibilitydescription?: string;
		readonly accessibilityenable?: boolean;
		readonly accessibilitylabel?: string;
		readonly accessibilityrole?: nexacro.Enum.Role;
		/**
		 * This property is used to set a background of a component.
		 */
		readonly background?: any;
		/**
		 * This property is used to set the shape of the corners of a XComponent.
		 */
		readonly borderRadius?: string;
		/**
		 * It is a property to set the coordinate of the bottomof a newly created XComponent.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the shadow effect of an XComponent.
		 */
		readonly boxShadow?: any;
		/**
		 * This property is used to set the color of the text displayed in an XComponent.
		 */
		readonly color?: string;
		/**
		 * It is Property to designate a style of XComponent with class of CSS.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in an XComponent.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to determine whether to enable an XComponent.
		 */
		readonly enable?: boolean;
		/**
		 * It is Property to determine whether to generate Event of XComponent.
		 */
		readonly enableevent?: boolean;
		/**
		 * It is a property to designate text of an XComponent as a nmeric formula.
		 */
		readonly expr?: string;
		/**
		 * XComponent에서 사용하는 폰트를 설정하는 속성입니다.
		 */
		readonly font?: string;
		/**
		 * XComponent height of the newly created.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * It is a property to set hot keys for default actions of XComponents.
		 */
		readonly hotkey?: nexacro.Enum.HotKeyModifier;
		readonly initvalueid?: string;
		/**
		 * XComponent left coordinate of the newly created.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between characters (kerning) displayed in an XComponent.
		 */
		readonly letterSpacing?: any;
		readonly maxheight?: any;
		readonly maxwidth?: any;
		readonly minheight?: any;
		readonly minwidth?: any;
		/**
		 * It designates names of components.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of an XComponent.
		 */
		readonly border?: string;
		/**
		 * XComponent의 테두리 안쪽에 edge 이미지를 설정하는 속성입니다.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the padding, an inner margin, of an XComponent.
		 */
		readonly padding?: string;
		/**
		 * XComponent 에 표시되는 텍스트 또는 컨텐츠의 가로 정렬 방식을 설정하는 속성입니다.
		 */
		readonly textAlign?: nexacro.Enum.HorizontalAlign;
		/**
		 * XComponent 에 표시되는 텍스트에 적용할 효과를 설정하는 속성입니다.
		 */
		readonly textDecoration?: string;
		/**
		 * XComponent에 표시되는 텍스트 또는 컨텐츠의 세로 정렬 방식을 설정하는 속성입니다.
		 */
		readonly verticalAlign?: nexacro.Enum.VerticalAlign;
		/**
		 * XComponent 에 표시되는 텍스트가 출력영역보다 길 경우 자동으로 줄바꿈 되도록 설정하는 속성입니다.
		 */
		readonly wordWrap?: nexacro.Enum.WordWrapType;
		/**
		 * This property is used to set the opacity of an XComponent.
		 */
		readonly opacity?: number;
		/**
		 * It indicates the parent object of a component.
		 */
		readonly parent?: object;
		/**
		 * It is Property to designate which Step belonging Form, Div, Tabpage, or PopupDiv belong to when they use Step function.
		 */
		readonly positionstep?: number;
		/**
		 * XComponent right coordinate of the newly created.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to define the direction of printing internal contents or components in a Component.
		 */
		readonly rtl?: boolean;
		/**
		 * It is Property to designate movement order of focus by Tab key which Component has in Form.
		 */
		readonly taborder?: number;
		/**
		 * It is Property to designate whether to receive focus by Tab key.
		 */
		readonly tabstop?: boolean;
		/**
		 * It is Property to designate a value to show in Component.
		 */
		readonly text?: string;
		/**
		 * It is Property to designate Tool Tip to show when a mouse pointer is on Component.
		 */
		readonly tooltiptext?: string;
		/**
		 * It is Property to designate a method to output Tool tip.
		 */
		readonly tooltiptype?: nexacro.Enum.TooltipType;
		/**
		 * XComponent top coordinate of the newly created.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * It is Property to designate whether to show XComponent in screen.
		 */
		readonly visible?: boolean;
		/**
		 * XComponent width of the newly created.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`;
		/**
		 * This property is used to set the spacing between words displayed in an XComponent.
		 */
		readonly wordSpacing?: any;
		/**
		 * XComponent 영역 내에서 마우스 왼쪽버튼을 클릭했을 때 발생하는 이벤트입니다.
		 */
		readonly onclick?: nexacro.EventObject<nexacro.Component, nexacro.ClickEventInfo>;
		readonly oncontextmenu?: nexacro.EventObject<object, nexacro.EventInfo>;
		/**
		 * XComponent 영역 내에서 마우스 왼쪽버튼을 더블클릭 했을 때 발생하는 이벤트입니다.
		 */
		readonly ondblclick?: nexacro.EventObject<nexacro.Component, nexacro.MouseEventInfo>;
		/**
		 * It is Event to occur when drag situation occurs by a mouse in Component area.
		 */
		readonly ondrag?: nexacro.EventObject<nexacro.Component, nexacro.DragEventInfo>;
		/**
		 * It is Event to occur when dragged Component enters into Component area.
		 */
		readonly ondragenter?: nexacro.EventObject<nexacro.Component, nexacro.DragEventInfo>;
		/**
		 * It is Event to occur when dragged Component goes out of Component area.
		 */
		readonly ondragleave?: nexacro.EventObject<nexacro.Component, nexacro.DragEventInfo>;
		/**
		 * It is Event to occur when a dragged mouse moves in Component area.
		 */
		readonly ondragmove?: nexacro.EventObject<nexacro.Component, nexacro.DragEventInfo>;
		/**
		 * It occurs when you drop down a dragged component into the component area.
		 */
		readonly ondrop?: nexacro.EventObject<nexacro.Component, nexacro.DragEventInfo>;
		/**
		 * XComponent 에 키보드로 값이 입력될 때 발생하는 이벤트 입니다.
		 */
		readonly oninput?: nexacro.EventObject<nexacro.Component, nexacro.InputEventInfo>;
		/**
		 * It is Event to occur when a Key of a keyboard is pressed while Focus is in XComponent.
		 */
		readonly onkeydown?: nexacro.EventObject<nexacro.Component, nexacro.KeyEventInfo>;
		/**
		 * It occurs when a keyboard key is pressed and released while an XComponent has focus.
		 */
		readonly onkeyup?: nexacro.EventObject<nexacro.Component, nexacro.KeyEventInfo>;
		/**
		 * It is Event to occur when XComponent in which Focus is located loses Focus.
		 */
		readonly onkillfocus?: nexacro.EventObject<nexacro.Component, nexacro.KillFocusEventInfo>;
		/**
		 * It is Event to occur when Mouse Left Button Down occurs in XComponent.
		 */
		readonly onlbuttondown?: nexacro.EventObject<nexacro.Component, nexacro.MouseEventInfo>;
		/**
		 * It is Event to occur when Mouse Left Button Up occurs in XComponent.
		 */
		readonly onlbuttonup?: nexacro.EventObject<nexacro.Component, nexacro.MouseEventInfo>;
		/**
		 * It is Event to occur when the other Buttons are pressed except for Left Button/Right Button of a mouse.
		 */
		readonly onmousedown?: nexacro.EventObject<nexacro.Component, nexacro.MouseEventInfo>;
		/**
		 * It is Event to occur when a cursor of a mouse enters into XComponent area.
		 */
		readonly onmouseenter?: nexacro.EventObject<nexacro.Component, nexacro.MouseEventInfo>;
		/**
		 * It is Event to occur when a cursor of a mouse goes out of XComponent area.
		 */
		readonly onmouseleave?: nexacro.EventObject<nexacro.Component, nexacro.MouseEventInfo>;
		/**
		 * It is Event to occur when a cursor of a mouse moves in XComponent area.
		 */
		readonly onmousemove?: nexacro.EventObject<nexacro.Component, nexacro.MouseEventInfo>;
		/**
		 * It is Event to occur when the other Buttons are pressed and released except for Left Button/Right Button of a mouse.
		 */
		readonly onmouseup?: nexacro.EventObject<nexacro.Component, nexacro.MouseEventInfo>;
		/**
		 * It occurs when you scroll your mouse wheel.
		 */
		readonly onmousewheel?: nexacro.EventObject<nexacro.Component, nexacro.MouseWheelEventInfo>;
		/**
		 * It is Event to occur when XComponent moves.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.Component, nexacro.MoveEventInfo>;
		/**
		 * It is Event to occur when Mouse Right Button Down occurs in XComponent.
		 */
		readonly onrbuttondown?: nexacro.EventObject<nexacro.Component, nexacro.MouseEventInfo>;
		/**
		 * It is Event to occur when Mouse Right Button Up occurs in XComponent.
		 */
		readonly onrbuttonup?: nexacro.EventObject<nexacro.Component, nexacro.MouseEventInfo>;
		/**
		 * It is Event to occur when Focus is set to XComponent.
		 */
		readonly onsetfocus?: nexacro.EventObject<nexacro.Component, nexacro.SetFocusEventInfo>;
		/**
		 * It is Event to occur when XComponent size is changed.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.Component, nexacro.SizeEventInfo>;
		/**
		 * It occurs at the time of touch end(up).
		 */
		readonly ontouchend?: nexacro.EventObject<nexacro.Component, nexacro.TouchEventInfo>;
		/**
		 * It occurs during touches(move).
		 */
		readonly ontouchmove?: nexacro.EventObject<nexacro.Component, nexacro.TouchEventInfo>;
		/**
		 * It occurs at the time of touch start(down)
		 */
		readonly ontouchstart?: nexacro.EventObject<nexacro.Component, nexacro.TouchEventInfo>;
		set_accessibilityaction(v: string): void;
		set_accessibilitydesclevel(v: nexacro.Enum.DescLevel): void;
		set_accessibilitydescription(v: string): void;
		set_accessibilityenable(v: boolean): void;
		set_accessibilitylabel(v: string): void;
		set_accessibilityrole(v: nexacro.Enum.Role): void;
		/**
		 * @param {any} v This property is used to set a background of a component.
		 * @returns {void} 
		 */
		set_background(v: any): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a XComponent.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v It is a property to set the coordinate of the bottomof a newly created XComponent.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {any} v This property is used to set the shadow effect of an XComponent.
		 * @returns {void} 
		 */
		set_boxShadow(v: any): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in an XComponent.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v It is Property to designate a style of XComponent with class of CSS.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in an XComponent.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable an XComponent.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v It is Property to determine whether to generate Event of XComponent.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {string} v It is a property to designate text of an XComponent as a nmeric formula.
		 * @returns {void} 
		 */
		set_expr(v: string): void;
		/**
		 * @param {string} v XComponent에서 사용하는 폰트를 설정하는 속성입니다.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v XComponent height of the newly created.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {nexacro.Enum.HotKeyModifier} v It is a property to set hot keys for default actions of XComponents.
		 * @returns {void} 
		 */
		set_hotkey(v: nexacro.Enum.HotKeyModifier): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v XComponent left coordinate of the newly created.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {any} v This property is used to set the spacing between characters (kerning) displayed in an XComponent.
		 * @returns {void} 
		 */
		set_letterSpacing(v: any): void;
		set_maxheight(v: any): void;
		set_maxwidth(v: any): void;
		set_minheight(v: any): void;
		set_minwidth(v: any): void;
		/**
		 * @param {string} v It designates names of components.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of an XComponent.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v XComponent의 테두리 안쪽에 edge 이미지를 설정하는 속성입니다.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {string} v This property is used to set the padding, an inner margin, of an XComponent.
		 * @returns {void} 
		 */
		set_padding(v: string): void;
		/**
		 * @param {nexacro.Enum.HorizontalAlign} v XComponent 에 표시되는 텍스트 또는 컨텐츠의 가로 정렬 방식을 설정하는 속성입니다.
		 * @returns {void} 
		 */
		set_textAlign(v: nexacro.Enum.HorizontalAlign): void;
		/**
		 * @param {string} v XComponent 에 표시되는 텍스트에 적용할 효과를 설정하는 속성입니다.
		 * @returns {void} 
		 */
		set_textDecoration(v: string): void;
		/**
		 * @param {nexacro.Enum.VerticalAlign} v XComponent에 표시되는 텍스트 또는 컨텐츠의 세로 정렬 방식을 설정하는 속성입니다.
		 * @returns {void} 
		 */
		set_verticalAlign(v: nexacro.Enum.VerticalAlign): void;
		/**
		 * @param {nexacro.Enum.WordWrapType} v XComponent 에 표시되는 텍스트가 출력영역보다 길 경우 자동으로 줄바꿈 되도록 설정하는 속성입니다.
		 * @returns {void} 
		 */
		set_wordWrap(v: nexacro.Enum.WordWrapType): void;
		/**
		 * @param {number} v This property is used to set the opacity of an XComponent.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {number} v It is Property to designate which Step belonging Form, Div, Tabpage, or PopupDiv belong to when they use Step function.
		 * @returns {void} 
		 */
		set_positionstep(v: number): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v XComponent right coordinate of the newly created.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {number} v It is Property to designate movement order of focus by Tab key which Component has in Form.
		 * @returns {void} 
		 */
		set_taborder(v: number): void;
		/**
		 * @param {boolean} v It is Property to designate whether to receive focus by Tab key.
		 * @returns {void} 
		 */
		set_tabstop(v: boolean): void;
		/**
		 * @param {string} v It is Property to designate a value to show in Component.
		 * @returns {void} 
		 */
		set_text(v: string): void;
		/**
		 * @param {string} v It is Property to designate Tool Tip to show when a mouse pointer is on Component.
		 * @returns {void} 
		 */
		set_tooltiptext(v: string): void;
		/**
		 * @param {nexacro.Enum.TooltipType} v It is Property to designate a method to output Tool tip.
		 * @returns {void} 
		 */
		set_tooltiptype(v: nexacro.Enum.TooltipType): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v XComponent top coordinate of the newly created.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {boolean} v It is Property to designate whether to show XComponent in screen.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`)} v XComponent width of the newly created.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent | `${string}:${nexacro.Unit.PixelPercent}`): void;
		/**
		 * @param {any} v This property is used to set the spacing between words displayed in an XComponent.
		 * @returns {void} 
		 */
		set_wordSpacing(v: any): void;
		/**
		 * This method is used to declare a certain event and then add it to a XComponent.
		 * @param {string} strEventID This is a string that represents the ID of an event to add to the XComponent.
		 * @returns {boolean} 
		 */
		addEvent(strEventID: string): boolean;
		/**
		 * It adds an event handler function.
		 * @param {string} strEventID Event ID
		 * @param {object} objFunc Event handler function
		 * @param {object} objTarget Target scope
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * It adds an event handler as a result searched with a designated event ID.
		 * @param {string} strEventID Event ID
		 * @param {string} strFunc 이벤트 발생 시 수행될 핸들러 함수의 이름을 문자열로 설정합니다.
		 * @param {object} objTarget target scope
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * It is method to change the order to draw Component to the first position of same level Components.
		 */
		bringToFront(): null;
		/**
		 * It is method to change the order to draw Component to the next front position of same level Components.
		 */
		bringToPrev(): null;
		/**
		 * It clears all set event handler functions.
		 * @param {string} strEventID Event ID
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to delete a component that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * It finds a designated event handler function and returns the index.
		 * @param {string} strEventID Event ID
		 * @param {object} objFunc Event handler function object to find
		 * @param {object} objTarget Target scope
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns the text displayed in a Component.
		 * @returns {string} 
		 */
		getDisplayText(): string;
		/**
		 * It is a method to return the specified event handler function.
		 * @param {string} strEventID Event ID
		 * @param {number} nIdx Index of the event handler function (Zero-based index)
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * It returns a component which has focus.
		 * @returns {object} 
		 */
		getFocus(): object;
		/**
		 * It gets pixel values of the bottom property among XComponent location information.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * It gets pixel values of the height property among XComponent location information.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * It gets pixel values of the left property among XComponent location information.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * It gets pixel values of the right property among XComponent location information.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * It gets pixel values of the top property among XComponent location information.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * It gets pixel values of the width property among XComponent location information.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * IIt gets pixel values of the bottom property among XComponent location information.
		 * @returns {number} 
		 */
		getPixelBottom(): number;
		/**
		 * It gets pixel values of the height property among XComponent location information.
		 * @returns {number} 
		 */
		getPixelHeight(): number;
		/**
		 * It gets pixel values of the left property among XComponent location information.
		 * @returns {number} 
		 */
		getPixelLeft(): number;
		/**
		 * It gets pixel values of the right property among XComponent location information.
		 * @returns {number} 
		 */
		getPixelRight(): number;
		/**
		 * It gets pixel values of the top property among XComponent location information.
		 * @returns {number} 
		 */
		getPixelTop(): number;
		/**
		 * It gets pixel values of the width property among XComponent location information.
		 * @returns {number} 
		 */
		getPixelWidth(): number;
		/**
		 * This method is used to initialize a XComponent after creating it in a script dynamically.
		 * @param {string} strName It sets the ID of a XComponent in the form of a string.
		 * @param {(string|number)} vLeft It specifies the value of the left property of a XComponent in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the right property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vTop It specifies the value of the top property of a XComponent in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the bottom property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vWidth It specifies the value of the width property of a XComponent in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vHeight It specifies the value of the height property of a XComponent in pixel or percent (%).

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be specified in pixel while the base component will be ignored.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vRight It specifies the value of the right property of a XComponent in pixel or percent (%).

This parameter will be ignored if both the vLeft and vWidth parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the left property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the width property of the base component.
		 * @param {(string|number)} vBottom It specifies the value of the bottom property of a XComponent in pixel or percent (%).

This parameter will be ignored if both the vTop and vHeight parameters are all specified.

* When you include a base component in the argument:
If you use a pixel as an unit, this parameter will be determined based on the top property of the base component.
If you use a percentage (%) as an unit, this parameter will be determined based on the height property of the base component.
		 * @param {(string|number)} vMinWidth It specifies a XComponent's minimum width that can be displayed in the Form.
		 * @param {(string|number)} vMaxWidth It specifies a XComponent's maximum width that can be displayed in the Form.

If this value is smaller than vMinWidth, it will be replaced by the value of vMinWidth.
		 * @param {(string|number)} vMinHeight It specifies a XComponent's minimum height that can be displayed in the Form.
		 * @param {(string|number)} vMaxHeight It specifies a XComponent's maximum height that can be displayed in the Form.

If this value is smaller than vMinHeight, it will be replaced by the value of vMinHeight.
		 */
		init(strName: string, vLeft: string|number, vTop: string|number, vWidth: string|number, vHeight: string|number, vRight?: string|number, vBottom?: string|number, vMinWidth?: string|number, vMaxWidth?: string|number, vMinHeight?: string|number, vMaxHeight?: string|number): null;
		/**
		 * This method is used to add a handler to a certain event of a XComponent at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * It moves a component into a specific location in specific size.
		 * @param {number} nLeft left coordinate to locate a component.
		 * @param {number} nTop top coordinate to locate a component.
		 * @param {number} nWidth width of a component
		 * @param {number} nHeight height of a component
		 * @param {number} nRight right coordinate to locate a component.
		 * @param {number} nBottom bottom coordinate to locate a component.
		 */
		move(nLeft: number, nTop: number, nWidth?: number, nHeight?: number, nRight?: number, nBottom?: number): null;
		/**
		 * It changes the order to draw a component to the next back position based on a component given as an argument.
		 * @param {object} objComp It is a target component object.
		 */
		moveToNext(objComp: object): null;
		/**
		 * It changes the order to draw a component to the next back position based on a component given as an argument.
		 * @param {string} strComp It is a character string value of the target component ID
		 */
		moveToNext(strComp: string): null;
		/**
		 * It changes the order to draw a component to the prior front position based on a component given as an argument.
		 * @param {object} objComp It is a target component object.
		 */
		moveToPrev(objComp: object): null;
		/**
		 * It changes the order to draw a component to the prior front position based on a component given as an argument.
		 * @param {string} strComp It is a character string value of the target component ID
		 */
		moveToPrev(strComp: string): null;
		/**
		 * This method is used to remove a certain event that is declared in a XComponent.
		 * @param {string} strEventID This is a string that represents the ID of an event to remove from the XComponent.
		 * @returns {boolean} 
		 */
		removeEvent(strEventID: string): boolean;
		/**
		 * It removes a designated index or an event handler function.
		 * @param {string} strEventID event ID
		 * @param {object} objFunc event handler function item to remove
		 * @param {object} objTarget target scope
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * It removes an event handler lookup with a designated event ID.
		 * @param {string} strEventID Event ID
		 * @param {string} strFunc 제거할 핸들러 함수의 이름을 문자열로 설정합니다.
		 * @param {object} objTarget Target scope
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * It is Method to change size of XComponent.
		 * @param {number} nWidth It is length to change.
		 * @param {number} nHeight It is length to change.
		 */
		resize(nWidth: number, nHeight: number): null;
		/**
		 * It is method to change the order to draw Component to the last position of same level Components.
		 */
		sendToBack(): null;
		/**
		 * It is method to change the order to draw Component to the next back position of same level Components.
		 */
		sendToNext(): null;
		/**
		 * It changes an event handler function.
		 * @param {string} strEventID Event ID
		 * @param {object} objFunc Event handler function
		 * @param {object} objTarget target scope
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * It sets an event handler lookup with a designated event ID.
		 * @param {string} strEventID Event ID
		 * @param {string} strFunc Event handler function
		 * @param {object} objTarget target scope
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * It gives a focus to an XComponent.
		 * @param {boolean} bMoveScroll If scrolling is enabled in the parent component, it will determine whether to scroll based on the XComponent.

For "true", the parent component will scroll so that the XComponent will show.
For "false", the parent component will not scroll regardless of the XComponent's position.

The default value is "true".
		 * @param {boolean} bInnerFocus If a XComponent is a container component, this parameter determines whether to move focus to a child component.

For "true", focus will be given to the first child component that can receive focus.
For "false", focus will be given to the XComponent.

The default value is "true" if a XComponent is a container component.
		 * @returns {object} 
		 */
		setFocus(bMoveScroll?: boolean, bInnerFocus?: boolean): object;
		/**
		 * Set the value of the bottom relative to the left, top value of the XComponent parent object.
		 * @param {number} nBottom numeric value
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * Set the value of the height relative to the left, top value of the XComponent parent object.
		 * @param {number} nHeight numeric value
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * Set the value of the left relative to the left, top value of the XComponent parent object.
		 * @param {number} nLeft numeric value
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * Set the value of the right relative to the left, top value of the XComponent parent object.
		 * @param {number} nRight numeric value
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * Set the value of the top relative to the left, top value of the XComponent parent object.
		 * @param {number} nTop numeric value
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * Set the value of the width relative to the left, top value of the XComponent parent object.
		 * @param {number} nWidth The numeric values​​.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * It is Method to actually show XComponent which is dynamically generated in Script.
		 */
		show(): null;
	}
}

