// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    Form: nexacro.Form;
}

    
declare namespace nexacro {
    type FormOmitKeys = 'bottom'|'boxShadow'|'expr'|'hotkey'|'id'|'left'|'maxheight'|'maxwidth'|'minheight'|'minwidth'|'padding'|'textAlign'|'textDecoration'|'verticalAlign'|'wordWrap'|'positionstep'|'right'|'taborder'|'tabstop'|'text'|'top'|'addEvent'|'bringToFront'|'bringToPrev'|'destroy'|'getDisplayText'|'getOffsetBottom'|'getOffsetLeft'|'getOffsetRight'|'getOffsetTop'|'getPixelBottom'|'getPixelHeight'|'getPixelLeft'|'getPixelRight'|'getPixelTop'|'getPixelWidth'|'init'|'move'|'moveToNext'|'moveToPrev'|'removeEvent'|'resize'|'sendToBack'|'sendToNext'|'setOffsetBottom'|'setOffsetHeight'|'setOffsetLeft'|'setOffsetRight'|'setOffsetTop'|'setOffsetWidth'|'show'|'ondblclick'|'oninput';
	
	interface Form extends Omit<nexacro.Component, FormOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.Form;
	    /**
		 * This property is used to specify the action printed as an accessibility feature when a selection box moves to a Form.
		 */
		readonly accessibilityaction?: string;
		/**
		 * This property is used to determine whether to print accessibility features of the children when a selection box moves to a Form.
		 */
		readonly accessibilitydesclevel?: nexacro.Enum.DescLevel;
		/**
		 * This property is used to specify the description printed as an accessibility feature when a selection box moves to a Form.
		 */
		readonly accessibilitydescription?: string;
		/**
		 * This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a Form.
		 */
		readonly accessibilityenable?: boolean;
		/**
		 * This property is used to specify the label printed as an accessibility feature when a selection box moves to a Form.
		 */
		readonly accessibilitylabel?: string;
		/**
		 * This property is used to set the role of a Form. The role is printed as accessibility functionality when a selection box moves to the component.
		 */
		readonly accessibilityrole?: nexacro.Enum.Role;
		/**
		 * This is a read-only property that holds all the objects registered in a certain Form.
		 */
		readonly all?: object;
		/**
		 * This property is used to set the background of a Form.
		 */
		readonly background?: string;
		/**
		 * This read-only property holds the information on the binding of components and Datasets registered in a Form.
		 */
		readonly binds?: object;
		/**
		 * This property is used to set the shape of the corners of a Form.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to set the color of the text displayed in a Form.
		 */
		readonly color?: string;
		/**
		 * This read-only property holds all the components registered in a Form.
		 */
		readonly components?: object;
		/**
		 * This property is used to set the style of a Form by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a Form.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property is used to determine the directions of scrolling, caused by a user touching and dragging a Form.
		 */
		readonly dragscrolltype?: nexacro.Enum.DragScrollType;
		/**
		 * This property is used to determine whether to enable a Form.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a Form.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property sets a font used for a Form.
		 */
		readonly font?: string;
		/**
		 * This property is used to specify the height of a Form.
		 */
		readonly height?: number;
		/**
		 * This read-only property holds the horizontal scrollbar sub-control of a Form.
		 */
		readonly hscrollbar?: object;
		/**
		 * This property is used to set the ID of an InitValue to be applied to an Form.
		 */
		readonly initvalueid?: string;
		/**
		 * This property is used to set the spacing between characters (kerning) displayed in a Form.
		 */
		readonly letterSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This property is used to set a locale applied to a Form.
		 */
		readonly locale?: nexacro.Enum.LocaleCode;
		/**
		 * This property is used to specify the name of a Form.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a Form.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a Form.
		 */
		readonly edge?: string;
		/**
		 * This read-only property holds all the invisible objects registered in a Form.
		 */
		readonly objects?: object;
		/**
		 * This property is used to set the opacity of a Form.
		 */
		readonly opacity?: number;
		/**
		 * This read-only property holds the parent Form of a currently-displayed Form.
		 */
		readonly opener?: object;
		/**
		 * This read-only property holds the parent object of a Form.
		 */
		readonly parent?: object;
		/**
		 * This property is used to define the direction of printing internal contents or components in a Form.
		 */
		readonly rtl?: boolean;
		/**
		 * This property is used to specify the minimum size of the TrackBar control of a scrollbar displayed in a Form.
		 */
		readonly scrollbarbarminsize?: number;
		/**
		 * This property is used to specify the base size of a scrollbar where the track bar will disappear if the form becomes smaller than the specified size.
		 */
		readonly scrollbarbaroutsize?: number;
		/**
		 * This property is used to size the decreasing button (DecButton control) of a scrollbar displayed in a Form.
		 */
		readonly scrollbardecbuttonsize?: number;
		/**
		 * This property is used to size the increasing button (IncButton control) of a scrollbar displayed in a Form.
		 */
		readonly scrollbarincbuttonsize?: number;
		/**
		 * This property is used to size the scrollbar displayed in a Form.
		 */
		readonly scrollbarsize?: number;
		/**
		 * This property is used to size the TrackBar control of a scrollbar displayed in a Form.
		 */
		readonly scrollbartrackbarsize?: number;
		/**
		 * This property determines how scrollbars work in a Form.
		 */
		readonly scrollbartype?: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`;
		/**
		 * This property is used to set the size of the scroll indicator bars displayed in a Form.
		 */
		readonly scrollindicatorsize?: number;
		/**
		 * This property is used to set the types of scrolling applied to a Form.
		 */
		readonly scrolltype?: nexacro.Enum.ScrollType;
		/**
		 * This property is used to specify the text to be displayed on the status bar of a frame at a higher level.
		 */
		readonly statustext?: string;
		/**
		 * This property is used to set the position of a step control when a form is divided into multiple step pages.
		 */
		readonly stepalign?: nexacro.Enum.HorizontalAlign | `${nexacro.Enum.HorizontalAlign} ${nexacro.Enum.VerticalAlign}`;
		/**
		 * This property is used to specify the gap between radio buttons displayed on the StepControl object. Those radio buttons appear when the form is divided.
		 */
		readonly stepitemgap?: number;
		/**
		 * This property is used to specify the size of step buttons, which take the form of a radio button.
		 */
		readonly stepitemsize?: number;
		/**
		 * This is a read-only property that holds the step control of the current page.
		 */
		readonly stepselector?: object;
		/**
		 * This property is used to define the conditions for the appearance of a step control when a form is divided into multiple step pages.
		 */
		readonly stepshowtype?: nexacro.Enum.StepShowType;
		/**
		 * This property is used to specify the text to be displayed on the title bar of a frame at a higher level.
		 */
		readonly titletext?: string;
		/**
		 * This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a Form.
		 */
		readonly tooltiptext?: string;
		/**
		 * This property is used to specify the position and type of a tooltip that appears in a Form.
		 */
		readonly tooltiptype?: nexacro.Enum.TooltipType;
		/**
		 * This property is used to determine whether to make a Form visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This read-only property holds the vertical scrollbar sub-control of a Form.
		 */
		readonly vscrollbar?: object;
		/**
		 * This property is used to specify the width of a Form.
		 */
		readonly width?: number;
		/**
		 * This property is used to set the spacing between words displayed in a Form.
		 */
		readonly wordSpacing?: nexacro.Unit.PixelNegative;
		/**
		 * This event occurs when the Layout of a Form changes.
		 */
		readonly canlayoutchange?: nexacro.EventObject<nexacro.Form, nexacro.LayoutChangeEventInfo>;
		/**
		 * This event occurs when a step page shifts in a form that is divided into multiple step pages.
		 */
		readonly canstepchange?: nexacro.EventObject<nexacro.Form, nexacro.StepChangeEventInfo>;
		/**
		 * This event occurs when a Form is activated.
		 */
		readonly onactivate?: nexacro.EventObject<nexacro.Form, nexacro.ActivateEventInfo>;
		/**
		 * This is an event that occurs before a Form is closed.
		 */
		readonly onbeforeclose?: nexacro.EventObject<nexacro.Form, nexacro.CloseEventInfo>;
		/**
		 * This event occurs when a component is altered due to the change in the bound Dataset.
		 */
		readonly onbindingvaluechanged?: nexacro.EventObject<nexacro.Form, nexacro.BindingValueChangedEventInfo>;
		/**
		 * This event occurs when the left button of a mouse is clicked within a Form.
		 */
		readonly onclick?: nexacro.EventObject<nexacro.Form, nexacro.ClickEventInfo>;
		/**
		 * This event occurs when a Form is terminated or switched to another Form.
		 */
		readonly onclose?: nexacro.EventObject<nexacro.Form, nexacro.CloseEventInfo>;
		/**
		 * This event occurs when you right-click a Form or touch a Form for a certain duration.
		 */
		readonly oncontextmenu?: nexacro.EventObject<nexacro.Form, nexacro.ContextMenuEventInfo>;
		/**
		 * This is an event that occurs when an Form becomes deactivated.
		 */
		readonly ondeactivate?: nexacro.EventObject<nexacro.Form, nexacro.ActivateEventInfo>;
		readonly ondevicebuttonup?: nexacro.EventObject<nexacro.Form, nexacro.DeviceButtonEventInfo>;
		/**
		 * This event occurs when you conduct a dragging action by pressing the left button of a mousewithin a Form.
		 */
		readonly ondrag?: nexacro.EventObject<nexacro.Form, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a Form while the pointer is dragging an object.
		 */
		readonly ondragenter?: nexacro.EventObject<nexacro.Form, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a Form while the pointer is dragging an object.
		 */
		readonly ondragleave?: nexacro.EventObject<nexacro.Form, nexacro.DragEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves while the pointer is dragging an object within a Form.
		 */
		readonly ondragmove?: nexacro.EventObject<nexacro.Form, nexacro.DragEventInfo>;
		/**
		 * This event occurs when you release a mouse button within the area of a Form after you have pressed the button to drag an object.
		 */
		readonly ondrop?: nexacro.EventObject<nexacro.Form, nexacro.DragEventInfo>;
		/**
		 * This event occurs when an error occurs in a transaction conducted in a Form.
		 */
		readonly onerror?: nexacro.EventObject<nexacro.Form, nexacro.ErrorEventInfo>;
		/**
		 * This event occurs when another event is delivered to a device defined in the DeviceAdaptors field.
		 */
		readonly onextendedcommand?: nexacro.EventObject<nexacro.Form, nexacro.ExtendedCommandEventInfo>;
		/**
		 * This event occurs when you move the horizontal scrollbar of a Form.
		 */
		readonly onhscroll?: nexacro.EventObject<nexacro.Form, nexacro.ScrollEventInfo>;
		/**
		 * This event occurs when a Form has been initialized.
		 */
		readonly oninit?: nexacro.EventObject<nexacro.Form, nexacro.EventInfo>;
		/**
		 * This event occurs when you press a key with a Form focused.
		 */
		readonly onkeydown?: nexacro.EventObject<nexacro.Form, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when you release a key with a Form focused.
		 */
		readonly onkeyup?: nexacro.EventObject<nexacro.Form, nexacro.KeyEventInfo>;
		/**
		 * This event occurs when focus moves out of a Form.
		 */
		readonly onkillfocus?: nexacro.EventObject<nexacro.Form, nexacro.KillFocusEventInfo>;
		/**
		 * This event occurs after the Layout of a Form changes.
		 */
		readonly onlayoutchanged?: nexacro.EventObject<nexacro.Form, nexacro.LayoutChangeEventInfo>;
		/**
		 * This event occurs when you press the left button of a mouse within the area of a Form.
		 */
		readonly onlbuttondown?: nexacro.EventObject<nexacro.Form, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release the left button of a mouse within the area of a Form.
		 */
		readonly onlbuttonup?: nexacro.EventObject<nexacro.Form, nexacro.MouseEventInfo>;
		/**
		 * This event occurs after all the components and data of a Form are loaded.
		 */
		readonly onload?: nexacro.EventObject<nexacro.Form, nexacro.LoadEventInfo>;
		/**
		 * This event occurs when a mouse pointer enters a Form.
		 */
		readonly onmouseenter?: nexacro.EventObject<nexacro.Form, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves out of a Form.
		 */
		readonly onmouseleave?: nexacro.EventObject<nexacro.Form, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when a mouse pointer moves within a Form.
		 */
		readonly onmousemove?: nexacro.EventObject<nexacro.Form, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you rotates your mouse wheel within a Form.
		 */
		readonly onmousewheel?: nexacro.EventObject<nexacro.Form, nexacro.MouseWheelEventInfo>;
		/**
		 * This event occurs when the position of a Form changes.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.Form, nexacro.MoveEventInfo>;
		/**
		 * This event occurs when the orientation of a mobile device's screen changes.
		 */
		readonly onorientationchange?: nexacro.EventObject<nexacro.Form, nexacro.OrientationChangeEventInfo>;
		/**
		 * This event occurs when you press the right button of a mouse within the area of a Form.
		 */
		readonly onrbuttondown?: nexacro.EventObject<nexacro.Form, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when you release the right button of a mouse within the area of a Form.
		 */
		readonly onrbuttonup?: nexacro.EventObject<nexacro.Form, nexacro.MouseEventInfo>;
		/**
		 * This event occurs when focus comes into a Form.
		 */
		readonly onsetfocus?: nexacro.EventObject<nexacro.Form, nexacro.SetFocusEventInfo>;
		/**
		 * This event occurs when the size of a Form changes.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.Form, nexacro.SizeEventInfo>;
		/**
		 * This event occurs right after a step Index is changed in a form that is divided into multiple step pages.
		 */
		readonly onstepchanged?: nexacro.EventObject<nexacro.Form, nexacro.StepChangeEventInfo>;
		/**
		 * This event occurs at intervals set by the setTimer() method.
		 */
		readonly ontimer?: nexacro.EventObject<nexacro.Form, nexacro.TimerEventInfo>;
		/**
		 * This event occurs when you touch and release the screen within the area of a Form.
		 */
		readonly ontouchend?: nexacro.EventObject<nexacro.Form, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is moved along the touch surface within a Form.
		 */
		readonly ontouchmove?: nexacro.EventObject<nexacro.Form, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when a touch point is placed on the touch surface within a Form.
		 */
		readonly ontouchstart?: nexacro.EventObject<nexacro.Form, nexacro.TouchEventInfo>;
		/**
		 * This event occurs when you move the vertical scrollbar of a Form.
		 */
		readonly onvscroll?: nexacro.EventObject<nexacro.Form, nexacro.ScrollEventInfo>;
		/**
		 * @param {string} v This property is used to specify the action printed as an accessibility feature when a selection box moves to a Form.
		 * @returns {void} 
		 */
		set_accessibilityaction(v: string): void;
		/**
		 * @param {nexacro.Enum.DescLevel} v This property is used to determine whether to print accessibility features of the children when a selection box moves to a Form.
		 * @returns {void} 
		 */
		set_accessibilitydesclevel(v: nexacro.Enum.DescLevel): void;
		/**
		 * @param {string} v This property is used to specify the description printed as an accessibility feature when a selection box moves to a Form.
		 * @returns {void} 
		 */
		set_accessibilitydescription(v: string): void;
		/**
		 * @param {boolean} v This property is used to determine whether to print the values of accessibility-related properties when a selection box moves to a Form.
		 * @returns {void} 
		 */
		set_accessibilityenable(v: boolean): void;
		/**
		 * @param {string} v This property is used to specify the label printed as an accessibility feature when a selection box moves to a Form.
		 * @returns {void} 
		 */
		set_accessibilitylabel(v: string): void;
		/**
		 * @param {nexacro.Enum.Role} v This property is used to set the role of a Form. The role is printed as accessibility functionality when a selection box moves to the component.
		 * @returns {void} 
		 */
		set_accessibilityrole(v: nexacro.Enum.Role): void;
		/**
		 * @param {string} v This property is used to set the background of a Form.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a Form.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a Form.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property is used to set the style of a Form by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a Form.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {nexacro.Enum.DragScrollType} v This property is used to determine the directions of scrolling, caused by a user touching and dragging a Form.
		 * @returns {void} 
		 */
		set_dragscrolltype(v: nexacro.Enum.DragScrollType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a Form.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a Form.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {string} v This property sets a font used for a Form.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {number} v This property is used to specify the height of a Form.
		 * @returns {void} 
		 */
		set_height(v: number): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between characters (kerning) displayed in a Form.
		 * @returns {void} 
		 */
		set_letterSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * @param {nexacro.Enum.LocaleCode} v This property is used to set a locale applied to a Form.
		 * @returns {void} 
		 */
		set_locale(v: nexacro.Enum.LocaleCode): void;
		/**
		 * @param {string} v This property is used to specify the name of a Form.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a Form.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a Form.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {number} v This property is used to set the opacity of a Form.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {number} v This property is used to specify the minimum size of the TrackBar control of a scrollbar displayed in a Form.
		 * @returns {void} 
		 */
		set_scrollbarbarminsize(v: number): void;
		/**
		 * @param {number} v This property is used to specify the base size of a scrollbar where the track bar will disappear if the form becomes smaller than the specified size.
		 * @returns {void} 
		 */
		set_scrollbarbaroutsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the decreasing button (DecButton control) of a scrollbar displayed in a Form.
		 * @returns {void} 
		 */
		set_scrollbardecbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the increasing button (IncButton control) of a scrollbar displayed in a Form.
		 * @returns {void} 
		 */
		set_scrollbarincbuttonsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the scrollbar displayed in a Form.
		 * @returns {void} 
		 */
		set_scrollbarsize(v: number): void;
		/**
		 * @param {number} v This property is used to size the TrackBar control of a scrollbar displayed in a Form.
		 * @returns {void} 
		 */
		set_scrollbartrackbarsize(v: number): void;
		/**
		 * @param {(nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`)} v This property determines how scrollbars work in a Form.
		 * @returns {void} 
		 */
		set_scrollbartype(v: nexacro.Enum.ScrollBarType | `${nexacro.Enum.ScrollBarType} ${nexacro.Enum.ScrollBarType}`): void;
		/**
		 * @param {number} v This property is used to set the size of the scroll indicator bars displayed in a Form.
		 * @returns {void} 
		 */
		set_scrollindicatorsize(v: number): void;
		/**
		 * @param {nexacro.Enum.ScrollType} v This property is used to set the types of scrolling applied to a Form.
		 * @returns {void} 
		 */
		set_scrolltype(v: nexacro.Enum.ScrollType): void;
		/**
		 * @param {string} v This property is used to specify the text to be displayed on the status bar of a frame at a higher level.
		 * @returns {void} 
		 */
		set_statustext(v: string): void;
		/**
		 * @param {(nexacro.Enum.HorizontalAlign | `${nexacro.Enum.HorizontalAlign} ${nexacro.Enum.VerticalAlign}`)} v This property is used to set the position of a step control when a form is divided into multiple step pages.
		 * @returns {void} 
		 */
		set_stepalign(v: nexacro.Enum.HorizontalAlign | `${nexacro.Enum.HorizontalAlign} ${nexacro.Enum.VerticalAlign}`): void;
		/**
		 * @param {number} v This property is used to specify the gap between radio buttons displayed on the StepControl object. Those radio buttons appear when the form is divided.
		 * @returns {void} 
		 */
		set_stepitemgap(v: number): void;
		/**
		 * @param {number} v This property is used to specify the size of step buttons, which take the form of a radio button.
		 * @returns {void} 
		 */
		set_stepitemsize(v: number): void;
		/**
		 * @param {nexacro.Enum.StepShowType} v This property is used to define the conditions for the appearance of a step control when a form is divided into multiple step pages.
		 * @returns {void} 
		 */
		set_stepshowtype(v: nexacro.Enum.StepShowType): void;
		/**
		 * @param {string} v This property is used to specify the text to be displayed on the title bar of a frame at a higher level.
		 * @returns {void} 
		 */
		set_titletext(v: string): void;
		/**
		 * @param {string} v This property is used to specify the text of a tooltip that appears when a mouse pointer hovers over a Form.
		 * @returns {void} 
		 */
		set_tooltiptext(v: string): void;
		/**
		 * @param {nexacro.Enum.TooltipType} v This property is used to specify the position and type of a tooltip that appears in a Form.
		 * @returns {void} 
		 */
		set_tooltiptype(v: nexacro.Enum.TooltipType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a Form visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {number} v This property is used to specify the width of a Form.
		 * @returns {void} 
		 */
		set_width(v: number): void;
		/**
		 * @param {(number|nexacro.Unit.PixelNegative)} v This property is used to set the spacing between words displayed in a Form.
		 * @returns {void} 
		 */
		set_wordSpacing(v: number|nexacro.Unit.PixelNegative): void;
		/**
		 * This method is used to add a dynamically-created component as a child to a Form.
		 * @param {string} strChildID ID of a child component to add
		 * @param {object} objComp It specifies an object to be added as a child.
		 * @returns {number} 
		 */
		addChild(strChildID: string, objComp: object): number;
		/**
		 * This method is used to add a handler to a certain event of a Form.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a Form as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to display an alert box.
		 * @param {string} strText This is text to be displayed in the alert box.
		 */
		alert(strText: string): null;
		/**
		 * This method is used to cancel an ongoing transaction.
		 * @param {string} strSvcID This is a string that represents the ID of a transaction to cancel.
This is the ID that is used when the transaction() method is called.
		 */
		cancelTransaction(strSvcID?: string): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to close a running Form.
		 * @param {string} strReturn This is a string representing a value that the Form will deliver to its parent Form before it is closed.
		 */
		close(strReturn?: string): null;
		/**
		 * This method is used to display a dialog box.
		 * @param {string} strText This is text to display in the dialog box.
		 * @param {string} strCaption This is text to display in the title bar of the dialog box.
		 * @param {string} strType This is a string that represents an icon displayed on the left side of the dialog box.

If you specify "error", the dialog box will display a red "X" icon.
If you specify "question", the dialog box will display a question mark (?) icon.
If you specify "warning", the dialog box will display a  exclamation mark (!) icon with the yellow background.
If you specify "information", the dialog box will display a  exclamation mark (!) icon with the blue background.

If you specify nothing, no icon will be displayed.
		 * @returns {boolean} 
		 */
		confirm(strText: string, strCaption?: string, strType?: string): boolean;
		/**
		 * This method finds a handler in a certain event of a Form and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		getCurrentLayoutID(): string;
		/**
		 * This method returns a specific handler from a certain event of a Form by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method returns the first component to receive focus when the user moves the focus in an Form by entering the tab key.
		 * @param {boolean} bStepIn This parameter is applicable when the first component to receive focus represents a container component. This parameter determines whether to include its child components in the list of return objects.
For "true," the method will also return the child components.
For "false," the method will only return the container component.
		 * @returns {object} 
		 */
		getFirstComponent(bStepIn?: boolean): object;
		/**
		 * This method returns the currently-focused component among the child components of a Form.
		 * @returns {object} 
		 */
		getFocus(): object;
		/**
		 * This method is used to return the current position of the track of a horizontal scrollbar.
		 * @returns {number} 
		 */
		getHScrollPos(): number;
		/**
		 * This method returns the last component to receive focus when the user moves the focus in an Form by entering the tab key.
		 * @param {boolean} bStepIn This parameter is applicable when the last component to receive focus represents a container component. This parameter determines whether to include its child components in the list of return objects.
For "true," the method will also return the child components.
For "false," the method will only return the container component.
		 * @returns {object} 
		 */
		getLastComponent(bStepIn?: boolean): object;
		/**
		 * This method is used to obtain the value of a certain property defined in a certain layout of a Form.
		 * @param {string} strLayoutID This is a string that represents the name of a layout.
		 * @param {string} strPropID This is a string that represents the name of the property whose value will be obtained.
		 * @returns {string} 
		 */
		getLayoutInfo(strLayoutID: string, strPropID: string): string;
		/**
		 * This method returns the component to which the focus will move when users enter the tab key at a certain component in an Form.
		 * @param {object} objComp The base component from which focus will move
		 * @param {boolean} bStepIn This parameter is applicable when the component to receive focus represents a container component. This parameter determines whether to include its child components in the list of return objects.
For "true," the method will also return the child components.
For "false," the method will only return the container component.
		 * @returns {object} 
		 */
		getNextComponent(objComp: object, bStepIn?: boolean): object;
		/**
		 * This method is used to obtain the height of a Form in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the width of a Form in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method is used to return the parent frame to which a form belongs.
		 * @returns {object} 
		 */
		getOwnerFrame(): object;
		/**
		 * This method returns the component to which the focus will move when users enter the Shift+Tab key at a certain component in an Form.
		 * @param {boolean} bStepIn This parameter is applicable when the component to receive focus represents a container component. This parameter determines whether to include its child components in the list of return objects.
For "true," the method will also return the child components.
For "false," the method will only return the container component.
		 * @param {object} objComp The base component from which focus will move
		 * @returns {object} 
		 */
		getPrevComponent(bStepIn: boolean, objComp: object): object;
		/**
		 * This method is used to return the number of step pages when a form is divided into multiple step pages.
		 * @returns {number} 
		 */
		getStepCount(): number;
		/**
		 * This method is used to return the index of the current page when a Form is divided into multiple pages.
		 * @returns {number} 
		 */
		getStepIndex(): number;
		/**
		 * This method returns the current position of the thumb of a vertical scrollbar that appears in a Form.
		 * @returns {number} 
		 */
		getVScrollPos(): number;
		/**
		 * This method is used to load a Form that is delivered as an argument instead of a currently-displayed Form.
		 * @param {string} strURL This is a string representing the URL of a Form (XFDL file) that will be loaded.
		 */
		go(strURL: string): null;
		/**
		 * This method is used to check whether a current Form holds another Form that has been opened through script.
		 * @returns {boolean} 
		 */
		hasPopupFrame(): boolean;
		/**
		 * This method is used to insert a dynamically-created component as a child to a Form. The component is added in a specified place in order.
		 * @param {number} nIdx It specifies the index of the place in which a child will be added.
If you specify -1, a child will be added at the end following other child components.
		 * @param {string} strChildID ID of a child component to add
		 * @param {object} objComp It specifies an object to be added as a child.
		 * @returns {number} 
		 */
		insertChild(nIdx: number, strChildID: string, objComp: object): number;
		/**
		 * This method is used to add a handler to a certain event of a Form at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to verify whether an Form has a certain object.
		 * @param {object} objName Object of which you want to verify the presence
		 * @returns {boolean} 
		 */
		isValidObject(objName: object): boolean;
		/**
		 * This method is used to verify whether an Form has a certain object.
		 * @param {string} strName String of an object which you want to verify the presence of
		 * @returns {boolean} 
		 */
		isValidObject(strName: string): boolean;
		/**
		 * This method is used to remove a timer that is created through the setTimer() method.
		 * @param {number} nTimerID This is a number representing the ID of a timer, set when the timer is created through the setTimer()  method.
		 */
		killTimer(nTimerID: number): null;
		/**
		 * This method searches the range from a Form to the upper levels for the object delivered as an argument and returns the object.
		 * @param {string} strObjectID This is a string that represents the ID of an object you want to find.
		 * @returns {object} 
		 */
		lookup(strObjectID: string): object;
		/**
		 * This method is used to load a current screen again.
		 */
		reload(): null;
		/**
		 * This method is used to remove a component that has been dynamically added to a Form.
		 * @param {string} strChildID A string that represents the ID of a child component to remove
		 * @returns {object} 
		 */
		removeChild(strChildID: string): object;
		/**
		 * This method is used to remove a handler in a certain event of a Form.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a Form and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to update the scrollbar and internal components of a Form.
		 */
		resetScroll(): null;
		/**
		 * This method is used to move the slider of a scrollbar from the current position by a certain value delivered as an argument.
		 * @param {number} nHoffsetpos A number indicating the distance by which the slider of a horizontal scrollbar will move from the current position

If the number is negative, the slider will move backward.
If the number is positive, the slider will move forward.

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 * @param {number} nVoffsetpos A number indicating the distance by which the slider of a vertical scrollbar will move from the current position

If the number is negative, the slider will move upward.
If the number is positive, the slider will move downward.

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 */
		scrollBy(nHoffsetpos: number, nVoffsetpos: number): null;
		/**
		 * This method is used to move the slider of a scrollbar to a certain position.
		 * @param {number} nHpos A number indicating the position to which you intend to move the slider of a horizontal scrollbar 

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 * @param {number} nVpos A number indicating the position to which you intend to move the slider of a vertical scrollbar 

If the number is smaller than the value of the scrollbar's min property, the value of the min will apply.
If the number is bigger than the value of the scrollbar's max property, the value of the max will apply.
		 */
		scrollTo(nHpos: number, nVpos: number): null;
		/**
		 * This method is used to change the first handler in a certain event of a Form.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a Form.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to give focus to a Form.
		 * @param {boolean} bMoveScroll If scrolling is enabled in the parent component, it will determine whether to scroll based on the Form.

For "true", the parent component will scroll so that the Form will show.
For "false", the parent component will not scroll regardless of the Form's position.

The default value is "true".
		 * @param {boolean} bInnerFocus If a Form is a container component, this parameter determines whether to move focus to a child component.

For "true", focus will be given to the first child component that can receive focus.
For "false", focus will be given to the Form.

The default value is "true" if a Form is a container component.
		 * @returns {object} 
		 */
		setFocus(bMoveScroll?: boolean, bInnerFocus?: boolean): object;
		setStepCount(nStepcount: number): null;
		/**
		 * This method is used to specify the index of a step page to display when a Form is divided into multiple pages.
		 * @param {number} nIndex It is a number representing the index of the step page to display on the screen.

The index ranges from 0 to one smaller than the value of the stepcount property.
		 * @returns {boolean} 
		 */
		setStepIndex(nIndex: number): boolean;
		/**
		 * This method is used to create a timer to fire the ontimer event at regular intervals.
		 * @param {number} nTimerID This is a number representing the ID of a timer. This can be used to distinguish timers.
The number ranges from 0 to 65535.
		 * @param {number} nElapse This is an interval of milliseconds for firing the ontimer event.
		 */
		setTimer(nTimerID: number, nElapse: number): null;
		/**
		 * This method is used to display/end a wait cursor.
		 * @param {boolean} bWaitFlag It determines whether to display a wait cursor.

For "true", a wait cursor will be displayed on the screen.
For "false", a displayed wait cursor will be ended.

The default value is "true".
		 * @param {boolean} bForcely It determines whether to execute this method regardless of the value of the usewaitcursor property of the Environment object.

If "true", a wait cursor will be displayed/ended regardless of the value of the usewaitcursor property.
If "false" with the usewaitcursor property set to "true", a wait cursor will be displayed/ended.
If "false" with the usewaitcursor property set to "false", this method will not be executed.

The default value is "false".
		 */
		setWaitCursor(bWaitFlag?: boolean, bForcely?: boolean): null;
		/**
		 * This method is used to suspend the execution of script for a specified duration.
		 * @param {number} nMilliseconds This is a count of milliseconds for which the script will be suspended.
		 */
		sleep(nMilliseconds: number): null;
		/**
		 * This method is used to call a service to update a Dataset and conduct the a callback when transaction is finished.
		 * @param {string} strSvcID A string representing an ID to distinguish transactions.
		 * @param {string} strURL A string representing an address to request a transaction.
		 * @param {string} strInDatasets A string representing the ID of a Dataset sent to the server for a data transaction
The Dataset must be defined in the domain of a Form or in AppVariables of an Application.
The argument is specified with the format "input ID=Dataset ID". You can specify multiple Datasets by dividing them with white spaces.

ex) "input1=DataSet00 input2=DataSet01"
		 * @param {string} strOutDatasets A string representing the ID of a Dataset for receiving data from the server for a data transaction
The Dataset must be defined in the domain of a Form or in AppVariables of an Application.
The argument is specified with the format "Dataset ID=output ID". You can specify multiple Datasets by dividing them with white spaces.

ex) "DataSet00=output0 DataSet01=output1"
		 * @param {string} strArgument A string representing the information sent to the server page
An argument is specified with the format "variable ID=variable value" while you can specify multiple arguments by dividing them with white spaces.

ex) "argu0=test argu1=30"
		 * @param {string} strCallbackFunc A string representing a callback that will be called upon receiving the result of a transaction
The callback must be defined in the domain of a Form or an Application.
		 * @param {boolean} bAsync It specifies whether the transaction is asynchronous.

For "true", a transaction will be conducted in the asynchronous manner. Therefore, the script will be executed regardless of the completion of the transaction.
For "false", a transaction will be conducted in the synchronous manner. Therefore, the script will be suspended until the completion of the transaction.

The default value is "true".
		 * @param {number} nDataType It determines the type of the data used in a transaction.
 
For 0, XML-formatted data will be used.
For 1, binary data will be used.
For 2, SSV-formatted data will be used.

The default value is 0.
		 * @param {boolean} bCompress It determines whether to compress data in a transaction.
 
For "true", data will be compressed in a transaction.
For "false", data will not be compressed in a transaction.

The default value is "false".
		 */
		transaction(strSvcID: string, strURL: string, strInDatasets: string, strOutDatasets: string, strArgument: string, strCallbackFunc: string, bAsync?: boolean, nDataType?: number, bCompress?: boolean): null;
	}
}

