// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    ChildFrame: nexacro.ChildFrame;
}

    
declare namespace nexacro {
    type ChildFrameOmitKeys = 'accessibilityaction'|'accessibilitydesclevel'|'accessibilitydescription'|'accessibilityenable'|'accessibilitylabel'|'accessibilityrole'|'boxShadow'|'expr'|'id'|'letterSpacing'|'maxheight'|'maxwidth'|'minheight'|'minwidth'|'padding'|'textAlign'|'textDecoration'|'verticalAlign'|'wordWrap'|'parent'|'positionstep'|'taborder'|'tabstop'|'text'|'tooltiptext'|'tooltiptype'|'wordSpacing'|'addEvent'|'bringToFront'|'bringToPrev'|'getDisplayText'|'getFocus'|'getPixelBottom'|'getPixelHeight'|'getPixelLeft'|'getPixelRight'|'getPixelTop'|'getPixelWidth'|'init'|'moveToNext'|'moveToPrev'|'removeEvent'|'resize'|'sendToBack'|'sendToNext'|'onclick'|'oncontextmenu'|'ondblclick'|'ondrag'|'ondragenter'|'ondragleave'|'ondragmove'|'ondrop'|'oninput'|'onkeydown'|'onkeyup'|'onkillfocus'|'onlbuttondown'|'onlbuttonup'|'onmousedown'|'onmouseenter'|'onmouseleave'|'onmousemove'|'onmouseup'|'onmousewheel'|'onrbuttondown'|'onrbuttonup'|'onsetfocus'|'ontouchend'|'ontouchmove'|'ontouchstart';
	
	interface ChildFrame extends Omit<nexacro.Component, ChildFrameOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.ChildFrame;
	    /**
		 * This property holds the frames that are included by a ChildFrame.
		 */
		readonly all?: object;
		/**
		 * This property is used to determine whether a ChildFrame is sized according to the Form set by the formurl property. This property applies when the ChildFrame is displayed on the screen.
		 */
		readonly autosize?: boolean;
		/**
		 * This property is used to set the background of a ChildFrame.
		 */
		readonly background?: string;
		/**
		 * This property is used to set the shape of the corners of a ChildFrame.
		 */
		readonly borderRadius?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a ChildFrame's bottom side.
		 */
		readonly bottom?: number | nexacro.Unit.PixelPercent;
		/**
		 * This property is used to set the color of the text displayed in a ChildFrame.
		 */
		readonly color?: string;
		/**
		 * This property is used to set the style of a ChildFrame by using a class defined in the relevant XCSS file.
		 */
		readonly cssclass?: string;
		/**
		 * This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a ChildFrame.
		 */
		readonly cursor?: nexacro.Enum.CursorType;
		/**
		 * This property defines an area of a ChildFrame that you can drag to move the frame.
		 */
		readonly dragmovetype?: nexacro.Enum.DragMoveType;
		/**
		 * This property is used to determine whether to enable a ChildFrame.
		 */
		readonly enable?: boolean;
		/**
		 * This property is used to determine whether to trigger events in a ChildFrame.
		 */
		readonly enableevent?: boolean;
		/**
		 * This property sets a font used for a ChildFrame.
		 */
		readonly font?: string;
		/**
		 * This is a read-only property that holds the objects of a form that belongs to a ChildFrame.
		 */
		readonly form?: object;
		/**
		 * This property is used to specify the location of a Form that will belong to the ChildFrame.
		 */
		readonly formurl?: string;
		/**
		 * This property is used to specify the height of a ChildFrame.
		 */
		readonly height?: number | nexacro.Unit.PixelPercent;
		/**
		 * This property is used to set a hotkey for conducting the default action of a ChildFrame.
		 */
		readonly hotkey?: nexacro.Enum.HotKeyModifier;
		/**
		 * This property is used to set the ID of an InitValue to be applied to an ChildFrame.
		 */
		readonly initvalueid?: string;
		/**
		 * This property is used to apply a transparent background to a ChildFrame when the frame is created by the open() method.
		 */
		readonly layered?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a ChildFrame's left side.
		 */
		readonly left?: number | nexacro.Unit.PixelPercent;
		/**
		 * This property is used to specify the name of a ChildFrame.
		 */
		readonly name?: string;
		/**
		 * This property is used to set the border of a ChildFrame.
		 */
		readonly border?: string;
		/**
		 * This property is used to set the image of the edges that are displayed inside the border of a ChildFrame.
		 */
		readonly edge?: string;
		/**
		 * This property is used to set the opacity of a ChildFrame.
		 */
		readonly opacity?: number;
		/**
		 * This property is used to specify the position of a ChildFrame opened through the showModal() method.
		 */
		readonly openalign?: nexacro.Enum.OpenAlign;
		/**
		 * This property is used to size the window of a ChildFrame.
		 */
		readonly openstatus?: nexacro.Enum.OpenStatus;
		/**
		 * This property is used to set the color of the overall parent frame when a child frame is opened in the form of a modal window.
		 */
		readonly overlaycolor?: string;
		/**
		 * This property is used to set the direction of filling the progress bar displayed on the status bar of an ChildFrame.
		 */
		readonly progressbardirection?: any;
		/**
		 * This property is used to set the spacing of the right-hand side of a progress bar displayed in the status bar of an ChildFrame.
		 */
		readonly progressbargap?: any;
		/**
		 * This property is used to set the width of a progress bar displayed in the status bar of an ChildFrame.
		 */
		readonly progressbarsize?: any;
		/**
		 * This property is used to determine whether to use a "continuous" style progress bar for the one displayed in the status bar of a MainFrame.
		 */
		readonly progressbarsmooth?: any;
		/**
		 * This property determines whether a ChildFrame can be resized.
		 */
		readonly resizable?: boolean;
		/**
		 * This property is used to specify the value of the point that indicates the position of a ChildFrame's right side.
		 */
		readonly right?: number | nexacro.Unit.PixelPercent;
		/**
		 * This property is used to define the direction of printing internal contents or components in a ChildFrame.
		 */
		readonly rtl?: boolean;
		/**
		 * This property is used to determine whether the status bar of an ChildFrame will display the values of the statustext properties of child frames and forms.
		 */
		readonly showcascadestatustext?: any;
		/**
		 * This property is used to determine whether the title bar of a ChildFrame includes the title text of subordinate frames and Forms.
		 */
		readonly showcascadetitletext?: boolean;
		/**
		 * This property determines whether the information about a ChildFrame is displayed on the taskbar of Windows when the ChildFrame is opened as a modeless window through the open() method.
		 */
		readonly showontaskbar?: boolean;
		/**
		 * This property is used to determine whether a status bar is displayed in a ChildFrame.
		 */
		readonly showstatusbar?: boolean;
		/**
		 * This property is used to determine whether a title bar is displayed in a ChildFrame.
		 */
		readonly showtitlebar?: boolean;
		/**
		 * This property is used to determine whether to display an icon on the titlebar of a ChildFrame.
		 */
		readonly showtitleicon?: boolean;
		/**
		 * This property holds the status bar of a ChildFrame.
		 */
		readonly statusbar?: object;
		/**
		 * This property is used to set the height of the status bar of a ChildFrame.
		 */
		readonly statusbarheight?: any;
		/**
		 * This property is used to set the text displayed on the status bar of a ChildFrame.
		 */
		readonly statustext?: string;
		/**
		 * This property is used to set an icon of a modeless ChildFrame, displayed on the taskbar.
		 */
		readonly taskbaricon?: string;
		/**
		 * This property holds the title bar of a ChildFrame.
		 */
		readonly titlebar?: object;
		/**
		 * This property is used to set the gaps between the system buttons displayed on the title bar of an ChildFrame.
		 */
		readonly titlebarbuttongap?: any;
		/**
		 * This property is used to set the size of the system buttons displayed on the title bar of a ChildFrame.
		 */
		readonly titlebarbuttonsize?: number | `${number}` | `${number} ${number}`;
		/**
		 * This property is used to set the height of the title bar of a ChildFrame.
		 */
		readonly titlebarheight?: number;
		/**
		 * This property is used to specify the text to be displayed on the title bar of a ChildFrame.
		 */
		readonly titletext?: string;
		/**
		 * This property is used to specify the value of the point that indicates the position of a ChildFrame's top side.
		 */
		readonly top?: number | nexacro.Unit.PixelPercent;
		/**
		 * This property determines whether to display a ChildFrame as a topmost frame. The ChildFrame mentioned here has its separate window.
		 */
		readonly topmost?: boolean;
		/**
		 * This property is used to determine whether to make a ChildFrame visible or not.
		 */
		readonly visible?: boolean;
		/**
		 * This property is used to specify the width of a ChildFrame.
		 */
		readonly width?: number | nexacro.Unit.PixelPercent;
		/**
		 * This is an event that occurs when an ChildFrame becomes activated.
		 */
		readonly onactivate?: nexacro.EventObject<nexacro.ChildFrame, nexacro.ActivateEventInfo>;
		/**
		 * This is an event that occurs before a ChildFrame is closed.
		 */
		readonly onbeforeclose?: nexacro.EventObject<nexacro.ChildFrame, nexacro.CloseEventInfo>;
		/**
		 * This event occurs when a ChildFrame is closed.
		 */
		readonly onclose?: nexacro.EventObject<nexacro.ChildFrame, nexacro.CloseEventInfo>;
		/**
		 * This is an event that occurs when an ChildFrame becomes deactivated.
		 */
		readonly ondeactivate?: nexacro.EventObject<nexacro.ChildFrame, nexacro.ActivateEventInfo>;
		/**
		 * This event occurs when the position of a ChildFrame changes.
		 */
		readonly onmove?: nexacro.EventObject<nexacro.ChildFrame, nexacro.MoveEventInfo>;
		/**
		 * This event occurs when the orientation of a mobile device's screen changes.
		 */
		readonly onorientationchange?: nexacro.EventObject<nexacro.ChildFrame, nexacro.OrientationChangeEventInfo>;
		/**
		 * This event occurs when the size of a ChildFrame changes.
		 */
		readonly onsize?: nexacro.EventObject<nexacro.ChildFrame, nexacro.SizeEventInfo>;
		/**
		 * This event occurs when a system command message comes into a ChildFrame.
		 */
		readonly onsyscommand?: nexacro.EventObject<nexacro.ChildFrame, nexacro.SysCommandEventInfo>;
		/**
		 * @param {boolean} v This property is used to determine whether a ChildFrame is sized according to the Form set by the formurl property. This property applies when the ChildFrame is displayed on the screen.
		 * @returns {void} 
		 */
		set_autosize(v: boolean): void;
		/**
		 * @param {string} v This property is used to set the background of a ChildFrame.
		 * @returns {void} 
		 */
		set_background(v: string): void;
		/**
		 * @param {string} v This property is used to set the shape of the corners of a ChildFrame.
		 * @returns {void} 
		 */
		set_borderRadius(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the value of the point that indicates the position of a ChildFrame's bottom side.
		 * @returns {void} 
		 */
		set_bottom(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * @param {string} v This property is used to set the color of the text displayed in a ChildFrame.
		 * @returns {void} 
		 */
		set_color(v: string): void;
		/**
		 * @param {string} v This property is used to set the style of a ChildFrame by using a class defined in the relevant XCSS file.
		 * @returns {void} 
		 */
		set_cssclass(v: string): void;
		/**
		 * @param {nexacro.Enum.CursorType} v This property is used to set the type of a mouse pointer that appears when the mouse cursor is located in a ChildFrame.
		 * @returns {void} 
		 */
		set_cursor(v: nexacro.Enum.CursorType): void;
		/**
		 * @param {nexacro.Enum.DragMoveType} v This property defines an area of a ChildFrame that you can drag to move the frame.
		 * @returns {void} 
		 */
		set_dragmovetype(v: nexacro.Enum.DragMoveType): void;
		/**
		 * @param {boolean} v This property is used to determine whether to enable a ChildFrame.
		 * @returns {void} 
		 */
		set_enable(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to trigger events in a ChildFrame.
		 * @returns {void} 
		 */
		set_enableevent(v: boolean): void;
		/**
		 * @param {string} v This property sets a font used for a ChildFrame.
		 * @returns {void} 
		 */
		set_font(v: string): void;
		/**
		 * @param {string} v This property is used to specify the location of a Form that will belong to the ChildFrame.
		 * @returns {void} 
		 */
		set_formurl(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the height of a ChildFrame.
		 * @returns {void} 
		 */
		set_height(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * @param {nexacro.Enum.HotKeyModifier} v This property is used to set a hotkey for conducting the default action of a ChildFrame.
		 * @returns {void} 
		 */
		set_hotkey(v: nexacro.Enum.HotKeyModifier): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the value of the point that indicates the position of a ChildFrame's left side.
		 * @returns {void} 
		 */
		set_left(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * @param {string} v This property is used to specify the name of a ChildFrame.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * @param {string} v This property is used to set the border of a ChildFrame.
		 * @returns {void} 
		 */
		set_border(v: string): void;
		/**
		 * @param {string} v This property is used to set the image of the edges that are displayed inside the border of a ChildFrame.
		 * @returns {void} 
		 */
		set_edge(v: string): void;
		/**
		 * @param {number} v This property is used to set the opacity of a ChildFrame.
		 * @returns {void} 
		 */
		set_opacity(v: number): void;
		/**
		 * @param {nexacro.Enum.OpenAlign} v This property is used to specify the position of a ChildFrame opened through the showModal() method.
		 * @returns {void} 
		 */
		set_openalign(v: nexacro.Enum.OpenAlign): void;
		/**
		 * @param {nexacro.Enum.OpenStatus} v This property is used to size the window of a ChildFrame.
		 * @returns {void} 
		 */
		set_openstatus(v: nexacro.Enum.OpenStatus): void;
		/**
		 * @param {string} v This property is used to set the color of the overall parent frame when a child frame is opened in the form of a modal window.
		 * @returns {void} 
		 */
		set_overlaycolor(v: string): void;
		/**
		 * @param {any} v This property is used to set the direction of filling the progress bar displayed on the status bar of an ChildFrame.
		 * @returns {void} 
		 */
		set_progressbardirection(v: any): void;
		/**
		 * @param {any} v This property is used to set the spacing of the right-hand side of a progress bar displayed in the status bar of an ChildFrame.
		 * @returns {void} 
		 */
		set_progressbargap(v: any): void;
		/**
		 * @param {any} v This property is used to set the width of a progress bar displayed in the status bar of an ChildFrame.
		 * @returns {void} 
		 */
		set_progressbarsize(v: any): void;
		/**
		 * @param {any} v This property is used to determine whether to use a "continuous" style progress bar for the one displayed in the status bar of a MainFrame.
		 * @returns {void} 
		 */
		set_progressbarsmooth(v: any): void;
		/**
		 * @param {boolean} v This property determines whether a ChildFrame can be resized.
		 * @returns {void} 
		 */
		set_resizable(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the value of the point that indicates the position of a ChildFrame's right side.
		 * @returns {void} 
		 */
		set_right(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * @param {any} v This property is used to determine whether the status bar of an ChildFrame will display the values of the statustext properties of child frames and forms.
		 * @returns {void} 
		 */
		set_showcascadestatustext(v: any): void;
		/**
		 * @param {boolean} v This property is used to determine whether the title bar of a ChildFrame includes the title text of subordinate frames and Forms.
		 * @returns {void} 
		 */
		set_showcascadetitletext(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether a status bar is displayed in a ChildFrame.
		 * @returns {void} 
		 */
		set_showstatusbar(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether a title bar is displayed in a ChildFrame.
		 * @returns {void} 
		 */
		set_showtitlebar(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to display an icon on the titlebar of a ChildFrame.
		 * @returns {void} 
		 */
		set_showtitleicon(v: boolean): void;
		/**
		 * @param {any} v This property is used to set the height of the status bar of a ChildFrame.
		 * @returns {void} 
		 */
		set_statusbarheight(v: any): void;
		/**
		 * @param {string} v This property is used to set the text displayed on the status bar of a ChildFrame.
		 * @returns {void} 
		 */
		set_statustext(v: string): void;
		/**
		 * @param {string} v This property is used to set an icon of a modeless ChildFrame, displayed on the taskbar.
		 * @returns {void} 
		 */
		set_taskbaricon(v: string): void;
		/**
		 * @param {any} v This property is used to set the gaps between the system buttons displayed on the title bar of an ChildFrame.
		 * @returns {void} 
		 */
		set_titlebarbuttongap(v: any): void;
		/**
		 * @param {(number | `${number}` | `${number} ${number}`)} v This property is used to set the size of the system buttons displayed on the title bar of a ChildFrame.
		 * @returns {void} 
		 */
		set_titlebarbuttonsize(v: number | `${number}` | `${number} ${number}`): void;
		/**
		 * @param {number} v This property is used to set the height of the title bar of a ChildFrame.
		 * @returns {void} 
		 */
		set_titlebarheight(v: number): void;
		/**
		 * @param {string} v This property is used to specify the text to be displayed on the title bar of a ChildFrame.
		 * @returns {void} 
		 */
		set_titletext(v: string): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the value of the point that indicates the position of a ChildFrame's top side.
		 * @returns {void} 
		 */
		set_top(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * @param {boolean} v This property determines whether to display a ChildFrame as a topmost frame. The ChildFrame mentioned here has its separate window.
		 * @returns {void} 
		 */
		set_topmost(v: boolean): void;
		/**
		 * @param {boolean} v This property is used to determine whether to make a ChildFrame visible or not.
		 * @returns {void} 
		 */
		set_visible(v: boolean): void;
		/**
		 * @param {(number | nexacro.Unit.PixelPercent)} v This property is used to specify the width of a ChildFrame.
		 * @returns {void} 
		 */
		set_width(v: number | nexacro.Unit.PixelPercent): void;
		/**
		 * This method is used to add a handler to a certain event of a ChildFrame.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		addEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a function and add it to a certain event of a ChildFrame as a handler.
		 * @param {string} strEventID The ID of an event that the handler will be added to
		 * @param {string} strFunc A string that represents the name of a handler function to add
		 * @param {object} objTarget A scope in which you search for the handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		addEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to display a alert box of an ChildFrame.
		 * @param {string} strText Text to be displayed on the dialog
		 */
		alert(strText: string): null;
		/**
		 * This method is used to delete all the event handlers registered in a certain event.
		 * @param {string} strEventID The ID of an event, all of whose handlers will be deleted
		 * @returns {number} 
		 */
		clearEventHandler(strEventID: string): number;
		/**
		 * This method is used to display a confirm dialog box of an ChildFrame.
		 * @param {string} strText Text to be displayed on the confirm dialog
		 * @param {string} strCaption Text to be display on the title bar of the confirm dialog
		 * @param {string} strType You can determine type of the icon displayed on the left area of the dialog by entering a string. 

If you enter "error," the box will display an X-shaped icon in red color.
If you enter "question," the box will display a question mark icon.
If you enter "warning," the box will display an exclamation mark icon on a yellow background.
If you enter "information," the box will display an exclamation mark icon on a blue background.

If you do not enter the value, no icon will be displayed.
		 * @returns {boolean} 
		 */
		confirm(strText: string, strCaption?: string, strType?: string): boolean;
		/**
		 * This method is used to delete a ChildFrame that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method finds a handler in a certain event of a ChildFrame and returns the index of the handler.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {object} objFunc The handler function to find
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		findEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method returns a specific handler from a certain event of a ChildFrame by specifying the index number of the handler.
		 * @param {string} strEventID The ID of an event that you search for your sought handler
		 * @param {number} nIdx The index number of the event handler you want to find

The index number begins from 0.
		 * @returns {object} 
		 */
		getEventHandler(strEventID: string, nIdx: number): object;
		/**
		 * This method returns the Form held by a ChildFrame.
		 * @returns {object} 
		 */
		getForm(): object;
		getNativeHandle(): number;
		/**
		 * This method is used to obtain the bottom position of a ChildFrame in pixel, based on the parent frame's top side.
		 * @returns {number} 
		 */
		getOffsetBottom(): number;
		/**
		 * This method is used to obtain the height of a ChildFrame in pixel.
		 * @returns {number} 
		 */
		getOffsetHeight(): number;
		/**
		 * This method is used to obtain the left position of a ChildFrame in pixel, based on the parent frame's left side.
		 * @returns {number} 
		 */
		getOffsetLeft(): number;
		/**
		 * This method is used to obtain the right position of a ChildFrame in pixel, based on the parent frame's left side.
		 * @returns {number} 
		 */
		getOffsetRight(): number;
		/**
		 * This method is used to obtain the top position of a ChildFrame in pixel, based on the parent frame's top side.
		 * @returns {number} 
		 */
		getOffsetTop(): number;
		/**
		 * This method is used to obtain the width of a ChildFrame in pixel.
		 * @returns {number} 
		 */
		getOffsetWidth(): number;
		/**
		 * This method is used to return the parent frame to which an ChildFrame belongs.
		 * @returns {object} 
		 */
		getOwnerFrame(): object;
		/**
		 * This method is used to initialize a ChildFrame after creating it in a script dynamically.
		 * @param {string} strName It sets the ID of a ChildFrame in the form of a string.
		 * @param {number} nLeft It sets the value of the left property of a ChildFrame, based on the top-left side of the parent frame.
The value can be marked in pixel or percentage (%).
		 * @param {number} nTop It sets the value of the top property of a ChildFrame, based on the top-left side of the parent frame.
The value can be marked in pixel or percentage (%).
		 * @param {number} nWidth It sets the value of the width property of a ChildFrame.
The value can be marked in pixel or percentage (%).
		 * @param {number} nHeight It sets the value of the height property of a ChildFrame.
The value can be marked in pixel or percentage (%).
		 * @param {number} nRight It sets the value of the right property of a ChildFrame, based on the bottom-right side of the parent frame.
The value can be marked in pixel or percentage (%).
This value will be ignored if both the nLeft and nWidth values are all specified.
		 * @param {number} nBottom It sets the value of the bottom property of a ChildFrame, based on the bottom-right side of the parent frame.
The value can be marked in pixel or percentage (%).
This value will be ignored if both the nTop and nHeight values are all specified.
		 * @param {any} strUrl 
		 */
		init(strName: string, nLeft: number, nTop: number, nWidth: number, nHeight: number, nRight?: number, nBottom?: number, strUrl?: any): null;
		/**
		 * This method is used to add a handler to a certain event of a ChildFrame at a specified position.
		 * @param {string} strEventID The ID of an event that the handler will be inserted to
		 * @param {number} nIndex This is an index number of the position at which the handler will be added.

If you specify -1, the handler will be added at the end.
If you specify a value bigger than the number of handlers defined in the event, the handler will be added at the end.
If you specify a NaN value, the values will turn to 0 in compliance with ECMA's conversion rule.
		 * @param {object} objFunc A handler function to add
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		insertEventHandler(strEventID: string, nIndex: number, objFunc: object, objTarget: object): number;
		move(nLeft: any, nTop: any, nWidth?: any, nHeight?: any, nRight?: any, nBottom?: any): null;
		/**
		 * This method is used to remove a handler in a certain event of a ChildFrame.
		 * @param {string} strEventID The ID of the event that holds the handler
		 * @param {object} objFunc A handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
		 * @returns {number} 
		 */
		removeEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method is used to find a handler in a certain event of a ChildFrame and remove it.
		 * @param {string} strEventID The ID of an event that you will search to find the handler
		 * @param {string} strFunc A string that represents the name of a handler function to remove
		 * @param {object} objTarget The scope in which the handler function is valid
If this method fails to find the handler in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		removeEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to change the first handler in a certain event of a ChildFrame.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {object} objFunc A handler function that will replace the existing handler
		 * @param {object} objTarget The scope in which the new handler function is valid
		 * @returns {number} 
		 */
		setEventHandler(strEventID: string, objFunc: object, objTarget: object): number;
		/**
		 * This method finds a function and uses it to replace the first handler in a certain event of a ChildFrame.
		 * @param {string} strEventID The ID of the event that holds the existing handler
		 * @param {string} strFunc A string that represents the name of a function that will replace the existing handler
		 * @param {object} objTarget A scope in which you search for the new handler function
If this method fails to find the function in a specified scope, it will then search the regions at higher levels.
		 * @returns {number} 
		 */
		setEventHandlerLookup(strEventID: string, strFunc: string, objTarget: object): number;
		/**
		 * This method is used to activate and give a focus to an ChildFrame.
		 * @returns {object} 
		 */
		setFocus(): object;
		/**
		 * This method is used to specify the bottom position of a ChildFrame in pixel when the ChildFrame belongs to a FrameSet.
		 * @param {number} nBottom It is a pixel value representing the bottom position of a ChildFrame, calculated based on the parent FrameSet's top position.
		 */
		setOffsetBottom(nBottom: number): null;
		/**
		 * This method is used to specify the height position of a ChildFrame in pixel.
		 * @param {number} nHeight It is a pixel value representing the height of a ChildFrame.
		 */
		setOffsetHeight(nHeight: number): null;
		/**
		 * This method is used to specify the left position of a ChildFrame in pixel when the ChildFrame belongs to a FrameSet.
		 * @param {number} nLeft It is a pixel value representing the left position of a ChildFrame, calculated based on the parent FrameSet's left position.
		 */
		setOffsetLeft(nLeft: number): null;
		/**
		 * This method is used to specify the right position of a ChildFrame in pixel when the ChildFrame belongs to a FrameSet.
		 * @param {number} nRight It is a pixel value representing the right position of a ChildFrame, calculated based on the parent FrameSet's left position.
		 */
		setOffsetRight(nRight: number): null;
		/**
		 * This method is used to specify the top position of a ChildFrame in pixel when the ChildFrame belongs to a FrameSet.
		 * @param {number} nTop It is a pixel value representing the top position of a ChildFrame, calculated based on the parent FrameSet's top position.
		 */
		setOffsetTop(nTop: number): null;
		/**
		 * This method is used to specify the width of a ChildFrame in pixel.
		 * @param {number} nWidth It is a pixel value representing the width of a ChildFrame.
		 */
		setOffsetWidth(nWidth: number): null;
		/**
		 * This method is used to display a child frame on the screen. The child frame mentioned here refers to the one that is dynamically created through a script.
		 */
		show(): null;
		/**
		 * This method is used to display a dynamically-created ChildFrame in the form of a modal window.
		 * @param {string} strID This is a string that represents the ID of a ChildFrame that will be opened as a modal window.

If you omit this parameter, the argument will adopt the name property of the ChildFrame.
		 * @param {object} objParentFrame This is an object representing the parent frame of the ChildFrame displayed as a modal window.

If you specify "null", the MainFrame will serve as a parent.
		 * @param {object} objArguList This a list of variables to add to a ChildFrame that takes the form of a modal window, with the format {variable name:variable value, variable name:variable value}.
		 * @param {object} objOpener This a Form object that will be the opener of the ChildFrame displayed as a modal window.

If unspecified, the opener will be the Form connected to the frame designated by the objParentFrame parameter.
If you specify "null" as a value of the objParentFrame parameter, this parameter will be undefined.
		 * @param {string} callbackFunc This is a string representing a callback that will be called when the modal ChildFrame is closed.

The callback brings arguments from the value of the strID parameter as well as the return value.
The value of the strID parameter here means the one set for executing this method.
The return value here means the argument of the close( ) method of the ChildFrame displayed as a modal window.
		 * @returns {boolean} 
		 */
		showModal(strID?: string, objParentFrame?: object, objArguList?: object, objOpener?: object, callbackFunc?: string): boolean;
	}
}

