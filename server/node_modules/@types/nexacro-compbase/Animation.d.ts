// Type definitions for Nexacro N
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.8;
    
interface NexacroAPI {
    Animation: nexacro.Animation;
}

    
declare namespace nexacro {
    type AnimationOmitKeys = 'id';
	
	interface Animation extends Omit<nexacro.EventSinkObject, AnimationOmitKeys> {
	    /**
		 * @constructor
		 */
		new(): nexacro.Animation;
	    /**
		 * This property is used to set a Bezier curve applied to an animation. This property is applicable only when the easing property is set to "custom".
		 */
		readonly beziercurve?: string;
		/**
		 * This property is used to specify the length of a delay to an animation.
		 */
		readonly delay?: number;
		/**
		 * This property is used to specify the direction of applying an animation.
		 */
		readonly direction?: nexacro.Enum.AniDirection;
		/**
		 * This property is used to specify the duration of an animation.
		 */
		readonly duration?: number;
		/**
		 * This property is used to specify an interpolation function applied to an animation.
		 */
		readonly easing?: nexacro.Enum.AniEasing;
		/**
		 * This property is used to specify elasticity applied to an animation.
		 */
		readonly elasticity?: number;
		/**
		 * This read-only property holds all the AnimationItem objects that are register to an Animation object.
		 */
		readonly items?: object;
		/**
		 * This property is used to specify whether to repeat an animation.
		 */
		readonly loop?: boolean;
		/**
		 * This property is used to specify the number of times that an animation is repeated with the loop property set to "true".
		 */
		readonly loopcount?: number;
		/**
		 * This property is used to specify the name of an Animation object.
		 */
		readonly name?: string;
		/**
		 * This read-only property holds the parent object of a Animation.
		 */
		readonly parent?: object;
		/**
		 * This event occurs when an animation begins to take effect.
		 */
		readonly onbegin?: nexacro.EventObject<nexacro.Animation, nexacro.AnimationEventInfo>;
		/**
		 * This event occurs when an animation finishes.
		 */
		readonly oncomplete?: nexacro.EventObject<nexacro.Animation, nexacro.AnimationEventInfo>;
		/**
		 * This event occurs for every tick when the animation is being performed.
		 */
		readonly onrun?: nexacro.EventObject<nexacro.Animation, nexacro.AnimationEventInfo>;
		/**
		 * This event occurs for every tick after the calling of the play() method and until the animation finishes.
		 */
		readonly onupdate?: nexacro.EventObject<nexacro.Animation, nexacro.AnimationEventInfo>;
		/**
		 * @param {string} v This property is used to set a Bezier curve applied to an animation. This property is applicable only when the easing property is set to "custom".
		 * @returns {void} 
		 */
		set_beziercurve(v: string): void;
		/**
		 * @param {number} v This property is used to specify the length of a delay to an animation.
		 * @returns {void} 
		 */
		set_delay(v: number): void;
		/**
		 * @param {nexacro.Enum.AniDirection} v This property is used to specify the direction of applying an animation.
		 * @returns {void} 
		 */
		set_direction(v: nexacro.Enum.AniDirection): void;
		/**
		 * @param {number} v This property is used to specify the duration of an animation.
		 * @returns {void} 
		 */
		set_duration(v: number): void;
		/**
		 * @param {nexacro.Enum.AniEasing} v This property is used to specify an interpolation function applied to an animation.
		 * @returns {void} 
		 */
		set_easing(v: nexacro.Enum.AniEasing): void;
		/**
		 * @param {number} v This property is used to specify elasticity applied to an animation.
		 * @returns {void} 
		 */
		set_elasticity(v: number): void;
		/**
		 * @param {boolean} v This property is used to specify whether to repeat an animation.
		 * @returns {void} 
		 */
		set_loop(v: boolean): void;
		/**
		 * @param {number} v This property is used to specify the number of times that an animation is repeated with the loop property set to "true".
		 * @returns {void} 
		 */
		set_loopcount(v: number): void;
		/**
		 * @param {string} v This property is used to specify the name of an Animation object.
		 * @returns {void} 
		 */
		set_name(v: string): void;
		/**
		 * This method is used to designate a component that will be a target of an animation. The component will be added as an item of an Animation object.
		 * @param {string} strID It is a string that represents the ID of an AnimationItem object to be added to an Animation object.
		 * @param {object} objComp It is an object that represents the component to which an animation is applied.
		 * @param {string} strProps This is a string that represents a property and its values that are used to express an animation.

Please refer to the document of the props property of the AnimationItem to learn how to set this parameter.
		 * @returns {number} 
		 */
		addTarget(strID: string, objComp: object, strProps: string): number;
		/**
		 * This method is used to delete a Animation that is dynamically created through a script.
		 * @returns {boolean} 
		 */
		destroy(): boolean;
		/**
		 * This method is used to pause an ongoing animation.
		 * @returns {boolean} 
		 */
		pause(): boolean;
		/**
		 * This method is used to start an animation.
		 * @returns {boolean} 
		 */
		play(): boolean;
		/**
		 * This method is used to remove an AnimationItem object that is added as an item of an Animation object.
		 * @param {string} strID It is a string that represents the ID of an AnimationItem object to be removed from the Animation object.
		 * @returns {object} 
		 */
		removeTarget(strID: string): object;
		/**
		 * This method is used to reverse the direction of an animation.
		 * @returns {boolean} 
		 */
		reverse(): boolean;
		/**
		 * This method is used to move the playback position of an animation to a certain point.
		 * @param {number} nMSecond It is a number representing the point of time to which the playback position will move.

The number should fall within the range of the value of the duration property, which indicates the entire duration of the animation.
If the number falls outside the range, the number will be adjusted to the minimum or maximum value.
		 * @returns {number} 
		 */
		seek(nMSecond: number): number;
		/**
		 * This method is used to stop an ongoing animation.
		 * @returns {boolean} 
		 */
		stop(): boolean;
	}
}

